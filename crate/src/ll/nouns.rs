// vim:set ro: -*- buffer-read-only:t -*-
// -*- mode: rust -*-
//
// This code is generated by the tools in the en-inflexion repo. PRs should
// edit the tools instead of editing this code.
//
// Anything used here must be in the Cargo.toml for the crate, not for the
// generator.

//! Low level functions and data for nouns.
use crate::{
    term::Term,
    util::{to_titlecase, PREPOSITION_REGEX_STR},
};
use once_cell::sync::Lazy;
use regex::Regex;
use std::{
    borrow::Cow,
    collections::{HashMap, HashSet},
};

#[derive(Debug)]
struct Recognizer {
    regex: Regex,
    is_nonindicative: bool,
    recursive_capture_idx: Option<usize>,
}

static PLURAL_POSSESSIVE_REGEX: Lazy<Regex> = Lazy::new(|| Regex::new("(?i).+'s?$").unwrap());
static SINGULAR_POSSESSIVE_REGEX: Lazy<Regex> = Lazy::new(|| Regex::new("(?i).+'s$").unwrap());

static MODERN_PLURAL_OF: Lazy<HashMap<&'static str, &'static str>> = Lazy::new(|| {
    [
        (" ox", " oxen"),
        ("-ox", "-oxen"),
        ("[^ns]sis", "[^ns]ses"),
        ("[aeo]lf", "[aeo]lves"),
        ("abacus", "abacuses"),
        ("aboiteau", "aboiteaus"),
        ("abortorium", "abortoria"),
        ("abortus", "abortuses"),
        ("abscissa", "abscissas"),
        ("abstractum", "abstracta"),
        ("acarus", "acari"),
        ("Achinese", "Achinese"),
        ("acicula", "aciculae"),
        ("acinus", "acini"),
        ("acroama", "acroamata"),
        ("acropolis", "acropolises"),
        ("actinia", "actinias"),
        ("aculeus", "aculei"),
        ("addendum", "addendums"),
        ("adieu", "adieus"),
        ("adjutant general", "adjutant generals"),
        ("adminiculum", "adminicula"),
        ("ado", "ados"),
        ("adviso", "advisoes"),
        ("adytum", "adyta"),
        ("aecidium", "aecidia"),
        ("aegis", "aegises"),
        ("aelf", "aelfe"),
        ("aficionado", "aficionados"),
        ("afreet", "afreets"),
        ("afrit", "afrits"),
        ("agape", "agapes"),
        ("agend", "agends"),
        ("agendum", "agenda"),
        ("agent provocateur", "agents provocateurs"),
        ("aggro", "aggros"),
        ("agon", "agones"),
        ("agora", "agorae"),
        ("agrogorod", "agrogoroda"),
        ("aide de camp", "aides de camp"),
        ("aide-de-camp", "aides-de-camp"),
        ("ala", "alae"),
        ("alan", "alans"),
        ("albergo", "alberghi"),
        ("albino", "albinos"),
        ("ale wife", "ale wives"),
        ("ale-wife", "ale-wives"),
        ("Alfurese", "Alfurese"),
        ("alga", "algae"),
        ("alguacil", "alguacils"),
        ("alias", "aliases"),
        ("allargando", "allargandi"),
        ("allegro", "allegros"),
        ("alluvium", "alluviums"),
        ("alto", "altos"),
        ("alto relievo", "alto relievos"),
        ("alto-relievo", "alto-relievos"),
        ("altorelievo", "altorelievos"),
        ("alula", "alulae"),
        ("alumna", "alumnae"),
        ("alumnus", "alumni"),
        ("alveolus", "alveoli"),
        ("ambo", "ambos"),
        ("Amboinese", "Amboinese"),
        ("ambulacrum", "ambulacra"),
        ("ambuscado", "ambuscados"),
        ("amentum", "amenta"),
        ("Americanese", "Americanese"),
        ("amicus curiae", "amici curiae"),
        ("ammo", "ammos"),
        ("amoeba", "amoebas"),
        ("amoretto", "amoretti"),
        ("amorino", "amorini"),
        ("Amoyese", "Amoyese"),
        ("amphipneust", "amphipneusts"),
        ("amphora", "amphorae"),
        ("anacoluthon", "anacoluthons"),
        ("anathema", "anathemas"),
        ("ancona", "ancone"),
        ("Andamanese", "Andamanese"),
        ("angioma", "angiomata"),
        ("Angolese", "Angolese"),
        ("angustia", "angustiae"),
        ("anlage", "anlages"),
        ("Annamese", "Annamese"),
        ("anta", "antae"),
        ("Antananarivo", "Antananarivos"),
        ("antefix", "antifixes"),
        ("antenna", "antennas"),
        ("anthemion", "anthemia"),
        ("anthodium", "anthodia"),
        ("anti serum", "anti serums"),
        ("anti-serum", "anti-serums"),
        ("antiserum", "antisera"),
        ("antrum", "antra"),
        ("apex", "apexes"),
        ("aphelion", "aphelia"),
        ("aphis", "aphides"),
        ("apothecium", "apothecia"),
        ("apparatchik", "apparatchiks"),
        ("apparatus", "apparatuses"),
        ("appendix", "appendixes"),
        ("appressorium", "appressoria"),
        ("apsis", "apsides"),
        ("apterium", "apteria"),
        ("aptychus", "aptychi"),
        ("aquarium", "aquariums"),
        ("Aragonese", "Aragonese"),
        ("Arakanese", "Arakanese"),
        ("arango", "arangoes"),
        ("arboretum", "arboreta"),
        ("arcanum", "arcana"),
        ("archegonium", "archegonia"),
        ("archipelago", "archipelagos"),
        ("arcosolium", "arcosolia"),
        ("areola", "areolae"),
        ("arf", "arves"),
        ("argumentum", "argumenta"),
        ("arista", "aristae"),
        ("armadillo", "armadillos"),
        ("arrha", "arrhae"),
        ("asbestos", "asbestoses"),
        ("ascidium", "ascidia"),
        ("Asherah", "Asherahs"),
        ("Assamese", "Assamese"),
        ("asterias", "asteriae"),
        ("astrocytoma", "astrocytomas"),
        ("asylum", "asylums"),
        ("asyndeton", "asyndeta"),
        ("ataman", "atamans"),
        ("Atlas", "Atlantes"),
        ("atlas", "atlases"),
        ("atman", "atmas"),
        ("aureus", "aurei"),
        ("aurora", "auroras"),
        ("Auslese", "Auslesen"),
        ("auslese", "ausleses"),
        ("auspex", "auspices"),
        ("auto", "autos"),
        ("auto de fe", "auto de fes"),
        ("auto-de-fe", "auto-de-fes"),
        ("autobahn", "autobahns"),
        ("autochthon", "autochthons"),
        ("autostrada", "autostradas"),
        ("avicularium", "avicularia"),
        ("Avignonese", "Avignonese"),
        ("aviso", "avisos"),
        ("avocado", "avocados"),
        ("ax", "axes"),
        ("axe", "axes"),
        ("axilla", "axillae"),
        ("axis", "axes"),
        ("axon", "axons"),
        ("axopodium", "axopodia"),
        ("Azerbaijanese", "Azerbaijanese"),
        ("baal", "baals"),
        ("bacillus", "bacilli"),
        ("bacterium", "bacteria"),
        ("Bahaman", "Bahamans"),
        ("bajocco", "bajocchi"),
        ("Balinese", "Balinese"),
        ("ballabile", "ballabili"),
        ("ballata", "ballate"),
        ("ballerina", "ballerinas"),
        ("ballista", "ballistas"),
        ("Bamako", "Bamakos"),
        ("bandeau", "bandeaux"),
        ("bandit", "bandits"),
        ("Barquisimeto", "Barquisimetos"),
        ("barrico", "barricoes"),
        ("base", "bases"),
        ("basilica", "basilicas"),
        ("basis", "bases"),
        ("bass", "basses"),
        ("basso", "bassos"),
        ("bateau", "bateaux"),
        ("bath", "baths"),
        ("bathos", "bathoses"),
        ("batz", "batzes"),
        ("beau", "beaus"),
        ("beau geste", "beau gestes"),
        ("bechuana", "bechuanas"),
        ("beef", "beefs"),
        ("beerenauslese", "beerenauslesen"),
        ("bel esprit", "beaux esprits"),
        ("bel homme", "beaux hommes"),
        ("bel-esprit", "beaux esprits"),
        ("belle epoque", "belle epoques"),
        ("bema", "bemas"),
        ("Bengalese", "Bengalese"),
        ("Bernese", "Bernese"),
        ("bersagliere", "bersaglieri"),
        ("bhikshu", "bhikshus"),
        ("Bhutanese", "Bhutanese"),
        ("bias", "biases"),
        ("bierstube", "bierstubes"),
        ("bifolium", "bifolia"),
        ("bijou", "bijoux"),
        ("bilbo", "bilboes"),
        ("bimbo", "bimbos"),
        ("bingo", "bingos"),
        ("Biro", "Biros"),
        ("biscotto", "biscotti"),
        ("bison", "bisons"),
        ("blastema", "blastemata"),
        ("blemya", "blemyae"),
        ("blin", "blinis"),
        ("blitz", "blitzes"),
        ("blouse", "blouses"),
        ("blue", "blues"),
        ("blues", "blues"),
        ("bodegon", "bodegones"),
        ("bolero", "boleros"),
        ("Bolognese", "Bolognese"),
        ("bolus", "boluses"),
        ("Bolzano", "Bolzanos"),
        ("bon mot", "bon mots"),
        ("bon vivant", "bon vivants"),
        ("bona fides", "bonis fidebus"),
        ("bongo", "bongos"),
        ("bordereau", "bordereaux"),
        ("Borghese", "Borghese"),
        ("Bostonese", "Bostonese"),
        ("Boto", "Botos"),
        ("bozzetto", "bozzetti"),
        ("braccio", "braccia"),
        ("brachiopod", "brachiopods"),
        ("branchiopod", "branchiopods"),
        ("bratwurst", "bratwursts"),
        ("bravo", "bravos"),
        ("break away", "break aways"),
        ("break-away", "break-aways"),
        ("breakaway", "breakaways"),
        ("bream", "bream"),
        ("breech", "breeches"),
        ("breeches", "breeches"),
        ("bregma", "bregmata"),
        ("brigadier general", "brigadier generals"),
        ("britches", "britches"),
        ("bronchitis", "bronchitises"),
        ("bronchus", "bronchi"),
        ("brother", "brothers"),
        ("brother german", "brothers german"),
        ("brother-german", "brothers-german"),
        ("bruschetta", "bruschette"),
        ("bubo", "buboes"),
        ("buffalo", "buffalos"),
        ("Buginese", "Buginese"),
        ("bulimus", "bulimi"),
        ("bulla", "bullae"),
        ("bureau", "bureaus"),
        ("Burman", "Burmans"),
        ("Burmese", "Burmese"),
        ("burro", "burros"),
        ("bursa", "bursae"),
        ("bursch", "burschen"),
        ("bursitis", "bursitises"),
        ("busto", "bustos"),
        ("buzz", "buzzes"),
        ("bylina", "bylinas"),
        ("cabaletta", "cabalettas"),
        ("cactus", "cactuses"),
        ("caddis", "caddises"),
        ("caduceus", "caducei"),
        ("caecum", "caeca"),
        ("caffe macchiato", "caffe macchiatos"),
        ("caffe ristretto", "caffe ristrettos"),
        ("caiman", "caimans"),
        ("Cairo", "Cairos"),
        ("Calabrese", "Calabrese"),
        ("calamistrum", "calamistra"),
        ("calathus", "calathi"),
        ("calix", "calices"),
        ("callus", "calluses"),
        ("calypso", "calypsos"),
        ("calzone", "calzones"),
        ("Camaldolese", "Camaldolese"),
        ("camera obscura", "camera obscuras"),
        ("canaliculus", "canaliculi"),
        ("candelabrum", "candelabra"),
        ("cannabis", "cannabises"),
        ("cantharus", "canthari"),
        ("canto", "cantos"),
        ("Cantonese", "Cantonese"),
        ("cantus", "cantuses"),
        ("canvas", "canvases"),
        ("canzonetta", "canzonettas"),
        ("capataz", "capataces"),
        ("capo", "capos"),
        ("cappuccino", "cappuccinos"),
        ("carabiniere", "carabinieri"),
        ("carcinoma", "carcinomas"),
        ("cardo", "cardines"),
        ("cardophagus", "cardophagi"),
        ("carex", "carices"),
        ("cargador", "cargadores"),
        ("caribou", "caribous"),
        ("Carlylese", "Carlylese"),
        ("carmen", "carmens"),
        ("carp", "carp"),
        ("carte de visite", "cartes de visite"),
        ("carte-de-visite", "cartes-de-visite"),
        ("caryatid", "caryatids"),
        ("caryopsis", "caryopsides"),
        ("casino", "casinos"),
        ("Cassinese", "Cassinese"),
        ("cassone", "cassones"),
        ("castrato", "castrati"),
        ("castrum", "castra"),
        ("casus belli", "casus belli"),
        ("cathisma", "cathismata"),
        ("caudex", "caudices"),
        ("caulis", "caules"),
        ("cavea", "caveae"),
        ("cayman", "caymans"),
        ("cecidium", "cecidia"),
        ("Celanese", "Celanese"),
        ("celia", "celiae"),
        ("cello", "cellos"),
        ("cementoma", "cementomata"),
        ("centesimo", "centesimi"),
        ("centumvir", "centumviri"),
        ("cercus", "cerci"),
        ("ceriman", "cerimans"),
        ("Ceylonese", "Ceylonese"),
        ("chaeta", "chaetae"),
        ("chaos", "chaoses"),
        ("chapeau", "chapeaux"),
        ("chapplis", "chapplies"),
        ("charisma", "charismas"),
        ("chassis", "chassis"),
        ("chateau", "chateaux"),
        ("cherub", "cherubs"),
        ("chervonetz", "chervontzi"),
        ("cheval", "chevaux"),
        ("cheval de bataille", "chevaux de bataille"),
        ("cheval-de-bataille", "chevaux-de-bataille"),
        ("Chicago", "Chicagos"),
        ("child", "children"),
        ("Chimango", "Chimangos"),
        ("Chinese", "Chinese"),
        ("chintz", "chintzes"),
        ("chitarrone", "chitarroni"),
        ("chlamydia", "chlamydias"),
        ("choana", "choanae"),
        ("chorda", "chordae"),
        ("chorus", "choruses"),
        ("chou", "choux"),
        ("chromidium", "chromidia"),
        ("chromonema", "chromonemata"),
        ("chrysalis", "chrysalises"),
        ("cicatrix", "cicatrices"),
        ("cilantro", "cilantros"),
        ("cimex", "cimices"),
        ("cinclis", "cinclides"),
        ("cistophorus", "cistophorori"),
        ("cladus", "cladi"),
        ("claustrum", "claustra"),
        ("clausula", "clausulae"),
        ("clavula", "clavulae"),
        ("cleithrum", "cleithra"),
        ("clepsydra", "clepsydras"),
        ("clipper", "clippers"),
        ("clippers", "clippers"),
        ("clitoris", "clitorises"),
        ("clostridium", "clostridia"),
        ("co", "coes"),
        ("coagulum", "coagula"),
        ("coccidium", "coccidia"),
        ("cochito", "cochitos"),
        ("coco", "cocos"),
        ("cod", "cod"),
        ("codex", "codices"),
        ("coe", "coes"),
        ("coelia", "coeliae"),
        ("cognoscente", "cognoscenti"),
        ("coitus", "coituses"),
        ("collegium", "collegia"),
        ("collegium musicum", "collegia musica"),
        ("Colombo", "Colombos"),
        ("Colorado", "Colorados"),
        ("columbarium", "columbaria"),
        ("columna", "columnae"),
        ("coma", "comae"),
        ("comatula", "comatulae"),
        ("commando", "commandos"),
        ("compendium", "compendiums"),
        ("competent", "competentes"),
        ("concertino", "concertinos"),
        ("concerto grosso", "concerti grossi"),
        ("concetto", "concetti"),
        ("condo", "condos"),
        ("condottiere", "condottieri"),
        ("conductus", "conducti"),
        ("coney", "coneys"),
        ("conferva", "confervae"),
        ("confluvium", "confluvia"),
        ("congius", "congii"),
        ("Congoese", "Congoese"),
        ("Congolese", "Congolese"),
        ("conidium", "conidia"),
        ("conoscente", "conoscenti"),
        ("consortium", "consortiums"),
        ("contadina", "contadine"),
        ("contadino", "contadini"),
        ("contagium", "contagia"),
        ("contango", "contangos"),
        ("contrafactum", "contrafacta"),
        ("contralto", "contraltos"),
        ("contretemps", "contretemps"),
        ("conversazione", "conversaziones"),
        ("convolvulus", "convolvuluses"),
        ("cony", "conys"),
        ("corgi", "corgis"),
        ("corgy", "corgys"),
        ("cornetto", "cornetti"),
        ("corno", "corni"),
        ("cornu", "cornua"),
        ("corona", "coronas"),
        ("corps", "corps"),
        ("corpus", "corpuses"),
        ("corpus vile", "corpora vilia"),
        ("corpusculum", "corpuscula"),
        ("corrigendum", "corrigenda"),
        ("cortex", "cortexes"),
        ("cosmos", "cosmoses"),
        ("costa", "costae"),
        ("coup d'etat", "coups d'etat"),
        ("court martial", "court-martials"),
        ("court-martial", "court-martials"),
        ("cow", "cows"),
        ("coxendix", "coxendices"),
        ("coz", "cozes"),
        ("craft", "craft"),
        ("crafts child", "crafts childer"),
        ("crafts-child", "crafts-childer"),
        ("cranium", "craniums"),
        ("craspedon", "craspeda"),
        ("craspedum", "craspeda"),
        ("crazia", "crazie"),
        ("credo", "credos"),
        ("cremaster", "cremasters"),
        ("crescendo", "crescendos"),
        ("cri de coeur", "cris de coeur"),
        ("crista", "cristae"),
        ("criterion", "criteria"),
        ("crowfoot", "crowfoots"),
        ("crus", "crura"),
        ("crusta", "crustae"),
        ("cubiculum", "cubicula"),
        ("cul de four", "culs de four"),
        ("cul de lampe", "culs de lampe"),
        ("cul de sac", "culs de sac"),
        ("cul-de-four", "culs-de-four"),
        ("cul-de-lampe", "culs-de-lampe"),
        ("cul-de-sac", "culs-de-sac"),
        ("cultellus", "cultelli"),
        ("cumulus", "cumuli"),
        ("cuniculus", "cuniculi"),
        ("curioso", "curiosos"),
        ("curriculum", "curriculums"),
        ("cuspis", "cuspides"),
        ("cyano", "cyanos"),
        ("cyathus", "cyathi"),
        ("cyclops", "cyclopses"),
        ("cynocephalus", "cynocephali"),
        ("cyphella", "cyphellae"),
        ("cysticercus", "cysticerci"),
        ("cystidium", "cystidia"),
        ("cystoma", "cystomata"),
        ("Czech", "Czechs"),
        ("dace", "daces"),
        ("dais", "daises"),
        ("datum", "data"),
        ("debris", "debris"),
        ("decennium", "decennia"),
        ("deer", "deer"),
        ("delirium", "deliriums"),
        ("demo", "demos"),
        ("denarius", "denarii"),
        ("denkmal", "denkmaler"),
        ("denotatum", "denotata"),
        ("dentalium", "dentalia"),
        ("depositum", "depositums"),
        ("descriptum", "descripta"),
        ("desideratum", "desiderata"),
        ("designatum", "designata"),
        ("desma", "desmas"),
        ("desman", "desmans"),
        ("devoto", "devotos"),
        ("diabetes", "diabetes"),
        ("diastema", "diastemata"),
        ("dichasium", "dichasia"),
        ("dictum", "dictums"),
        ("didymis", "didymes"),
        ("die", "dice"),
        ("differentia", "differentiae"),
        ("digitalis", "digitalises"),
        ("dilettante", "dilettantes"),
        ("diplococcus", "diplococci"),
        ("diploma", "diplomas"),
        ("diporpa", "diporpae"),
        ("dipsas", "dipsades"),
        ("directrix", "directrices"),
        ("ditto", "dittos"),
        ("diverticulum", "diverticula"),
        ("divertimento", "divertimentos"),
        ("djinn", "djinns"),
        ("do", "does"),
        ("doe", "does"),
        ("dogma", "dogmas"),
        ("dolman", "dolmans"),
        ("dolphinarium", "dolphinariums"),
        ("Dongolese", "Dongolese"),
        ("Draco", "Dracos"),
        ("dragoman", "dragomen"),
        ("drama", "dramas"),
        ("dreikanter", "dreikanters"),
        ("dumka", "dumkas"),
        ("duumvir", "duumvirs"),
        ("dynamo", "dynamos"),
        ("edema", "edemas"),
        ("editio princeps", "editiones principes"),
        ("efreet", "efreets"),
        ("eland", "elands"),
        ("elf", "elves"),
        ("elk", "elks"),
        ("ellipse", "ellipses"),
        ("ellipsis", "ellipses"),
        ("emblema", "emblememata"),
        ("embryo", "embryos"),
        ("embryoma", "embryomata"),
        ("emporium", "emporiums"),
        ("enconium", "enconiums"),
        ("endothelioma", "endotheliomata"),
        ("enema", "enemas"),
        ("enigma", "enigmas"),
        ("ens rationis", "entia rationis"),
        ("ens reale", "entia realia"),
        ("entente cordiale", "ententes cordiales"),
        ("enteron", "entera"),
        ("entrochus", "entrochi"),
        ("ephelis", "ephelides"),
        ("ephemera", "ephemeras"),
        ("ephemeris", "ephemerises"),
        ("epicardium", "epicardia"),
        ("epidermis", "epidermises"),
        ("epididymis", "epididymises"),
        ("epilimnion", "epilimnia"),
        ("epimeron", "epimera"),
        ("epiphenomenon", "epiphenomena"),
        ("epithelioma", "epitheliomata"),
        ("epyllion", "epyllia"),
        ("equinoctium", "equinoctiums"),
        ("equisetum", "equisetums"),
        ("erf", "erfs"),
        ("ergastulum", "ergastula"),
        ("eros", "eroses"),
        ("erratum", "errata"),
        ("espanol", "espanoles"),
        ("Esperanto", "Esperantos"),
        ("espresso", "espressos"),
        ("ethos", "ethoses"),
        ("eucalyptus", "eucalyptuses"),
        ("eunuch", "eunuchs"),
        ("euporiston", "euporista"),
        ("euro", "euros"),
        ("evirato", "evirati"),
        ("ex", "exes"),
        ("exanthema", "exanthemata"),
        ("exemplum", "exempla"),
        ("exencephalus", "exencephali"),
        ("explanandum", "explananda"),
        ("explicandum", "explicanda"),
        ("extispex", "extispices"),
        ("extremum", "extremums"),
        ("eyas", "eyases"),
        ("fabella", "fabellae"),
        ("fabliau", "fabliaux"),
        ("faciendum", "facienda"),
        ("faecula", "faeculae"),
        ("fait accompli", "faits accomplis"),
        ("falsetto", "falsettos"),
        ("falx", "falces"),
        ("familia", "familiae"),
        ("famulus", "famuli"),
        ("fanfoot", "fanfoots"),
        ("farman", "farmans"),
        ("Faro", "Faros"),
        ("Faroese", "Faroese"),
        ("fascia", "fascias"),
        ("fasciculus", "fasciculi"),
        ("fauna", "faunas"),
        ("favella", "favellae"),
        ("faveolus", "faveoli"),
        ("favissa", "favissae"),
        ("fecula", "feculae"),
        ("fedai", "fedais"),
        ("feis", "fess"),
        ("felo", "felones"),
        ("felo de se", "felos de se"),
        ("felo-de-se", "felos-de-se"),
        ("felsenmeer", "felsenmeere"),
        ("femur", "femurs"),
        ("fenestra", "fenestrae"),
        ("fermata", "fermatas"),
        ("Ferrarese", "Ferrarese"),
        ("fiasco", "fiascos"),
        ("fibra", "fibrae"),
        ("fibrilla", "fibrillae"),
        ("fibroma", "fibromata"),
        ("fibula", "fibulas"),
        ("fidei defensor", "fidei defensores"),
        ("figurante", "figurantes"),
        ("filaria", "filarias"),
        ("Filipino", "Filipinos"),
        ("finger end", "finger ends"),
        ("finger-end", "finger-ends"),
        ("fioritura", "fioriture"),
        ("fish", "fish"),
        ("fizz", "fizzes"),
        ("flabellum", "flabella"),
        ("flag staff", "flag staffs"),
        ("flag-staff", "flag-staffs"),
        ("flagellum", "flagella"),
        ("flamenco", "flamencos"),
        ("flatfoot", "flatfoots"),
        ("flatus", "flatuses"),
        ("flocculus", "flocculi"),
        ("floccus", "flocci"),
        ("flora", "floras"),
        ("flounder", "flounder"),
        ("fly", "flies"),
        ("focus", "focuses"),
        ("follis", "folles"),
        ("fomes", "fomites"),
        ("Foochowese", "Foochowese"),
        ("foot", "feet"),
        ("foramen", "foramens"),
        ("formula", "formulas"),
        ("forum", "forums"),
        ("fossa", "fossae"),
        ("fowl", "fowls"),
        ("fraenum", "fraena"),
        ("franc archer", "franc archers"),
        ("franc-archer", "franc-archers"),
        ("frate", "frati"),
        ("frenum", "frena"),
        ("fricandeau", "fricandeaux"),
        ("frizz", "frizzes"),
        ("fro", "froes"),
        ("froe", "froes"),
        ("frottola", "frottole"),
        ("frustulum", "frustula"),
        ("frustum", "frustums"),
        ("fucus", "fuci"),
        ("fulcrum", "fulcra"),
        ("funambulus", "funambuli"),
        ("fundamentum divisionis", "fundamenta divisionis"),
        ("fungo porcino", "funghi porchini"),
        ("fungus", "funguses"),
        ("furfur", "furfures"),
        ("furioso", "furiosos"),
        ("fuzz", "fuzzes"),
        ("Gabunese", "Gabunese"),
        ("Galla", "Gallas"),
        ("galla", "gallas"),
        ("gallows", "gallows"),
        ("gametangium", "gametangia"),
        ("ganglion", "ganglions"),
        ("gaon", "gaons"),
        ("gastrocnemius", "gastrocnemii"),
        ("geisha", "geishas"),
        ("geisteswissenschaft", "geisteswissenschaften"),
        ("gemma", "gemmae"),
        ("gena", "genae"),
        ("generalissimo", "generalissimos"),
        ("Genevese", "Genevese"),
        ("genie", "genies"),
        ("genius", "geniuses"),
        ("Genoese", "Genoese"),
        ("gens", "gentes"),
        ("genus", "genera"),
        ("German", "Germans"),
        ("germarium", "germaria"),
        ("Gestapo", "Gestapos"),
        ("ghetto", "ghettos"),
        ("gigolo", "gigolos"),
        ("Gilbertese", "Gilbertese"),
        ("giuncus", "giunchi"),
        ("gizmo", "gizmos"),
        ("glacis", "glacises"),
        ("gladiolus", "gladioluses"),
        ("glass", "glasses"),
        ("glasses", "glasses"),
        ("glioma", "gliomata"),
        ("gliosarcoma", "gliosarcomata"),
        ("glissando", "glissandos"),
        ("globigerina", "globigerinae"),
        ("glochidium", "glochidia"),
        ("glomus", "glomera"),
        ("glutaeus", "glutei"),
        ("gluteus", "glutei"),
        ("gmina", "gminy"),
        ("go", "goes"),
        ("Goanese", "Goanese"),
        ("gonangium", "gonangia"),
        ("gonidium", "gonidia"),
        ("gonimium", "gonimia"),
        ("goose", "geese"),
        ("gorgonia", "gorgonias"),
        ("gousblom", "gousblomme"),
        ("goy", "goys"),
        ("graben", "grabens"),
        ("graffiti", "graffiti"),
        ("graffito", "graffiti"),
        ("granita", "granite"),
        ("grano", "grani"),
        ("granula", "granulae"),
        ("gravamen", "gravamina"),
        ("Greensboro", "Greensboros"),
        ("gringo", "gringos"),
        ("grissino", "grissini"),
        ("grotto", "grottos"),
        ("grouse", "grouses"),
        ("Guaiabero", "Guaiaberos"),
        ("guano", "guanos"),
        ("guardia civil", "guardias civiles"),
        ("gubernaculum", "gubernacula"),
        ("guglio", "guglios"),
        ("Guianese", "Guianese"),
        ("gumbo", "gumbos"),
        ("gumma", "gummas"),
        ("guttus", "gutti"),
        ("guy", "guys"),
        ("gymnasium", "gymnasiums"),
        ("gymnotus", "gymnoti"),
        ("gyro", "gyros"),
        ("gyrus", "gyri"),
        ("haddock", "haddocks"),
        ("haemangioma", "haemangiomas"),
        ("haggis", "haggis"),
        ("Hainanese", "Hainanese"),
        ("hairdo", "hairdos"),
        ("hake", "hakes"),
        ("halibut", "halibuts"),
        ("hallux", "halluces"),
        ("halteridium", "halteridia"),
        ("hamadryad", "hamadrayads"),
        ("hamulus", "hamuli"),
        ("hapax legomenon", "hapax legomenons"),
        ("hapteron", "haptera"),
        ("Hararese", "Hararese"),
        ("Harlemese", "Harlemese"),
        ("harman", "harmans"),
        ("haruspex", "haruspices"),
        ("haustellum", "haustella"),
        ("haustorium", "haustoria"),
        ("haustrum", "haustra"),
        ("Havanese", "Havanese"),
        ("he", "they"),
        ("headquarters", "headquarters"),
        ("Heavenese", "Heavenese"),
        ("hedron", "hedrons"),
        ("heft", "hefte"),
        ("helion", "helions"),
        ("helix", "helices"),
        ("hemangeioma", "hemangeiomas"),
        ("hemangioma", "hemangiomas"),
        ("hemelytrum", "hemelytra"),
        ("hemera", "hemerae"),
        ("hemi elytrum", "hemi elytra"),
        ("hemi-elytrum", "hemi-elytra"),
        ("her", "them"),
        ("hernia", "hernias"),
        ("hero", "heroes"),
        ("heroon", "heroa"),
        ("heroum", "heroa"),
        ("herpes", "herpes"),
        ("herr", "herren"),
        ("herring", "herrings"),
        ("hers", "theirs"),
        ("herself", "themselves"),
        ("hertz", "hertz"),
        ("hetaera", "hetaerae"),
        ("hetaira", "hetaerae"),
        ("hetman", "hetmans"),
        ("hiatus", "hiatuses"),
        ("hijinks", "hijinks"),
        ("him", "them"),
        ("himself", "themselves"),
        ("hinaki", "hinaki"),
        ("hippo", "hippos"),
        ("hippocampus", "hippocampi"),
        ("hippopotamus", "hippopotamuses"),
        ("Hiroshiman", "Hiroshimans"),
        ("his", "theirs"),
        ("ho", "hoes"),
        ("hoe", "hoes"),
        ("holothuria", "holothurias"),
        ("honorarium", "honorariums"),
        ("hoof", "hoofs"),
        ("Hoosierese", "Hoosierese"),
        ("hordeolum", "hordeola"),
        ("hormogonium", "hormogonia"),
        ("hoti", "hoties"),
        ("Hottentotese", "Hottentotese"),
        ("hsien", "heen"),
        ("hubris", "hubrises"),
        ("human", "humans"),
        ("humerus", "humeri"),
        ("Hunanese", "Hunanese"),
        ("hydra", "hydras"),
        ("hydraulicon", "hydraulica"),
        ("hydria", "hydriae"),
        ("hymenium", "hymenia"),
        ("hymnarium", "hymnaria"),
        ("hyperbaton", "hyperbata"),
        ("hyperbola", "hyperbolas"),
        ("hypha", "hyphae"),
        ("hypnum", "hypnums"),
        ("hypoderma", "hypodermata"),
        ("hypolimnion", "hypolimnia"),
        ("I", "we"),
        ("ibis", "ibises"),
        ("ichthyosaurus", "ichthyosauri"),
        ("Idaho", "Idahos"),
        ("idee fixe", "idees fixes"),
        ("idolon", "idola"),
        ("idolum", "idola"),
        ("ignoramus", "ignoramuses"),
        ("ilium", "ilia"),
        ("imago", "imagos"),
        ("imbrex", "imbrices"),
        ("impetigo", "impetigos"),
        ("impetus", "impetuses"),
        ("improperium", "improperia"),
        ("improvisatrice", "improvisatrici"),
        ("incubus", "incubuses"),
        ("index", "indexes"),
        ("indicium", "indicia"),
        ("indigena", "indigenae"),
        ("individuum", "individuums"),
        ("Indochinese", "Indochinese"),
        ("indumentum", "indumenta"),
        ("indusium", "indusia"),
        ("inferno", "infernos"),
        ("infima species", "infimae species"),
        ("info", "infos"),
        ("inhalatorium", "inhalatoria"),
        ("innings", "innings"),
        ("inoculum", "inocula"),
        ("insula", "insulae"),
        ("intaglio", "intaglios"),
        ("interambulacrum", "interambulacra"),
        ("interaxis", "interaxes"),
        ("intercalarium", "intercalaria"),
        ("interleaf", "leaves"),
        ("intermaxilla", "intermaxillae"),
        ("intermedium", "intermedia"),
        ("intermezzo", "intermezzos"),
        ("internodium", "internodia"),
        ("interphenomenon", "interphenomena"),
        ("interradius", "interradii"),
        ("interregnum", "interregnums"),
        ("interrex", "interreges"),
        ("interstitium", "interstitiums"),
        ("intertrigo", "intertrigos"),
        ("intervallum", "intervallums"),
        ("intichiuma", "intichiuma"),
        ("inuk", "inuit"),
        ("inukshuk", "inukshuit"),
        ("involucrum", "involucra"),
        ("ipse dixit", "ipse dixits"),
        ("Iquico", "Iquicos"),
        ("iris", "irises"),
        ("ischium", "ischia"),
        ("isidium", "isidia"),
        ("ispravnik", "ispravniks"),
        ("isthmus", "isthmuses"),
        ("it", "they"),
        ("iter", "iters"),
        ("its", "theirs"),
        ("itself", "themselves"),
        ("ixodid", "ixodides"),
        ("jackanapes", "jackanapes"),
        ("jacobus", "jacobuses"),
        ("jalapeno", "jalapenos"),
        ("jambeau", "jambeaus"),
        ("Japanese", "Japanese"),
        ("Javanese", "Javanese"),
        ("jazz", "jazzes"),
        ("jerry", "jerries"),
        ("Jerry", "Jerrys"),
        ("jeu", "jeux"),
        ("jo", "joes"),
        ("joe", "joes"),
        ("Johnsonese", "Johnsonese"),
        ("judas", "judases"),
        ("judicatum", "judicata"),
        ("juelet", "iueles"),
        ("jugum", "juga"),
        ("jumbo", "jumbos"),
        ("junto", "juntos"),
        ("Kakapo", "Kakapos"),
        ("Kanarese", "Kanarese"),
        ("kantharos", "kantharoi"),
        ("kar", "kars"),
        ("karakia", "karakias"),
        ("karrenfeld", "karrenfelds"),
        ("kernos", "kernoi"),
        ("kibbutz", "kibbutzes"),
        ("kilo", "kilos"),
        ("kimono", "kimonos"),
        ("Kinkimavo", "Kinkimavos"),
        ("kioko", "kiokos"),
        ("Kiplingese", "Kiplingese"),
        ("kletterschuh", "kletterschuhe"),
        ("knife", "knives"),
        ("knopper", "knoppers"),
        ("kobo", "kobo"),
        ("Kokako", "Kokakos"),
        ("konditorei", "konditorei"),
        ("Kongoese", "Kongoese"),
        ("Kongolese", "Kongolese"),
        ("Kosovo", "Kosovos"),
        ("kouros", "kouroi"),
        ("kovsh", "kovshi"),
        ("kuvasz", "kuvaszok"),
        ("kylix", "kylixes"),
        ("labrum", "labra"),
        ("lacinia", "laciniae"),
        ("lactobacillus", "lactobacilli"),
        ("lacuna", "lacunas"),
        ("lacunar", "lacunars"),
        ("laika", "laiki"),
        ("lamella", "lamellae"),
        ("lamina", "laminae"),
        ("Lapith", "Lapiths"),
        ("lapith", "lapiths"),
        ("Lapponese", "Lapponese"),
        ("lar", "lars"),
        ("larnax", "larnakes"),
        ("larynx", "larynges"),
        ("latex", "latexes"),
        ("leaf", "leaves"),
        ("Lebanese", "Lebanese"),
        ("lebensform", "lebensformen"),
        ("legionella", "legionellae"),
        ("legomenon", "legomena"),
        ("legumen", "legumens"),
        ("leishmania", "leishmanias"),
        ("leman", "lemans"),
        ("lemma", "lemmas"),
        ("lemniscus", "lemnisci"),
        ("lemur", "lemurs"),
        ("lens", "lenses"),
        ("lentigo", "lentigines"),
        ("lentiscus", "lentisci"),
        ("Leonese", "Leonese"),
        ("leproma", "lepromas"),
        ("leprosarium", "leprosaria"),
        ("leptomonas", "leptomonas"),
        ("lepton", "lepta"),
        ("leptospira", "leptospirae"),
        ("Lesotho", "Lesothos"),
        ("leu", "lei"),
        ("lex humana", "leges humanae"),
        ("libero", "liberos"),
        ("libido", "libidos"),
        ("libretto", "librettos"),
        ("lido", "lidos"),
        ("lied", "lieder"),
        ("lieu", "lieus"),
        ("lieutenant general", "lieutenant generals"),
        ("life", "lives"),
        ("ligamentum", "ligamenta"),
        ("likuta", "makuta"),
        ("Lilo", "Lilos"),
        ("Liman", "Limans"),
        ("limax", "limaces"),
        ("limbo", "limbos"),
        ("limes", "limites"),
        ("limo", "limos"),
        ("limulus", "limuli"),
        ("linctus", "linctuses"),
        ("line out", "line outs"),
        ("line-out", "line-outs"),
        ("linea", "lineae"),
        ("lineno", "linenos"),
        ("lingo", "lingos"),
        ("lingula", "lingulae"),
        ("lino", "linos"),
        ("lipoma", "lipomata"),
        ("lis", "lisses"),
        ("listerella", "listerellas"),
        ("listeria", "listerias"),
        ("lithodomus", "lithodomi"),
        ("lithophyton", "lithophyta"),
        ("livedo", "livedos"),
        ("lixivium", "lixivia"),
        ("loa", "loas"),
        ("loaf", "loaves"),
        ("lobulus", "lobuli"),
        ("lochus", "lochi"),
        ("loco", "locos"),
        ("loculus", "loculi"),
        ("locus", "loci"),
        ("loggia", "loggias"),
        ("logion", "logia"),
        ("logo", "logos"),
        ("logodaedalus", "logodaedali"),
        ("loma", "lomata"),
        ("lomentum", "lomenta"),
        ("Londonese", "Londonese"),
        ("lord lieutenant", "lord lieutenants"),
        ("lord-lieutenant", "lord-lieutenants"),
        ("Lorrainese", "Lorrainese"),
        ("lorum", "lora"),
        ("louis", "louis"),
        ("louse", "lice"),
        ("lowlife", "lowlifes"),
        ("lox", "loxes"),
        ("Lucchese", "Lucchese"),
        ("lumbago", "lumbagos"),
        ("lumbricus", "lumbrici"),
        ("lumen", "lumens"),
        ("lustrum", "lustrums"),
        ("lux", "lux"),
        ("lymphangioma", "lymphangiomata"),
        ("lymphoma", "lymphomas"),
        ("Lyonese", "Lyonese"),
        ("lyssa", "lyssae"),
        ("maar", "maars"),
        ("macacus", "macaci"),
        ("Macanese", "Macanese"),
        ("macaroni", "macaronies"),
        ("Macassarese", "Macassarese"),
        ("macho", "machos"),
        ("mackerel", "mackerels"),
        ("macro", "macros"),
        ("macula", "maculas"),
        ("Madurese", "Madurese"),
        ("maecenas", "maecenases"),
        ("maestro", "maestros"),
        ("mafiosa", "mafiose"),
        ("mafioso", "mafiosi"),
        ("magilus", "magili"),
        ("magma", "magmas"),
        ("magneto", "magnetos"),
        ("magnifico", "magnificos"),
        ("magnum opus", "magnum opuses"),
        ("magus", "magi"),
        ("major general", "major generals"),
        ("Majuro", "Majuros"),
        ("Malabarese", "Malabarese"),
        ("Malabo", "Malabos"),
        ("malagma", "malagmata"),
        ("malleolus", "malleoli"),
        ("malleus", "mallei"),
        ("Maltese", "Maltese"),
        ("malum in se", "mala in se"),
        ("man", "men"),
        ("man child", "men children"),
        ("man midwife", "men midwives"),
        ("man milliner", "man milliners"),
        ("man servant", "men servants"),
        ("man-child", "men-children"),
        ("man-midwife", "men-midwives"),
        ("man-milliner", "man-milliners"),
        ("man-servant", "men-servants"),
        ("manchild", "menchildren"),
        ("mango", "mangos"),
        ("manifesto", "manifestos"),
        ("manservant", "menservants"),
        ("manteau", "manteaus"),
        ("mantelletta", "mantellette"),
        ("mantis", "mantises"),
        ("manubrium", "manubriums"),
        ("Maputo", "Maputos"),
        ("maquereau", "maquereaux"),
        ("Maracaibo", "Maracaibos"),
        ("mare", "mares"),
        ("maremma", "maremme"),
        ("marquis", "marquises"),
        ("mary", "maries"),
        ("Mary", "Marys"),
        ("mater lectionis", "matres lectionis"),
        ("math", "maths"),
        ("matin", "matins"),
        ("matinee musicale", "matinees musicales"),
        ("matzah", "matzahs"),
        ("mausoleum", "mausoleums"),
        ("maxilla", "maxillae"),
        ("maximum", "maximums"),
        ("me", "us"),
        ("measles", "measles"),
        ("meatus", "meatuses"),
        ("mediastinum", "mediastina"),
        ("mediatrix", "mediatrices"),
        ("medico", "medicos"),
        ("medium", "mediums"),
        ("medulloblastoma", "medulloblastomas"),
        ("medusa", "medusas"),
        ("megalosaurus", "megalosauri"),
        ("megatherium", "megatheria"),
        ("melanoma", "melanomas"),
        ("melastoma", "melastomas"),
        ("meliceris", "melicerides"),
        ("melisma", "melismas"),
        ("memento", "mementos"),
        ("memo", "memos"),
        ("memorandum", "memorandums"),
        ("menage a quatre", "menages a quatre"),
        ("menage a trois", "menages a trois"),
        ("meningioma", "meningiomas"),
        ("meniscus", "menisci"),
        ("menu", "menus"),
        ("meretrix", "meretrices"),
        ("meris", "merides"),
        ("meshumad", "meshumadim"),
        ("meshummad", "meshummadim"),
        ("mesothelioma", "mesotheliomas"),
        ("mesothelium", "mesothelia"),
        ("messa di voce", "messe di voce"),
        ("Messinese", "Messinese"),
        ("meta", "metae"),
        ("metalimnion", "metalimnia"),
        ("metapleuron", "metapleura"),
        ("metatarsus", "metatarsi"),
        ("metro", "metros"),
        ("metropolis", "metropolises"),
        ("mew", "mews"),
        ("mews", "mews"),
        ("Mexico", "Mexicos"),
        ("mezuza", "mezuzoth"),
        ("mezuzah", "mezuzoth"),
        ("mezzo rilievo", "mezzo rilievos"),
        ("mezzo-rilievo", "mezzo-rilievos"),
        ("miasma", "miasmas"),
        ("micro", "micros"),
        ("microbion", "microbia"),
        ("microcephalus", "microcephali"),
        ("micrococcus", "micrococci"),
        ("microfiche", "microfiches"),
        ("micronucleus", "micronuclei"),
        ("Milanese", "Milanese"),
        ("Milano", "Milanos"),
        ("miles gloriosus", "milites gloriosi"),
        ("milieu", "milieus"),
        ("milieu interieur", "milieux interieurs"),
        ("miliola", "miliolae"),
        ("millennium", "millenniums"),
        ("mimosa", "mimosas"),
        ("mine", "ours"),
        ("minimum", "minimums"),
        ("minnelied", "minnelieder"),
        ("minutia", "minutias"),
        ("minyan", "minyanim"),
        ("miracidium", "miracidia"),
        ("mithraeum", "mithraea"),
        ("mitochondrion", "mitochondria"),
        ("mixolimnion", "mixolimnia"),
        ("mo", "moes"),
        ("moaks", "moakses"),
        ("modelletto", "modelletti"),
        ("modello", "modellos"),
        ("Modenese", "Modenese"),
        ("modernus", "moderni"),
        ("modius", "modii"),
        ("modulus", "moduluses"),
        ("modus", "moduses"),
        ("moe", "moes"),
        ("molimen", "molimina"),
        ("momentum", "momentums"),
        ("Monaco", "Monacos"),
        ("monas", "monades"),
        ("mondo", "mondi"),
        ("money", "monies"),
        ("mongoose", "mongooses"),
        ("monimolimnion", "monimolimnia"),
        ("mono", "monos"),
        ("monochasium", "monochasia"),
        ("monorchis", "monorchides"),
        ("monosyllabon", "monosyllaba"),
        ("monota", "monotae"),
        ("monoxylon", "monoxyla"),
        ("mons", "montes"),
        ("monseigneur", "monsiegneurs"),
        ("monsignor", "monsignors"),
        ("monsignore", "monsignori"),
        ("monstre sacre", "monstres sacres"),
        ("Montenegro", "Montenegros"),
        ("moose", "moose"),
        ("moratorium", "moratoriums"),
        ("morceau", "morceaux"),
        ("Morocco", "Moroccos"),
        ("moroso", "morosi"),
        ("mortadella", "mortadellas"),
        ("mortarium", "mortaria"),
        ("moscardino", "moscardini"),
        ("motoscafo", "motoscafi"),
        ("motto", "mottos"),
        ("mouse", "mice"),
        ("mousetrap", "mousetraps"),
        ("mouth", "mouths"),
        ("mucro", "mucros"),
        ("mukim", "mukims"),
        ("multigravida", "multigravidas"),
        ("mumps", "mumps"),
        ("municipium", "municipia"),
        ("Muqdisho", "Muqdishos"),
        ("Muranese", "Muranese"),
        ("murex", "murexes"),
        ("musa", "musas"),
        ("musee imaginaire", "musees imaginaires"),
        ("musique concrete", "musiques concretes"),
        ("mustachio", "mustachios"),
        ("muzz", "muzzes"),
        ("mya", "myas"),
        ("mycoplasma", "mycoplasmas"),
        ("mycorhiza", "mycorhizas"),
        ("mycorrhiza", "mycorrhizas"),
        ("myeloma", "myelomas"),
        ("myo", "myos"),
        ("myself", "ourselves"),
        ("mythos", "mythoi"),
        ("myxoma", "myxomata"),
        ("nachtlokal", "nachtlokale"),
        ("nagaika", "nagaikas"),
        ("Nakayaman", "Nakayamans"),
        ("Nankingese", "Nankingese"),
        ("nasutus", "nasuti"),
        ("naumachia", "naumachias"),
        ("nauplius", "nauplii"),
        ("nautilus", "nautiluses"),
        ("Navarrese", "Navarrese"),
        ("naya paisa", "naye paise"),
        ("nebenkern", "nebenkerne"),
        ("nebula", "nebulas"),
        ("nectocalyx", "nectocalyces"),
        ("nemathecium", "nemathecia"),
        ("Nenets", "Nenets"),
        ("nenets", "nentsi"),
        ("Nepalese", "Nepalese"),
        ("nephridium", "nephridia"),
        ("nerita", "neritas"),
        ("neuma", "neumas"),
        ("neurinoma", "neurinomas"),
        ("neuroma", "neuromata"),
        ("neurula", "neurulae"),
        ("neutrino", "neutrinos"),
        ("news", "news"),
        ("nexus", "nexuses"),
        ("ngwee", "ngwee"),
        ("Niasese", "Niasese"),
        ("Nicobarese", "Nicobarese"),
        ("nidus", "niduses"),
        ("niello", "niellos"),
        ("nimbus", "nimbuses"),
        ("Ningbo", "Ningbos"),
        ("Nipponese", "Nipponese"),
        ("nockerl", "nockerln"),
        ("noctiluca", "noctilucae"),
        ("nodum", "noda"),
        ("nodus", "nodi"),
        ("noema", "noemata"),
        ("nomisma", "nomismata"),
        ("non ens", "nonentia"),
        ("non-ens", "nonentia"),
        ("Norman", "Normans"),
        ("noumenon", "noumena"),
        ("nouveau pauvre", "nouvelle pauvre"),
        ("nouveau riche", "nouvelle riche"),
        ("nouvel arrive", "nouveaux arrives"),
        ("nova", "novas"),
        ("novus homo", "novi homines"),
        ("noxa", "noxae"),
        ("nse", "nses"),
        ("nubecula", "nubeculae"),
        ("nucleolonema", "nucleolonemas"),
        ("nucleolus", "nucleoluses"),
        ("nucleus", "nuclei"),
        ("numen", "numina"),
        ("nuntius", "nuntii"),
        ("nympha", "nymphae"),
        ("nymphaeum", "nymphea"),
        ("nympheum", "nymphea"),
        ("oath", "oaths"),
        ("obelus", "obeli"),
        ("obolus", "oboli"),
        ("occiput", "occiputs"),
        ("oceanarium", "oceanaria"),
        ("ocellus", "ocelli"),
        ("octavo", "octavos"),
        ("octohedron", "octohedrons"),
        ("octopus", "octopuses"),
        ("oculus", "oculi"),
        ("odeum", "odea"),
        ("oedema", "oedemas"),
        ("offspring", "offspring"),
        ("ogle", "oglys"),
        ("Oklahoman", "Oklahomans"),
        ("olfactorium", "olfactoria"),
        ("omentum", "omenta"),
        ("ommatidium", "ommatidia"),
        ("onager", "onagers"),
        ("one", "some"),
        ("operculum", "opercula"),
        ("ophiophagus", "ophiophagi"),
        ("optimum", "optimums"),
        ("opus", "opuses"),
        ("opus magnum", "opera magna"),
        ("opusculum", "opuscula"),
        ("oratrix", "oratrices"),
        ("oregano", "oreganos"),
        ("organon", "organa"),
        ("Orinoco", "Orinocos"),
        ("Orlando", "Orlandos"),
        ("orthoceras", "orthocerata"),
        ("osculum", "oscula"),
        ("Oslo", "Oslos"),
        ("osmaterium", "osmateria"),
        ("osmeterium", "osmeteria"),
        ("ossiculum", "ossicula"),
        ("osteoclastoma", "osteoclastomas"),
        ("osteoma", "osteomata"),
        ("ostium", "ostia"),
        ("oto", "otos"),
        ("Otomi", "Otomies"),
        ("otomi", "otomies"),
        ("ottoman", "ottomans"),
        ("ovarium", "ovaria"),
        ("ovolo", "ovoli"),
        ("ovulum", "ovula"),
        ("ovum", "ova"),
        ("ox", "oxen"),
        ("oxybaphon", "oxybapha"),
        ("oxymoron", "oxymorons"),
        ("oxyuris", "oxyurides"),
        ("paha", "paha"),
        ("paisa", "paisas"),
        ("pajamas", "pajamas"),
        ("pala", "palae"),
        ("palea", "paleae"),
        ("pallium", "pallia"),
        ("palpebra", "palpebrae"),
        ("palpus", "palpi"),
        ("palus", "pali"),
        ("Panaman", "Panamans"),
        ("Pangasinan", "Pangasinans"),
        ("pangasinan", "pangasinans"),
        ("panino", "panini"),
        ("panorpa", "panorpae"),
        ("pant", "pants"),
        ("panto", "pantos"),
        ("pants", "pants"),
        ("paparrazo", "paparrazi"),
        ("papilla", "papillae"),
        ("papilloma", "papillomata"),
        ("papula", "papulae"),
        ("papyrus", "papyruses"),
        ("parabola", "parabolas"),
        ("parabolanus", "parabolani"),
        ("parador", "paradors"),
        ("paraganglioma", "paragangliomas"),
        ("paraganglion", "paraganglia"),
        ("paraglossa", "paraglossae"),
        ("Paramaribo", "Paramaribos"),
        ("paranucleus", "paranuclei"),
        ("parapleura", "parapleura"),
        ("parapleurum", "parapleura"),
        ("parapsis", "parapsides"),
        ("paraselene", "paraselenae"),
        ("parc ferme", "parcs fermes"),
        ("Pardusco", "Parduscos"),
        ("parenchyma", "parenchymata"),
        ("parergon", "parerga"),
        ("parhelion", "parhelions"),
        ("paries", "parietes"),
        ("parison", "parisa"),
        ("Parmese", "Parmese"),
        ("parnas", "parnassim"),
        ("parnass", "parnassim"),
        ("parvenu", "parvenus"),
        ("pasteurella", "pasteurellas"),
        ("pastorale", "pastorales"),
        ("patagium", "patagia"),
        ("patera", "paterae"),
        ("path", "paths"),
        ("pathos", "pathoses"),
        ("paxilla", "paxillae"),
        ("pecia", "pecias"),
        ("pecten", "pectens"),
        ("pectus", "pectora"),
        ("pedalo", "pedalos"),
        ("pedicellaria", "pedicellariae"),
        ("pediluvium", "pediluvia"),
        ("pedion", "pedia"),
        ("Pekingese", "Pekingese"),
        ("pelta", "peltae"),
        ("pelvis", "pelvises"),
        ("pence", "pence"),
        ("pendulum", "pendulums"),
        ("pengo", "pengo"),
        ("penicillus", "penicilli"),
        ("peninsula", "peninsulas"),
        ("penis", "penises"),
        ("penni", "pennia"),
        ("penny", "pennies"),
        ("pensiero", "pensieri"),
        ("perceptum", "percepta"),
        ("peridium", "peridia"),
        ("perikaryon", "perikarya"),
        ("perithecium", "perithecia"),
        ("pernio", "perniones"),
        ("peronium", "peronia"),
        ("perradius", "perradii"),
        ("person", "people"),
        ("persona", "personas"),
        ("pes", "pedes"),
        ("phalangium", "phalangia"),
        ("phalanx", "phalanxes"),
        ("phallos", "phalloi"),
        ("phallus", "phalluses"),
        ("pharmakos", "pharmakoi"),
        ("phenomenon", "phenomena"),
        ("phlegmasia", "phlegmasiae"),
        ("phoca", "phocas"),
        ("pholas", "pholades"),
        ("photo", "photos"),
        ("phototaxis", "phototaxes"),
        ("phragma", "phragmata"),
        ("phren", "phrenes"),
        ("phyle", "phylae"),
        ("phyllobranchia", "phyllobranchiae"),
        ("phylum", "phylums"),
        ("phyma", "phymata"),
        ("phyogemmarium", "phyogemmaria"),
        ("piano", "pianos"),
        ("pickerel", "pickerels"),
        ("pied a terre", "pieds a terre"),
        ("pied noir", "pieds noirs"),
        ("Piedmontese", "Piedmontese"),
        ("pietra", "pietre"),
        ("pifferaro", "pifferari"),
        ("pike", "pikes"),
        ("pileus", "pilei"),
        ("pillie", "pilleis"),
        ("pilus", "pili"),
        ("pimento", "pimentos"),
        ("pina colada", "pina coladas"),
        ("pinax", "pinaces"),
        ("pincer", "pincers"),
        ("pincers", "pincers"),
        ("pinetum", "pinetums"),
        ("pingo", "pingos"),
        ("pinna", "pinnas"),
        ("pinon", "pinons"),
        ("pinto", "pintos"),
        ("pipkrake", "pipkrakes"),
        ("piscina", "piscinas"),
        ("pistillidium", "pistillidia"),
        ("Pistoiese", "Pistoiese"),
        ("pithos", "pithoi"),
        ("pizza", "pizzas"),
        ("placebo", "placebos"),
        ("placitum", "placita"),
        ("planctus", "planctus"),
        ("plankter", "plankton"),
        ("planula", "planulae"),
        ("plasmalemma", "plasmalemmas"),
        ("plasmodium", "plasmodia"),
        ("plasmolyticum", "plasmolytica"),
        ("plasmoma", "plasmomata"),
        ("plateau", "plateaus"),
        ("platypus", "platypuses"),
        ("pleco", "plecos"),
        ("plectrum", "plectra"),
        ("plenarium", "plenaria"),
        ("plesiosaurus", "plesiosauri"),
        ("plethron", "plethra"),
        ("pleura", "pleura"),
        ("pleuron", "pleura"),
        ("pleurum", "pleura"),
        ("plexus", "plexuses"),
        ("plica", "plicae"),
        ("pliers", "pliers"),
        ("ploshchadka", "ploshchadki"),
        ("plurale tantum", "pluralia tantum"),
        ("pluteus", "plutei"),
        ("Pluto", "Plutos"),
        ("pneumothorax", "pneumothoraxes"),
        ("po", "poes"),
        ("poblador", "pobladores"),
        ("poculum", "pocula"),
        ("podere", "poderi"),
        ("podetium", "podetia"),
        ("podion", "podia"),
        ("podium", "podiums"),
        ("poe", "poes"),
        ("pogo", "pogos"),
        ("poise", "poises"),
        ("polis", "polises"),
        ("politbureau", "politbureaus"),
        ("politico", "politicos"),
        ("pollex", "pollices"),
        ("pollinarium", "pollinaria"),
        ("pollinium", "pollinia"),
        ("polo", "polos"),
        ("Polonese", "Polonese"),
        ("polythecium", "polythecia"),
        ("pomme de terre", "pommes de terre"),
        ("poncho", "ponchos"),
        ("pontifex", "pontifexes"),
        ("porcino", "porcini"),
        ("porion", "poria"),
        ("porron", "porrons"),
        ("port a beul", "puirt a beul"),
        ("port de bras", "ports de bras"),
        ("port-a-beul", "puirt-a-beul"),
        ("portico", "porticos"),
        ("portiforium", "portiforia"),
        ("portmanteau", "portmanteaus"),
        ("Porto", "Portos"),
        ("Porto Novo", "Porto Novos"),
        ("Porto-Novo", "Porto-Novos"),
        ("portrait parle", "portraits parles"),
        ("Portuguese", "Portuguese"),
        ("postnatus", "postnati"),
        ("postpubis", "postpubes"),
        ("postulatum", "postulata"),
        ("potato", "potatoes"),
        ("potestas", "potestates"),
        ("pox", "pox"),
        ("praecognitum", "praecognita"),
        ("pragma", "pragmas"),
        ("precis", "precis"),
        ("precognitum", "precognita"),
        ("premier danseur", "premiers danseurs"),
        ("prepenna", "prepennae"),
        ("prima ballerina", "prima ballerinas"),
        ("prima donna", "prima donnas"),
        ("primigravida", "primigravidae"),
        ("primordium", "primordia"),
        ("principium", "principia"),
        ("pro", "pros"),
        ("proavis", "proaves"),
        ("proboscis", "proboscises"),
        ("proceedings", "proceedings"),
        ("procoelia", "procoeliae"),
        ("prodromus", "prodromi"),
        ("proferens", "proferentes"),
        ("profluvium", "profluvia"),
        ("proglottis", "proglottides"),
        ("programma", "programmata"),
        ("progymnasium", "progymnasia"),
        ("progymnasma", "progymnasmata"),
        ("prokaryon", "prokarya"),
        ("prolabium", "prolabia"),
        ("prolegomenon", "prolegomena"),
        ("promerops", "promeropes"),
        ("propleuron", "propleura"),
        ("propodium", "propodia"),
        ("propositus", "propositi"),
        ("proprium", "propria"),
        ("propylaeum", "propylaea"),
        ("propylon", "propylons"),
        ("prora", "prorae"),
        ("prosa", "prosae"),
        ("proscenium", "proscenia"),
        ("proscolla", "proscollae"),
        ("prosecutrix", "prosecutrices"),
        ("prosencephalon", "prosencephala"),
        ("proseucha", "proseuchae"),
        ("prosodiencephalon", "prosodiencephala"),
        ("prosopium", "prosopia"),
        ("prospectus", "prospectuses"),
        ("prosula", "prosulae"),
        ("protarsus", "protarsi"),
        ("prothallium", "prothallia"),
        ("prothallus", "prothalli"),
        ("protococcus", "protococci"),
        ("protoma", "protomas"),
        ("protonema", "protonemata"),
        ("prototypon", "prototypons"),
        ("protypon", "protypa"),
        ("proviso", "provisos"),
        ("prytanis", "prytanes"),
        ("psammoma", "psammomata"),
        ("pseudopodium", "pseudopodia"),
        ("pseudostoma", "pseudostomata"),
        ("psycho", "psychos"),
        ("psydracium", "psydracia"),
        ("pteroma", "pteromata"),
        ("pteropus", "pteropi"),
        ("pteryla", "pterylae"),
        ("pueblo", "pueblos"),
        ("pul", "puls"),
        ("pullus", "pulli"),
        ("pulmonarium", "pulmonaria"),
        ("pulsellum", "pulsella"),
        ("pulveratrix", "pulveratrices"),
        ("punctum", "puncta"),
        ("punto blanco", "puntos blancos"),
        ("pupa", "pupae"),
        ("purlieu", "purlieus"),
        ("Purum", "Purums"),
        ("purum", "purums"),
        ("putto", "putti"),
        ("puttony", "puttonys"),
        ("pycnidium", "pycnidia"),
        ("pycnis", "pycnides"),
        ("pycnium", "pycnia"),
        ("pyjamas", "pyjamas"),
        ("pyla", "pylae"),
        ("pyralis", "pyralides"),
        ("pyramidion", "pyramidions"),
        ("pyrexia", "pyrexiae"),
        ("pyrites", "pyritae"),
        ("pyrophorus", "pyrophori"),
        ("pyxidium", "pyxidia"),
        ("quadratrix", "quadratrices"),
        ("quaesitum", "quaesita"),
        ("quantum", "quantums"),
        ("quarto", "quartos"),
        ("quartz", "quartzes"),
        ("quid", "quid"),
        ("quinarius", "quinarii"),
        ("quinquennium", "quinquennia"),
        ("Quito", "Quitos"),
        ("rabies", "rabies"),
        ("rad", "rads"),
        ("radiale", "radialia"),
        ("radius", "radiuses"),
        ("radix", "radixes"),
        ("ragazza", "ragazze"),
        ("ragazzo", "ragazzi"),
        ("raggare", "raggares"),
        ("ramulus", "ramuli"),
        ("ramus", "rami"),
        ("ranunculus", "ranunculuses"),
        ("rara avis", "rara avises"),
        ("razz", "razzes"),
        ("rectus", "recti"),
        ("redia", "rediae"),
        ("reductio", "reductiones"),
        ("referendum", "referendums"),
        ("refugium", "refugia"),
        ("regidor", "regidors"),
        ("regma", "regmata"),
        ("regulus", "reguli"),
        ("reich", "reiche"),
        ("rejon", "rejones"),
        ("rejoneador", "rejoneadores"),
        ("relatum", "relata"),
        ("rem", "rems"),
        ("remex", "remexes"),
        ("remous", "remous"),
        ("replum", "repla"),
        ("representamen", "representamens"),
        ("res", "res"),
        ("residuum", "residuums"),
        ("responsum", "responsa"),
        ("rete", "retia"),
        ("retinaculum", "retinacula"),
        ("retinula", "retinulae"),
        ("rezident", "rezidenty"),
        ("rezidentsia", "rezidentsii"),
        ("rhino", "rhinos"),
        ("rhinoceros", "rhinoceroses"),
        ("rhinophyma", "rhinophymas"),
        ("rhizoma", "rhizomas"),
        ("rhododendron", "rhododendrons"),
        ("rhombohedron", "rhombohedrons"),
        ("rhomboideus", "rhomboidei"),
        ("rhopalium", "rhopalia"),
        ("rhynchodaeum", "rhynchodaea"),
        ("rhythmus", "rhythmi"),
        ("ri", "ri"),
        ("ricercar", "ricercars"),
        ("ricercata", "ricercate"),
        ("ricordo", "ricordi"),
        ("rideau", "rideaus"),
        ("rilievo", "rilievos"),
        ("rimon", "rimonim"),
        ("rione", "rioni"),
        ("risotto", "risottos"),
        ("ritardando", "ritardandos"),
        ("rite de passage", "rites de passage"),
        ("rococo", "rococos"),
        ("roe", "roes"),
        ("Rom", "Roma"),
        ("rom", "roms"),
        ("Romagnese", "Romagnese"),
        ("Roman", "Romans"),
        ("Romanese", "Romanese"),
        ("Romany", "Romanies"),
        ("romanze", "romanzen"),
        ("rond de jambe", "rond de jambes"),
        ("rondeau", "rondeaus"),
        ("rondo", "rondos"),
        ("rostrum", "rostrums"),
        ("rotula", "rotulae"),
        ("route nationale", "routes nationales"),
        ("rubashka", "rubashkas"),
        ("ruga", "rugae"),
        ("ruse de guerre", "ruses de guerre"),
        ("rype", "ryper"),
        ("sabertooth", "sabertooths"),
        ("sacculus", "sacculi"),
        ("sacellum", "sacella"),
        ("sachverhalt", "sachverhalte"),
        ("Sacramento", "Sacramentos"),
        ("sacrarium", "sacraria"),
        ("sacrum", "sacrums"),
        ("saddo", "saddos"),
        ("saffo", "saffi"),
        ("sago", "sagos"),
        ("sagum", "saga"),
        ("salita", "salitas"),
        ("salivarium", "salivaria"),
        ("salmon", "salmon"),
        ("salpa", "salpas"),
        ("salvo", "salvos"),
        ("sambo", "sambos"),
        ("samurai", "samurai"),
        ("sanatorium", "sanatoriums"),
        ("sanctum sanctorum", "sancta sanctorum"),
        ("sandr", "sandrs"),
        ("Sangirese", "Sangirese"),
        ("Santiago", "Santiagos"),
        ("Sapporo", "Sapporos"),
        ("Sarajevo", "Sarajevos"),
        ("Sarawakese", "Sarawakese"),
        ("sarcina", "sarcinae"),
        ("sarcoma", "sarcomas"),
        ("sarcophagus", "sarcophagi"),
        ("sarissa", "sarissae"),
        ("sassafras", "sassafrases"),
        ("satelles", "satellites"),
        ("saxicava", "saxicavae"),
        ("sbirro", "sbirri"),
        ("scalenus", "scaleni"),
        ("scandalum magnatum", "scandala magnatum"),
        ("scapula", "scapulas"),
        ("scapus", "scapi"),
        ("scarabaeus", "scarabaei"),
        ("scarus", "scari"),
        ("scazon", "scazontes"),
        ("sceat", "sceattas"),
        ("schema", "schemas"),
        ("scherzando", "scherzandos"),
        ("scherzo", "scherzos"),
        ("schisma", "schismata"),
        ("schistosomulum", "schistosomula"),
        ("schizostylis", "schizostylis"),
        ("scholium", "scholia"),
        ("sciolus", "scioli"),
        ("scirrhus", "scirrhusses"),
        ("scissors", "scissors"),
        ("scolex", "scoleces"),
        ("scolopidium", "scolopidia"),
        ("scomber", "scombri"),
        ("scoria", "scorias"),
        ("scotoma", "scotomas"),
        ("scriptorium", "scriptoriums"),
        ("scudo", "scudi"),
        ("scungille", "scungilli"),
        ("scuola", "scuole"),
        ("scutellum", "scutella"),
        ("scutulum", "scutula"),
        ("scutum", "scuta"),
        ("scyphus", "scyphi"),
        ("seaquarium", "seaquaria"),
        ("secans", "secantes"),
        ("secretum", "secreta"),
        ("secundagravida", "secundagravidas"),
        ("secundigravida", "secundigravidas"),
        ("secundipara", "secundiparas"),
        ("sedes", "sedes"),
        ("sedile", "sedilia"),
        ("seecatch", "seecatchie"),
        ("seed", "seeds"),
        ("Selman", "Selmans"),
        ("sema", "semas"),
        ("seminium", "seminia"),
        ("semuncia", "semunciae"),
        ("senarius", "senarii"),
        ("Senegalese", "Senegalese"),
        ("senex", "senes"),
        ("sensedatum", "sensedata"),
        ("sensillum", "sensilla"),
        ("sensoriolum", "sensoriola"),
        ("sensum", "sensa"),
        ("sententia", "sententiae"),
        ("separatrix", "separatrices"),
        ("sephardi", "sephardim"),
        ("septarium", "septaria"),
        ("septemvir", "septemviri"),
        ("septenarius", "septenarii"),
        ("septum", "septa"),
        ("sequela", "sequelae"),
        ("sequestrum", "sequestra"),
        ("seraph", "seraphs"),
        ("sericterium", "sericteria"),
        ("series", "series"),
        ("serir", "serirs"),
        ("serpigo", "serpigoes"),
        ("serpula", "serpulae"),
        ("serra", "serrae"),
        ("sertularia", "sertularias"),
        ("serum", "serums"),
        ("sestertium", "sestertia"),
        ("sestiere", "sestieri"),
        ("set off", "set offs"),
        ("set out", "set outs"),
        ("set to", "set tos"),
        ("set-off", "set-offs"),
        ("set-out", "set-outs"),
        ("set-to", "set-tos"),
        ("seta", "setae"),
        ("sezession", "sezessionen"),
        ("sforzato", "sforzatos"),
        ("sgraffiato", "sgraffiati"),
        ("shad", "shads"),
        ("shaman", "shamans"),
        ("shauri", "shauris"),
        ("Shavese", "Shavese"),
        ("shawabti", "shawabtis"),
        ("Shawanese", "Shawanese"),
        ("she", "they"),
        ("shear", "shears"),
        ("shears", "shears"),
        ("sheep", "sheep"),
        ("shelf", "shelves"),
        ("shifta", "shiftas"),
        ("shochet", "shochetim"),
        ("shomer", "shomrim"),
        ("short", "shorts"),
        ("shorts", "shorts"),
        ("Siamese", "Siamese"),
        ("siemens", "siemens"),
        ("Sienese", "Sienese"),
        ("siglos", "sigli"),
        ("signum", "signa"),
        ("Sikkimese", "Sikkimese"),
        ("silbador", "silbadors"),
        ("silenus", "sileni"),
        ("silex", "silices"),
        ("siliqua", "siliquae"),
        ("silo", "silos"),
        ("Silurus", "Siluri"),
        ("simia", "simiae"),
        ("simplex", "simplexes"),
        ("simpulum", "simpula"),
        ("simulacrum", "simulacrums"),
        ("sinfonia", "sinfonias"),
        ("Singhalese", "Singhalese"),
        ("Sinhalese", "Sinhalese"),
        ("sinus", "sinuses"),
        ("siphunculus", "siphunculi"),
        ("sipunculus", "sipunculi"),
        ("sirocco", "siroccos"),
        ("sistrum", "sistrums"),
        ("situla", "situlas"),
        ("sizz", "sizzes"),
        ("ski", "skis"),
        ("snekkja", "snekkjur"),
        ("snipe", "snipes"),
        ("snooze", "snoozes"),
        ("so", "soes"),
        ("soe", "soes"),
        ("Sogdianese", "Sogdianese"),
        ("sol", "soles"),
        ("solarium", "solaria"),
        ("soldo", "soldi"),
        ("solenium", "solenia"),
        ("solfeggio", "solfeggios"),
        ("solidus", "solidi"),
        ("solo", "solos"),
        ("solstitium", "solstitia"),
        ("solvus", "solvi"),
        ("soma", "somas"),
        ("somaten", "somatenes"),
        ("sombrero", "sombreros"),
        ("Sonaman", "Sonamans"),
        ("soprano", "sopranos"),
        ("soralium", "soralia"),
        ("soredium", "soredia"),
        ("sorus", "sori"),
        ("soshi", "soshi"),
        ("sotch", "sotches"),
        ("souvlaki", "souvlakis"),
        ("spadix", "spadixes"),
        ("Spaetlese", "Spaetlesen"),
        ("sparus", "spari"),
        ("spasmus", "spasmi"),
        ("spatha", "spathae"),
        ("species", "species"),
        ("spectrum", "spectrums"),
        ("speculum", "speculums"),
        ("sperma", "spermata"),
        ("spermarium", "spermaria"),
        ("spermatheca", "spermathecae"),
        ("spermatium", "spermatia"),
        ("spermatoon", "spermatoa"),
        ("spermogonium", "spermogonia"),
        ("sphaeridium", "sphaeridia"),
        ("sphagnum", "sphagnums"),
        ("sphex", "spheges"),
        ("sphinx", "sphinxes"),
        ("spiculum", "spicula"),
        ("spiraculum", "spiracula"),
        ("spirillum", "spirilla"),
        ("spondylus", "spondyli"),
        ("sporodochium", "sporodochia"),
        ("sputum", "sputa"),
        ("squadra", "squadre"),
        ("squadrist", "squadrists"),
        ("squalus", "squali"),
        ("squama", "squamae"),
        ("squilla", "squillae"),
        ("stabilimentum", "stabilimenta"),
        ("staccato", "staccatos"),
        ("stadium", "stadiums"),
        ("stalactite", "stalactites"),
        ("stamen", "stamen"),
        ("staminidium", "staminidia"),
        ("staphylococcus", "staphylococci"),
        ("star fish", "star fishes"),
        ("star-fish", "star-fishes"),
        ("starets", "startsy"),
        ("staretz", "startzy"),
        ("starfish", "starfishes"),
        ("starosta", "starosti"),
        ("starover", "starovers"),
        ("stasimon", "stasimons"),
        ("statera", "staterae"),
        ("statua", "statuas"),
        ("status", "statuses"),
        ("stela", "stelas"),
        ("stella", "stellae"),
        ("stemma", "stemmata"),
        ("stephanion", "stephanions"),
        ("sterigma", "sterigmata"),
        ("sternebra", "sternebrae"),
        ("sterno", "sternos"),
        ("sternum", "sternums"),
        ("stichidium", "stichidia"),
        ("stichos", "stichoi"),
        ("stigma", "stigmas"),
        ("stigmaria", "stigmariae"),
        ("stiletto", "stilettoes"),
        ("stillicidium", "stillicidia"),
        ("stimulus", "stimuli"),
        ("stipes", "stipites"),
        ("stipula", "stipulas"),
        ("stirps", "stirpes"),
        ("stoa", "stoas"),
        ("stolo", "stolones"),
        ("stoma", "stomas"),
        ("stomach", "stomachs"),
        ("stomatium", "stomatia"),
        ("stomion", "stomia"),
        ("stomodaeum", "stomodea"),
        ("storey", "storeys"),
        ("stornello", "stornelli"),
        ("strambotto", "strambotti"),
        ("strategos", "strategoi"),
        ("strategus", "strategi"),
        ("stratum", "stratums"),
        ("streptococcus", "streptococci"),
        ("streptothrix", "streptothrices"),
        ("stria", "striae"),
        ("striatum", "striata"),
        ("striga", "strigae"),
        ("striola", "striolae"),
        ("strobila", "strobilae"),
        ("strobilus", "strobili"),
        ("stroma", "stromata"),
        ("stromodeum", "stromodea"),
        ("struma", "strumae"),
        ("stryddag", "stryddae"),
        ("stucco", "stuccos"),
        ("studium generale", "studia generali"),
        ("stylo", "stylos"),
        ("stylopodium", "stylopodia"),
        ("stylus", "styluses"),
        ("subbotnik", "subbotniks"),
        ("subsellium", "subsellia"),
        ("subsidium", "subsidia"),
        ("substratum", "substratums"),
        ("succinea", "succineas"),
        ("succubus", "succubuses"),
        ("succus", "succi"),
        ("Sudanese", "Sudanese"),
        ("suffrutex", "suffrutices"),
        ("suggestio falsi", "suggestiones falsi"),
        ("suggestum", "suggestums"),
        ("sulcus", "sulci"),
        ("sum total", "sum totals"),
        ("sum-total", "sum-totals"),
        ("summa", "summae"),
        ("summum bonum", "summa bona"),
        ("summum genus", "summa genera"),
        ("sumo", "sumos"),
        ("Sundanese", "Sundanese"),
        ("supercilium", "supercilia"),
        ("superficies", "superficies"),
        ("supernova", "supernovas"),
        ("superstratum", "superstrata"),
        ("suppositum", "supposita"),
        ("supracleithrum", "supracleithra"),
        ("suprascapula", "suprascapulae"),
        ("surculus", "surculi"),
        ("surimono", "surimonos"),
        ("sustentaculum", "sustentacula"),
        ("Swahilese", "Swahilese"),
        ("swine", "swine"),
        ("switchfoot", "switchfoots"),
        ("syllabarium", "syllabaria"),
        ("syllabus", "syllabuses"),
        ("symplasma", "symplasmata"),
        ("sympodium", "sympodia"),
        ("symposium", "symposiums"),
        ("synaesthesia", "synaesthesiae"),
        ("synangium", "synangia"),
        ("synapticula", "synapticulas"),
        ("synaxarion", "synaxaria"),
        ("synaxarium", "synaxaria"),
        ("synaxis", "synaxes"),
        ("syncellus", "syncelli"),
        ("syncytium", "syncytia"),
        ("syndendrium", "syndendria"),
        ("synechia", "synechiae"),
        ("synedrion", "synedria"),
        ("synedrium", "synedria"),
        ("synesthesia", "synesthesiae"),
        ("syntagma", "syntagmas"),
        ("syntaxis", "syntaxes"),
        ("synthronus", "synthroni"),
        ("synusia", "synusiae"),
        ("syphiloma", "syphilomata"),
        ("syringe", "syringes"),
        ("syrinx", "syrinxes"),
        ("syrphus", "syrphi"),
        ("syrtis", "syrtes"),
        ("tabella", "tabellae"),
        ("tableau", "tableaus"),
        ("tablinum", "tablina"),
        ("tabula", "tabulae"),
        ("Tacoman", "Tacomans"),
        ("taenia", "taenias"),
        ("tagma", "tagmata"),
        ("Taiko", "Taikos"),
        ("talea", "taleae"),
        ("talisman", "talismans"),
        ("talouse", "talouses"),
        ("talus", "tali"),
        ("tango", "tangos"),
        ("tarantata", "tarantate"),
        ("tarantato", "tarantati"),
        ("tarsus", "tarsi"),
        ("taxis", "taxes"),
        ("taxon", "taxa"),
        ("tazza", "tazze"),
        ("teal", "teals"),
        ("techno", "technos"),
        ("tegmen", "tegmina"),
        ("tegmentum", "tegmenta"),
        ("tegula", "tegulae"),
        ("telamon", "telamones"),
        ("telium", "telia"),
        ("temblor", "temblores"),
        ("tempietto", "tempietti"),
        ("tempo", "tempos"),
        ("tenaculum", "tenacula"),
        ("tenderfoot", "tenderfoots"),
        ("Tenggerese", "Tenggerese"),
        ("tenia", "tenias"),
        ("tenorino", "tenorini"),
        ("tentaculum", "tentacula"),
        ("tentamen", "tentamina"),
        ("tenuis", "tenues"),
        ("tepidarium", "tepidaria"),
        ("teratoma", "teratomata"),
        ("terebellum", "terebella"),
        ("terebratula", "terebratulas"),
        ("teredo", "teredos"),
        ("tergum", "terga"),
        ("termes", "termites"),
        ("terminus", "terminuses"),
        ("terp", "terps"),
        ("terrae filius", "terrae filii"),
        ("terramara", "terremare"),
        ("terrarium", "terrariums"),
        ("terrazzo", "terrazzos"),
        ("territorium", "territoria"),
        ("terzetto", "terzetti"),
        ("tessella", "tessellas"),
        ("tessera", "tesserae"),
        ("testes", "testes"),
        ("testis", "testes"),
        ("testudo", "testudos"),
        ("tetanothrum", "tetanothra"),
        ("tete a tete", "tete a tetes"),
        ("tete-a-tete", "tete-a-tetes"),
        ("tetracolon", "tetracola"),
        ("tetragrammaton", "tetragrammata"),
        ("tetrahedron", "tetrahedrons"),
        ("tetrapleuron", "tetrapleurons"),
        ("tetrasporangium", "tetrasporangia"),
        ("thalamos", "thalamoi"),
        ("thalamus", "thalami"),
        ("thanatorium", "thanatoria"),
        ("that", "those"),
        ("thaumaturgus", "thaumaturgi"),
        ("thebe", "thebe"),
        ("theca", "thecae"),
        ("theirs", "theirs"),
        ("thelycum", "thelyca"),
        ("them", "them"),
        ("thema", "themata"),
        ("themself", "themselves"),
        ("themselves", "themselves"),
        ("theologoumenon", "theologoumena"),
        ("thesaurus", "thesauruses"),
        ("they", "they"),
        ("thief", "thieves"),
        ("this", "these"),
        ("tholos", "tholoi"),
        ("tholus", "tholi"),
        ("thorax", "thoraxes"),
        ("thos", "thoes"),
        ("thraso", "thrasoes"),
        ("thymiaterion", "thymiateria"),
        ("thymus", "thymi"),
        ("thyridium", "thyridia"),
        ("thyrsus", "thyrsi"),
        ("tibia", "tibiae"),
        ("Timorese", "Timorese"),
        ("timpano", "timpanos"),
        ("tintinnabulum", "tintinnabula"),
        ("tipula", "tipulae"),
        ("tiro", "tiros"),
        ("Tirolese", "Tirolese"),
        ("to", "toes"),
        ("tobacco", "tobaccos"),
        ("Tocharese", "Tocharese"),
        ("toe", "toes"),
        ("Togo", "Togos"),
        ("Tokyo", "Tokyos"),
        ("tolkach", "tolkachi"),
        ("tomato", "tomatoes"),
        ("tombarolo", "tombaroli"),
        ("tomium", "tomia"),
        ("tondo", "tondi"),
        ("tong", "tongs"),
        ("tongs", "tongs"),
        ("Tonkinese", "Tonkinese"),
        ("tonneau", "tonneaus"),
        ("tooth", "teeth"),
        ("topaz", "topazes"),
        ("topos", "topoi"),
        ("torero", "toreros"),
        ("toril", "toriles"),
        ("Torinese", "Torinese"),
        ("Torino", "Torinos"),
        ("torma", "tormas"),
        ("Tornese", "Tornesi"),
        ("tornus", "torni"),
        ("Toronto", "Torontos"),
        ("torso", "torsos"),
        ("tortilla espanola", "tortillas espanolas"),
        ("tortrix", "tortrices"),
        ("torula", "torulae"),
        ("torulus", "toruli"),
        ("torus", "toruses"),
        ("tour de force", "tours de force"),
        ("toxicum", "toxica"),
        ("toxius", "toxii"),
        ("toxoplasma", "toxoplasmata"),
        ("trabea", "trabeae"),
        ("trabecula", "trabeculae"),
        ("trachea", "tracheae"),
        ("tractatrix", "tractatrices"),
        ("tractellum", "tractella"),
        ("tractrix", "tractrices"),
        ("tragus", "tragi"),
        ("trapezium", "trapeziums"),
        ("trapezius", "trapezii"),
        ("trapezohedron", "trapezohedrons"),
        ("trattoria", "trattorias"),
        ("trauma", "traumas"),
        ("trellis", "trellises"),
        ("tremolo", "tremolos"),
        ("treponema", "treponemata"),
        ("trichidium", "trichidia"),
        ("trichina", "trichine"),
        ("trichoma", "trichomata"),
        ("triclinium", "triclinia"),
        ("triens", "trientes"),
        ("triforium", "triforia"),
        ("trilby", "trilbys"),
        ("triplum", "tripla"),
        ("triradius", "triradii"),
        ("triumvir", "triumvirs"),
        ("trochus", "trochuses"),
        ("trockenbeerenauslese", "trockenbeerenauslesen"),
        ("tropaeolum", "tropaeolums"),
        ("troparion", "troparia"),
        ("tropis", "tropides"),
        ("trousers", "trousers"),
        ("trousseau", "trousseaus"),
        ("trout", "trout"),
        ("trullo", "trulli"),
        ("trumeau", "trumeaux"),
        ("tsuba", "tsubas"),
        ("tsubo", "tsubos"),
        ("tuber", "tuberes"),
        ("tuberculoma", "tuberculomas"),
        ("tuberculum", "tubercula"),
        ("tubulus", "tubuli"),
        ("tumulus", "tumuli"),
        ("tuna", "tuna"),
        ("turbot", "turbots"),
        ("turf", "turfs"),
        ("turron", "turrons"),
        ("tympanum", "tympana"),
        ("typo", "typos"),
        ("tyro", "tyros"),
        ("Tyrolese", "Tyrolese"),
        ("udarnik", "udarniki"),
        ("ulpan", "ulpanim"),
        ("ultimatum", "ultimatums"),
        ("umbilicus", "umbilicuses"),
        ("umbo", "umbos"),
        ("umbra", "umbras"),
        ("umwelt", "umwelten"),
        ("uncia", "unciae"),
        ("uncinus", "uncini"),
        ("uncus", "unci"),
        ("unguis", "ungues"),
        ("unio", "unios"),
        ("uomo", "uomini"),
        ("uomo universale", "uomini universali"),
        ("uraeus", "uraei"),
        ("uredinium", "uredinia"),
        ("uredium", "uredia"),
        ("uredosorus", "uredosori"),
        ("urodaeum", "urodaea"),
        ("urodeum", "urodea"),
        ("urus", "uruses"),
        ("usnea", "usneas"),
        ("ustilago", "ustilagines"),
        ("uterus", "uteruses"),
        ("utricularia", "utriculariae"),
        ("uva", "uvae"),
        ("vaalpens", "vaalpens"),
        ("vacuum", "vacuums"),
        ("vagina", "vaginas"),
        ("vaginula", "vaginulae"),
        ("vagus", "vagi"),
        ("vallecula", "valleculae"),
        ("valuta", "valute"),
        ("valvula", "valvulae"),
        ("vaporetto", "vaporettos"),
        ("vaquero", "vaqueros"),
        ("varella", "varellaes"),
        ("varia lectio", "variae lectiones"),
        ("varix", "varices"),
        ("vas", "vasa"),
        ("vasculitis", "vasculitises"),
        ("vasculum", "vasculums"),
        ("veduta", "vedutas"),
        ("veg", "veges"),
        ("vehiculum", "vehicula"),
        ("velamen", "velamina"),
        ("velarium", "velaria"),
        ("velum", "velums"),
        ("vena", "venae"),
        ("venus", "venuses"),
        ("vermicello", "vermicellos"),
        ("vermiculus", "vermiculi"),
        ("Vermontese", "Vermontese"),
        ("Veronese", "Veronese"),
        ("verruca", "verrucae"),
        ("vers libre", "vers libres"),
        ("versiculus", "versiculi"),
        ("verso", "versos"),
        ("vertebra", "vertebrae"),
        ("vertex", "vertexes"),
        ("verticillus", "verticilli"),
        ("vesicula", "vesiculae"),
        ("vestigium", "vestigia"),
        ("vetturino", "vetturini"),
        ("viale", "viali"),
        ("viaticum", "viatica"),
        ("vibex", "vibices"),
        ("vibraculum", "vibracula"),
        ("vibrato", "vibratos"),
        ("vibrio", "vibrios"),
        ("Viennese", "Viennese"),
        ("Vietnamese", "Vietnamese"),
        ("vila", "vilas"),
        ("villanella", "villanelle"),
        ("villino", "villini"),
        ("villus", "villi"),
        ("vinculum", "vincula"),
        ("violetta", "violette"),
        ("violoncello", "violoncellos"),
        ("virga", "virgae"),
        ("Virgo", "Virgos"),
        ("virtuoso", "virtuosos"),
        ("virus", "viruses"),
        ("vis", "vires"),
        ("viscus", "viscera"),
        ("vitellarium", "vitellaria"),
        ("vitta", "vittae"),
        ("vivarium", "vivariums"),
        ("vlakte", "vlaktes"),
        ("voeu", "voeux"),
        ("volcanello", "volcanelli"),
        ("volcano", "volcanos"),
        ("vomica", "vomicas"),
        ("vomitorium", "vomitoriums"),
        ("voorbok", "voorbokke"),
        ("vorspiel", "vorspiele"),
        ("vorstellung", "vorstellungen"),
        ("vortex", "vortexes"),
        ("wadi", "wadies"),
        ("wady", "wadies"),
        ("waldo", "waldos"),
        ("waltz", "waltzes"),
        ("wanderjahr", "wanderjahre"),
        ("wandervogel", "wandervogel"),
        ("washer up", "washers up"),
        ("washer-up", "washers-up"),
        ("weirdo", "weirdos"),
        ("Wenchowese", "Wenchowese"),
        ("wharf", "wharfs"),
        ("what", "what"),
        ("whatever", "whatever"),
        ("whatsoever", "whatsoever"),
        ("white staff", "white staves"),
        ("whiting", "whiting"),
        ("Whitmanese", "Whitmanese"),
        ("who", "who"),
        ("whoever", "whoever"),
        ("whom", "whom"),
        ("whomever", "whomever"),
        ("whomsoever", "whomsoever"),
        ("whose", "whose"),
        ("whosesoever", "whosesoever"),
        ("whosever", "whosever"),
        ("whosoever", "whosoever"),
        ("wife", "wives"),
        ("wildebeest", "wildebeests"),
        ("wolf", "wolves"),
        ("woman child", "women children"),
        ("woman servant", "women servants"),
        ("woman-child", "women-children"),
        ("woman-servant", "women-servants"),
        ("womanchild", "womenchildren"),
        ("wreath", "wreaths"),
        ("xanthoma", "xanthomas"),
        ("xiphiplastron", "xiphiplastra"),
        ("xiphopagus", "xiphopagi"),
        ("xiphoplastron", "xiphoplastra"),
        ("xoanon", "xoana"),
        ("xystus", "xysti"),
        ("Yakiman", "Yakimans"),
        ("Yamoussoukro", "Yamoussoukros"),
        ("yarraman", "yarramen"),
        ("Yengeese", "Yengeese"),
        ("yes", "yeses"),
        ("yo", "yoes"),
        ("yo yo", "yo yos"),
        ("yo-yo", "yo-yos"),
        ("yoe", "yoes"),
        ("Yokohaman", "Yokohamans"),
        ("you", "you"),
        ("yours", "yours"),
        ("yourself", "yourselves"),
        ("Yuman", "Yumans"),
        ("Yunnanese", "Yunnanese"),
        ("yuo", "yuon"),
        ("zadruga", "zadrugas"),
        ("zeitgeber", "zeitgebers"),
        ("zemirah", "zemiroth"),
        ("zeppole", "zeppoli"),
        ("zero", "zeros"),
        ("Zibo", "Zibos"),
        ("zingano", "zingani"),
        ("zita", "ziti"),
        ("zitella", "zitelle"),
        ("zizz", "zizzes"),
        ("zloty", "zlotys"),
        ("zoaea", "zoaeae"),
        ("zoarium", "zoaria"),
        ("zoea", "zoeas"),
        ("zooea", "zooeae"),
        ("zooecium", "zooecia"),
        ("zoon", "zoa"),
        ("zoophorus", "zoophori"),
        ("zoosporangium", "zoosporangia"),
        ("zophorus", "zophori"),
        ("zucca", "zucche"),
        ("zucchini", "zucchinis"),
        ("zuppa", "zuppe"),
        ("zuz", "zuzzes"),
        ("zygantrum", "zygantra"),
        ("zygoma", "zygomas"),
        ("zygon", "zyga"),
    ]
    .iter()
    .cloned()
    .collect()
});

// It would be nice to store the replacements in this variable too, but I
// cannot figure out how to do that. The natural way to do this is to store
// pairs of `(regex::Regex, regex::Replacer)`, where the replacer is either a
// string like `"${1}foo"` or a `fn` that takes a `regex::Captures` and
// returns a new string. But the `Replacer` trait cannot be used with `Box<dyn
// Replacer>`. And if I try to make my own `Replacer` enum, the function
// variant needs to be a type like `Box<dyn FnMut(&regex::Captures) ->
// String>`. But the `Captures` type is not `Sync`, so it can't be used with
// `Lazy`!
static SINGULAR_RECOGNIZERS: Lazy<Vec<Recognizer>> = Lazy::new(|| {
    vec![
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)stave$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 0
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)staff$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 1
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)genus$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 2
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)person$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 3
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)hertz$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 4
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)lux$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 5
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)siemens$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 6
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)brother$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 7
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)child$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 8
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)cow$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 9
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.+)-ox$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 10
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)mensch$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 11
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)elf$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 12
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)hoof$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 13
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)knife$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 14
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)leaf$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 15
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)life$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 16
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)loaf$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 17
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)shelf$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 18
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)thief$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 19
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)wife$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 20
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)wolf$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 21
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)human$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 22
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)foot$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 23
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)goose$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 24
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)louse$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 25
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)man$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 26
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)mouse$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 27
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)tooth$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 28
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)buzz$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 29
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)fizz$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 30
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)frizz$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 31
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)fuzz$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 32
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)jazz$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 33
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)proboscis$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 34
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)bema$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 35
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)drama$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 36
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)edema$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 37
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)lemma$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 38
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)sarcoma$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 39
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)stoma$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 40
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)nova$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 41
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)umbra$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 42
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)lumen$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 43
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)datum$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 44
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)stratum$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 45
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)bacillus$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 46
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)nucleus$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 47
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)hedron$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 48
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)helion$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 49
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)legomenon$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 50
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)phenomenon$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 51
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)helix$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 52
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)measles$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 53
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)pox$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 54
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)bass$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 55
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)deer$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 56
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)fish$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 57
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)fowl$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 58
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)sheep$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 59
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)wildebeest$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 60
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)craft$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 61
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)gas$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 62
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)glottis$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 63
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.+)star general$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 64
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*?)(?:-general)$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: Some(1),
        }, // 65
        Recognizer {
            regex: Regex::new(&format!(
                r#"(?i)\A({preposition_re})(?: it)$"#,
                preposition_re = PREPOSITION_REGEX_STR
            ))
            .unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 66
        Recognizer {
            regex: Regex::new(r#"(?i)\A(?:son-of-a-)(.*?)$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: Some(1),
        }, // 67
        Recognizer {
            regex: Regex::new(r#"(?i)\A(?:son of a )(.*?)$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: Some(1),
        }, // 68
        Recognizer {
            regex: Regex::new(&format!(
                r#"(?i)\A(.*?)(?:-)({preposition_re})(?:-)(.*?)$"#,
                preposition_re = PREPOSITION_REGEX_STR
            ))
            .unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: Some(1),
        }, // 69
        Recognizer {
            regex: Regex::new(&format!(
                r#"(?i)\A(.*?)(?: )({preposition_re})(?: )(.*?)$"#,
                preposition_re = PREPOSITION_REGEX_STR
            ))
            .unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: Some(1),
        }, // 70
        Recognizer {
            regex: Regex::new(&format!(
                r#"(?i)\A({preposition_re})(?:-)(.*?)$"#,
                preposition_re = PREPOSITION_REGEX_STR
            ))
            .unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: Some(2),
        }, // 71
        Recognizer {
            regex: Regex::new(&format!(
                r#"(?i)\A({preposition_re})(?: )(.*?)$"#,
                preposition_re = PREPOSITION_REGEX_STR
            ))
            .unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: Some(2),
        }, // 72
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*?)(?:-errant)$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: Some(1),
        }, // 73
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*?)(?: errant)$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: Some(1),
        }, // 74
        Recognizer {
            regex: Regex::new(&format!(
                r#"(?i)\A(.*?)(?:-)({preposition_re})$"#,
                preposition_re = PREPOSITION_REGEX_STR
            ))
            .unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: Some(1),
        }, // 75
        Recognizer {
            regex: Regex::new(&format!(
                r#"(?i)\A(.*?)(?: )({preposition_re})$"#,
                preposition_re = PREPOSITION_REGEX_STR
            ))
            .unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: Some(1),
        }, // 76
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.+[aeiou])o$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 77
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.+[aeo])lf$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 78
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.+[aiy])nx$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 79
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.+)arf$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 80
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.+)ceps$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 81
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.+[cs])h$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 82
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.+)eaf$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 83
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.+)eau$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 84
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.+)ieu$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 85
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.+)nife$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 86
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.+)oe$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 87
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.+)o$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 88
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.+)quy$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 89
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.+[aeiou])y$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 90
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.+)ss$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 91
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.+)orse$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 92
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.+[au])rse$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 93
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.+)nse$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 94
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.+[^ns])sis$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 95
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.+)trix$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 96
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.+)us$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 97
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.+)x$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 98
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.+)y$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 99
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.+)z$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 100
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.+)zoon$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 101
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.+)s$"#).unwrap(),
            is_nonindicative: true,
            recursive_capture_idx: None,
        }, // 102
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.+)$"#).unwrap(),
            is_nonindicative: true,
            recursive_capture_idx: None,
        }, // 103
    ]
});

/// Converts a noun to its modern plural form. Whenever possible, this
/// function returns static data or a reference to the string it was given,
/// rather than allocating a new `String`.
///
/// The case of the returned word will not necessarily match the case of the
/// original word, and when given shout case like "BUSINESSPERSON" you may get
/// odd casing results like "BUSINESSpeople". You are encouraged to always
/// pass words in their poroper case, either lower case or title case as
/// appropriate.
pub fn convert_to_modern_plural(word: &str) -> Cow<'_, str> {
    #[cfg(feature = "debug")]
    println!("convert_to_modern_plural({})", word);

    if word.is_empty() {
        #[cfg(feature = "debug")]
        println!("  word is empty");
        return Cow::Borrowed("");
    }

    if let Some(p) = MODERN_PLURAL_OF.get(word) {
        #[cfg(feature = "debug")]
        println!("  found word '{}' in MODERN_PLURAL_OF", word);
        return Cow::Borrowed(p);
    }
    if let Some(p) = MODERN_PLURAL_OF.get(word.to_lowercase().as_str()) {
        #[cfg(feature = "debug")]
        println!("  found lc word '{}' in MODERN_PLURAL_OF", word);
        return Cow::Borrowed(p);
    }
    if word.len() > 1 {
        let tc_word = to_titlecase(word);
        if let Some(p) = MODERN_PLURAL_OF.get(tc_word.as_str()) {
            #[cfg(feature = "debug")]
            println!("  found tc word '{}' in MODERN_PLURAL_OF", word);
            return Cow::Borrowed(p);
        }
    }

    if is_plural(word) && !is_singular(word) {
        #[cfg(feature = "debug")]
        println!("  word '{}' is already plural and is not singular", word);
        return Cow::Borrowed(word);
    }

    if PLURAL_POSSESSIVE_REGEX.is_match(word) {
        #[cfg(feature = "debug")]
        println!("  word '{}' matches plural possessive regex", word);
        return crate::adjective::Adjective::new(word).plural();
    }

    // (?i)\A(.*)stave$
    if let Some(caps) = SINGULAR_RECOGNIZERS[0].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}staves"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 0) and became {}"#,
            word, SINGULAR_RECOGNIZERS[0].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)staff$
    if let Some(caps) = SINGULAR_RECOGNIZERS[1].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}staffs"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 1) and became {}"#,
            word, SINGULAR_RECOGNIZERS[1].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)genus$
    if let Some(caps) = SINGULAR_RECOGNIZERS[2].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}genera"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 2) and became {}"#,
            word, SINGULAR_RECOGNIZERS[2].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)person$
    if let Some(caps) = SINGULAR_RECOGNIZERS[3].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}people"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 3) and became {}"#,
            word, SINGULAR_RECOGNIZERS[3].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)hertz$
    if let Some(caps) = SINGULAR_RECOGNIZERS[4].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}hertz"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 4) and became {}"#,
            word, SINGULAR_RECOGNIZERS[4].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)lux$
    if let Some(caps) = SINGULAR_RECOGNIZERS[5].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}lux"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 5) and became {}"#,
            word, SINGULAR_RECOGNIZERS[5].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)siemens$
    if let Some(caps) = SINGULAR_RECOGNIZERS[6].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}siemens"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 6) and became {}"#,
            word, SINGULAR_RECOGNIZERS[6].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)brother$
    if let Some(caps) = SINGULAR_RECOGNIZERS[7].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}brothers"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 7) and became {}"#,
            word, SINGULAR_RECOGNIZERS[7].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)child$
    if let Some(caps) = SINGULAR_RECOGNIZERS[8].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}children"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 8) and became {}"#,
            word, SINGULAR_RECOGNIZERS[8].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)cow$
    if let Some(caps) = SINGULAR_RECOGNIZERS[9].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}cows"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 9) and became {}"#,
            word, SINGULAR_RECOGNIZERS[9].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)-ox$
    if let Some(caps) = SINGULAR_RECOGNIZERS[10].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}-oxen"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 10) and became {}"#,
            word, SINGULAR_RECOGNIZERS[10].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)mensch$
    if let Some(caps) = SINGULAR_RECOGNIZERS[11].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}menschen"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 11) and became {}"#,
            word, SINGULAR_RECOGNIZERS[11].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)elf$
    if let Some(caps) = SINGULAR_RECOGNIZERS[12].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}elves"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 12) and became {}"#,
            word, SINGULAR_RECOGNIZERS[12].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)hoof$
    if let Some(caps) = SINGULAR_RECOGNIZERS[13].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}hoofs"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 13) and became {}"#,
            word, SINGULAR_RECOGNIZERS[13].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)knife$
    if let Some(caps) = SINGULAR_RECOGNIZERS[14].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}knives"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 14) and became {}"#,
            word, SINGULAR_RECOGNIZERS[14].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)leaf$
    if let Some(caps) = SINGULAR_RECOGNIZERS[15].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}leaves"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 15) and became {}"#,
            word, SINGULAR_RECOGNIZERS[15].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)life$
    if let Some(caps) = SINGULAR_RECOGNIZERS[16].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}lives"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 16) and became {}"#,
            word, SINGULAR_RECOGNIZERS[16].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)loaf$
    if let Some(caps) = SINGULAR_RECOGNIZERS[17].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}loaves"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 17) and became {}"#,
            word, SINGULAR_RECOGNIZERS[17].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)shelf$
    if let Some(caps) = SINGULAR_RECOGNIZERS[18].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}shelves"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 18) and became {}"#,
            word, SINGULAR_RECOGNIZERS[18].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)thief$
    if let Some(caps) = SINGULAR_RECOGNIZERS[19].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}thieves"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 19) and became {}"#,
            word, SINGULAR_RECOGNIZERS[19].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)wife$
    if let Some(caps) = SINGULAR_RECOGNIZERS[20].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}wives"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 20) and became {}"#,
            word, SINGULAR_RECOGNIZERS[20].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)wolf$
    if let Some(caps) = SINGULAR_RECOGNIZERS[21].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}wolves"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 21) and became {}"#,
            word, SINGULAR_RECOGNIZERS[21].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)human$
    if let Some(caps) = SINGULAR_RECOGNIZERS[22].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}humans"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 22) and became {}"#,
            word, SINGULAR_RECOGNIZERS[22].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)foot$
    if let Some(caps) = SINGULAR_RECOGNIZERS[23].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}feet"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 23) and became {}"#,
            word, SINGULAR_RECOGNIZERS[23].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)goose$
    if let Some(caps) = SINGULAR_RECOGNIZERS[24].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}geese"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 24) and became {}"#,
            word, SINGULAR_RECOGNIZERS[24].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)louse$
    if let Some(caps) = SINGULAR_RECOGNIZERS[25].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}lice"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 25) and became {}"#,
            word, SINGULAR_RECOGNIZERS[25].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)man$
    if let Some(caps) = SINGULAR_RECOGNIZERS[26].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}men"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 26) and became {}"#,
            word, SINGULAR_RECOGNIZERS[26].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)mouse$
    if let Some(caps) = SINGULAR_RECOGNIZERS[27].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}mice"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 27) and became {}"#,
            word, SINGULAR_RECOGNIZERS[27].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)tooth$
    if let Some(caps) = SINGULAR_RECOGNIZERS[28].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}teeth"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 28) and became {}"#,
            word, SINGULAR_RECOGNIZERS[28].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)buzz$
    if let Some(caps) = SINGULAR_RECOGNIZERS[29].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}buzzes"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 29) and became {}"#,
            word, SINGULAR_RECOGNIZERS[29].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)fizz$
    if let Some(caps) = SINGULAR_RECOGNIZERS[30].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}fizzes"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 30) and became {}"#,
            word, SINGULAR_RECOGNIZERS[30].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)frizz$
    if let Some(caps) = SINGULAR_RECOGNIZERS[31].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}frizzes"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 31) and became {}"#,
            word, SINGULAR_RECOGNIZERS[31].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)fuzz$
    if let Some(caps) = SINGULAR_RECOGNIZERS[32].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}fuzzes"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 32) and became {}"#,
            word, SINGULAR_RECOGNIZERS[32].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)jazz$
    if let Some(caps) = SINGULAR_RECOGNIZERS[33].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}jazzes"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 33) and became {}"#,
            word, SINGULAR_RECOGNIZERS[33].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)proboscis$
    if let Some(caps) = SINGULAR_RECOGNIZERS[34].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}proboscises"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 34) and became {}"#,
            word, SINGULAR_RECOGNIZERS[34].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)bema$
    if let Some(caps) = SINGULAR_RECOGNIZERS[35].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}bemas"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 35) and became {}"#,
            word, SINGULAR_RECOGNIZERS[35].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)drama$
    if let Some(caps) = SINGULAR_RECOGNIZERS[36].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}dramas"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 36) and became {}"#,
            word, SINGULAR_RECOGNIZERS[36].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)edema$
    if let Some(caps) = SINGULAR_RECOGNIZERS[37].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}edemas"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 37) and became {}"#,
            word, SINGULAR_RECOGNIZERS[37].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)lemma$
    if let Some(caps) = SINGULAR_RECOGNIZERS[38].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}lemmas"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 38) and became {}"#,
            word, SINGULAR_RECOGNIZERS[38].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)sarcoma$
    if let Some(caps) = SINGULAR_RECOGNIZERS[39].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}sarcomas"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 39) and became {}"#,
            word, SINGULAR_RECOGNIZERS[39].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)stoma$
    if let Some(caps) = SINGULAR_RECOGNIZERS[40].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}stomas"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 40) and became {}"#,
            word, SINGULAR_RECOGNIZERS[40].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)nova$
    if let Some(caps) = SINGULAR_RECOGNIZERS[41].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}novas"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 41) and became {}"#,
            word, SINGULAR_RECOGNIZERS[41].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)umbra$
    if let Some(caps) = SINGULAR_RECOGNIZERS[42].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}umbras"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 42) and became {}"#,
            word, SINGULAR_RECOGNIZERS[42].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)lumen$
    if let Some(caps) = SINGULAR_RECOGNIZERS[43].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}lumens"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 43) and became {}"#,
            word, SINGULAR_RECOGNIZERS[43].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)datum$
    if let Some(caps) = SINGULAR_RECOGNIZERS[44].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}data"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 44) and became {}"#,
            word, SINGULAR_RECOGNIZERS[44].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)stratum$
    if let Some(caps) = SINGULAR_RECOGNIZERS[45].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}stratums"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 45) and became {}"#,
            word, SINGULAR_RECOGNIZERS[45].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)bacillus$
    if let Some(caps) = SINGULAR_RECOGNIZERS[46].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}bacilli"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 46) and became {}"#,
            word, SINGULAR_RECOGNIZERS[46].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)nucleus$
    if let Some(caps) = SINGULAR_RECOGNIZERS[47].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}nuclei"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 47) and became {}"#,
            word, SINGULAR_RECOGNIZERS[47].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)hedron$
    if let Some(caps) = SINGULAR_RECOGNIZERS[48].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}hedrons"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 48) and became {}"#,
            word, SINGULAR_RECOGNIZERS[48].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)helion$
    if let Some(caps) = SINGULAR_RECOGNIZERS[49].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}helions"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 49) and became {}"#,
            word, SINGULAR_RECOGNIZERS[49].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)legomenon$
    if let Some(caps) = SINGULAR_RECOGNIZERS[50].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}legomena"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 50) and became {}"#,
            word, SINGULAR_RECOGNIZERS[50].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)phenomenon$
    if let Some(caps) = SINGULAR_RECOGNIZERS[51].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}phenomena"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 51) and became {}"#,
            word, SINGULAR_RECOGNIZERS[51].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)helix$
    if let Some(caps) = SINGULAR_RECOGNIZERS[52].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}helices"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 52) and became {}"#,
            word, SINGULAR_RECOGNIZERS[52].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)measles$
    if let Some(caps) = SINGULAR_RECOGNIZERS[53].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}measles"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 53) and became {}"#,
            word, SINGULAR_RECOGNIZERS[53].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)pox$
    if let Some(caps) = SINGULAR_RECOGNIZERS[54].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}pox"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 54) and became {}"#,
            word, SINGULAR_RECOGNIZERS[54].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)bass$
    if let Some(caps) = SINGULAR_RECOGNIZERS[55].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}basses"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 55) and became {}"#,
            word, SINGULAR_RECOGNIZERS[55].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)deer$
    if let Some(caps) = SINGULAR_RECOGNIZERS[56].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}deer"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 56) and became {}"#,
            word, SINGULAR_RECOGNIZERS[56].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)fish$
    if let Some(caps) = SINGULAR_RECOGNIZERS[57].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}fish"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 57) and became {}"#,
            word, SINGULAR_RECOGNIZERS[57].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)fowl$
    if let Some(caps) = SINGULAR_RECOGNIZERS[58].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}fowls"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 58) and became {}"#,
            word, SINGULAR_RECOGNIZERS[58].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)sheep$
    if let Some(caps) = SINGULAR_RECOGNIZERS[59].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}sheep"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 59) and became {}"#,
            word, SINGULAR_RECOGNIZERS[59].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)wildebeest$
    if let Some(caps) = SINGULAR_RECOGNIZERS[60].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}wildebeests"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 60) and became {}"#,
            word, SINGULAR_RECOGNIZERS[60].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)craft$
    if let Some(caps) = SINGULAR_RECOGNIZERS[61].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}craft"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 61) and became {}"#,
            word, SINGULAR_RECOGNIZERS[61].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)gas$
    if let Some(caps) = SINGULAR_RECOGNIZERS[62].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}gases"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 62) and became {}"#,
            word, SINGULAR_RECOGNIZERS[62].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)glottis$
    if let Some(caps) = SINGULAR_RECOGNIZERS[63].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}glottises"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 63) and became {}"#,
            word, SINGULAR_RECOGNIZERS[63].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)star general$
    if let Some(caps) = SINGULAR_RECOGNIZERS[64].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}star generals"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 64) and became {}"#,
            word, SINGULAR_RECOGNIZERS[64].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*?)(?:-general)$
    if let Some(caps) = SINGULAR_RECOGNIZERS[65].regex.captures(word) {
        let cap1 = caps.get(1).unwrap().as_str();
        let plural = if is_singular(cap1) {
            convert_to_modern_plural(cap1).to_string()
        } else {
            cap1.to_string()
        };
        let mut new_word = String::new();
        new_word.push_str(&plural);
        new_word.push_str("-general");
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched recursive pattern '(SING)-general' and became {}"#,
            word, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A({preposition_re})(?: it)$
    if let Some(caps) = SINGULAR_RECOGNIZERS[66].regex.captures(word) {
        let cap1 = caps.get(1).unwrap().as_str();
        let mut new_word = String::new();
        new_word.push_str(cap1);
        new_word.push_str(" them");
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched recursive pattern '(PREP) it' and became {}"#,
            word, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(?:son-of-a-)(.*?)$
    if let Some(caps) = SINGULAR_RECOGNIZERS[67].regex.captures(word) {
        let cap1 = caps.get(1).unwrap().as_str();
        let plural = if is_singular(cap1) {
            convert_to_modern_plural(cap1).to_string()
        } else {
            cap1.to_string()
        };
        let mut new_word = String::new();
        new_word.push_str("sons-of-");
        new_word.push_str(&plural);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched recursive pattern 'son-of-a-(SING)' and became {}"#,
            word, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(?:son of a )(.*?)$
    if let Some(caps) = SINGULAR_RECOGNIZERS[68].regex.captures(word) {
        let cap1 = caps.get(1).unwrap().as_str();
        let plural = if is_singular(cap1) {
            convert_to_modern_plural(cap1).to_string()
        } else {
            cap1.to_string()
        };
        let mut new_word = String::new();
        new_word.push_str("sons of ");
        new_word.push_str(&plural);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched recursive pattern 'son of a (SING)' and became {}"#,
            word, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*?)(?:-)({preposition_re})(?:-)(.*?)$
    if let Some(caps) = SINGULAR_RECOGNIZERS[69].regex.captures(word) {
        let cap1 = caps.get(1).unwrap().as_str();
        let plural = if is_singular(cap1) {
            convert_to_modern_plural(cap1).to_string()
        } else {
            cap1.to_string()
        };
        let cap2 = caps.get(2).unwrap().as_str();
        let cap3 = caps.get(3).unwrap().as_str();
        let mut new_word = String::new();
        new_word.push_str(&plural);
        new_word.push('-');
        new_word.push_str(cap2);
        new_word.push('-');
        new_word.push_str(cap3);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched recursive pattern '(SING)-(PREP)-*' and became {}"#,
            word, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*?)(?: )({preposition_re})(?: )(.*?)$
    if let Some(caps) = SINGULAR_RECOGNIZERS[70].regex.captures(word) {
        let cap1 = caps.get(1).unwrap().as_str();
        let plural = if is_singular(cap1) {
            convert_to_modern_plural(cap1).to_string()
        } else {
            cap1.to_string()
        };
        let cap2 = caps.get(2).unwrap().as_str();
        let cap3 = caps.get(3).unwrap().as_str();
        let mut new_word = String::new();
        new_word.push_str(&plural);
        new_word.push(' ');
        new_word.push_str(cap2);
        new_word.push(' ');
        new_word.push_str(cap3);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched recursive pattern '(SING) (PREP) *' and became {}"#,
            word, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A({preposition_re})(?:-)(.*?)$
    if let Some(caps) = SINGULAR_RECOGNIZERS[71].regex.captures(word) {
        let cap1 = caps.get(1).unwrap().as_str();
        let cap2 = caps.get(2).unwrap().as_str();
        let plural = if is_singular(cap2) {
            convert_to_modern_plural(cap2).to_string()
        } else {
            cap2.to_string()
        };
        let mut new_word = String::new();
        new_word.push_str(cap1);
        new_word.push('-');
        new_word.push_str(&plural);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched recursive pattern '(PREP)-(SING)' and became {}"#,
            word, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A({preposition_re})(?: )(.*?)$
    if let Some(caps) = SINGULAR_RECOGNIZERS[72].regex.captures(word) {
        let cap1 = caps.get(1).unwrap().as_str();
        let cap2 = caps.get(2).unwrap().as_str();
        let plural = if is_singular(cap2) {
            convert_to_modern_plural(cap2).to_string()
        } else {
            cap2.to_string()
        };
        let mut new_word = String::new();
        new_word.push_str(cap1);
        new_word.push(' ');
        new_word.push_str(&plural);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched recursive pattern '(PREP) (SING)' and became {}"#,
            word, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*?)(?:-errant)$
    if let Some(caps) = SINGULAR_RECOGNIZERS[73].regex.captures(word) {
        let cap1 = caps.get(1).unwrap().as_str();
        let plural = if is_singular(cap1) {
            convert_to_modern_plural(cap1).to_string()
        } else {
            cap1.to_string()
        };
        let mut new_word = String::new();
        new_word.push_str(&plural);
        new_word.push_str("-errant");
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched recursive pattern '(SING)-errant' and became {}"#,
            word, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*?)(?: errant)$
    if let Some(caps) = SINGULAR_RECOGNIZERS[74].regex.captures(word) {
        let cap1 = caps.get(1).unwrap().as_str();
        let plural = if is_singular(cap1) {
            convert_to_modern_plural(cap1).to_string()
        } else {
            cap1.to_string()
        };
        let mut new_word = String::new();
        new_word.push_str(&plural);
        new_word.push_str(" errant");
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched recursive pattern '(SING) errant' and became {}"#,
            word, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*?)(?:-)({preposition_re})$
    if let Some(caps) = SINGULAR_RECOGNIZERS[75].regex.captures(word) {
        let cap1 = caps.get(1).unwrap().as_str();
        let plural = if is_singular(cap1) {
            convert_to_modern_plural(cap1).to_string()
        } else {
            cap1.to_string()
        };
        let cap2 = caps.get(2).unwrap().as_str();
        let mut new_word = String::new();
        new_word.push_str(&plural);
        new_word.push('-');
        new_word.push_str(cap2);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched recursive pattern '(SING)-(PREP)' and became {}"#,
            word, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*?)(?: )({preposition_re})$
    if let Some(caps) = SINGULAR_RECOGNIZERS[76].regex.captures(word) {
        let cap1 = caps.get(1).unwrap().as_str();
        let plural = if is_singular(cap1) {
            convert_to_modern_plural(cap1).to_string()
        } else {
            cap1.to_string()
        };
        let cap2 = caps.get(2).unwrap().as_str();
        let mut new_word = String::new();
        new_word.push_str(&plural);
        new_word.push(' ');
        new_word.push_str(cap2);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched recursive pattern '(SING) (PREP)' and became {}"#,
            word, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+[aeiou])o$
    if let Some(caps) = SINGULAR_RECOGNIZERS[77].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}os"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 77) and became {}"#,
            word, SINGULAR_RECOGNIZERS[77].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+[aeo])lf$
    if let Some(caps) = SINGULAR_RECOGNIZERS[78].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}lves"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 78) and became {}"#,
            word, SINGULAR_RECOGNIZERS[78].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+[aiy])nx$
    if let Some(caps) = SINGULAR_RECOGNIZERS[79].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}nxes"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 79) and became {}"#,
            word, SINGULAR_RECOGNIZERS[79].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)arf$
    if let Some(caps) = SINGULAR_RECOGNIZERS[80].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}arves"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 80) and became {}"#,
            word, SINGULAR_RECOGNIZERS[80].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)ceps$
    if let Some(caps) = SINGULAR_RECOGNIZERS[81].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ceps"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 81) and became {}"#,
            word, SINGULAR_RECOGNIZERS[81].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+[cs])h$
    if let Some(caps) = SINGULAR_RECOGNIZERS[82].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}hes"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 82) and became {}"#,
            word, SINGULAR_RECOGNIZERS[82].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)eaf$
    if let Some(caps) = SINGULAR_RECOGNIZERS[83].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}eaves"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 83) and became {}"#,
            word, SINGULAR_RECOGNIZERS[83].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)eau$
    if let Some(caps) = SINGULAR_RECOGNIZERS[84].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}eaus"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 84) and became {}"#,
            word, SINGULAR_RECOGNIZERS[84].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)ieu$
    if let Some(caps) = SINGULAR_RECOGNIZERS[85].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ieus"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 85) and became {}"#,
            word, SINGULAR_RECOGNIZERS[85].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)nife$
    if let Some(caps) = SINGULAR_RECOGNIZERS[86].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}nives"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 86) and became {}"#,
            word, SINGULAR_RECOGNIZERS[86].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)oe$
    if let Some(caps) = SINGULAR_RECOGNIZERS[87].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}oes"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 87) and became {}"#,
            word, SINGULAR_RECOGNIZERS[87].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)o$
    if let Some(caps) = SINGULAR_RECOGNIZERS[88].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}oes"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 88) and became {}"#,
            word, SINGULAR_RECOGNIZERS[88].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)quy$
    if let Some(caps) = SINGULAR_RECOGNIZERS[89].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}quies"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 89) and became {}"#,
            word, SINGULAR_RECOGNIZERS[89].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+[aeiou])y$
    if let Some(caps) = SINGULAR_RECOGNIZERS[90].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ys"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 90) and became {}"#,
            word, SINGULAR_RECOGNIZERS[90].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)ss$
    if let Some(caps) = SINGULAR_RECOGNIZERS[91].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}sses"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 91) and became {}"#,
            word, SINGULAR_RECOGNIZERS[91].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)orse$
    if let Some(caps) = SINGULAR_RECOGNIZERS[92].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}orses"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 92) and became {}"#,
            word, SINGULAR_RECOGNIZERS[92].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+[au])rse$
    if let Some(caps) = SINGULAR_RECOGNIZERS[93].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}rses"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 93) and became {}"#,
            word, SINGULAR_RECOGNIZERS[93].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)nse$
    if let Some(caps) = SINGULAR_RECOGNIZERS[94].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}nses"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 94) and became {}"#,
            word, SINGULAR_RECOGNIZERS[94].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+[^ns])sis$
    if let Some(caps) = SINGULAR_RECOGNIZERS[95].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ses"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 95) and became {}"#,
            word, SINGULAR_RECOGNIZERS[95].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)trix$
    if let Some(caps) = SINGULAR_RECOGNIZERS[96].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}trixes"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 96) and became {}"#,
            word, SINGULAR_RECOGNIZERS[96].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)us$
    if let Some(caps) = SINGULAR_RECOGNIZERS[97].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}uses"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 97) and became {}"#,
            word, SINGULAR_RECOGNIZERS[97].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)x$
    if let Some(caps) = SINGULAR_RECOGNIZERS[98].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}xes"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 98) and became {}"#,
            word, SINGULAR_RECOGNIZERS[98].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)y$
    if let Some(caps) = SINGULAR_RECOGNIZERS[99].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ies"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 99) and became {}"#,
            word, SINGULAR_RECOGNIZERS[99].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)z$
    if let Some(caps) = SINGULAR_RECOGNIZERS[100].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}zzes"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 100) and became {}"#,
            word, SINGULAR_RECOGNIZERS[100].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)zoon$
    if let Some(caps) = SINGULAR_RECOGNIZERS[101].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}zoa"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 101) and became {}"#,
            word, SINGULAR_RECOGNIZERS[101].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)s$
    if let Some(caps) = SINGULAR_RECOGNIZERS[102].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ses"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 102) and became {}"#,
            word, SINGULAR_RECOGNIZERS[102].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)$
    if let Some(caps) = SINGULAR_RECOGNIZERS[103].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}s"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 103) and became {}"#,
            word, SINGULAR_RECOGNIZERS[103].regex, new_word
        );
        return Cow::Owned(new_word);
    }

    #[cfg(feature = "debug")]
    println!("  appending 's' to word '{}' ", word);
    Cow::Owned(add_plural_s(word))
}

static CLASSICAL_PLURAL_OF: Lazy<HashMap<&'static str, &'static str>> = Lazy::new(|| {
    [
        (" ox", " oxen"),
        ("-ox", "-oxen"),
        ("[^ns]sis", "[^ns]ses"),
        ("[aeo]lf", "[aeo]lves"),
        ("abacus", "abacuses"),
        ("aboiteau", "aboiteaux"),
        ("abortorium", "abortoria"),
        ("abortus", "abortuses"),
        ("abscissa", "abscissae"),
        ("abstractum", "abstracta"),
        ("acarus", "acari"),
        ("Achinese", "Achinese"),
        ("acicula", "aciculae"),
        ("acinus", "acini"),
        ("acroama", "acroamata"),
        ("acropolis", "acropolises"),
        ("actinia", "actiniae"),
        ("aculeus", "aculei"),
        ("addendum", "addenda"),
        ("adieu", "adieux"),
        ("adjutant general", "adjutant generals"),
        ("adminiculum", "adminicula"),
        ("ado", "ados"),
        ("adviso", "advisoes"),
        ("adytum", "adyta"),
        ("aecidium", "aecidia"),
        ("aegis", "aegises"),
        ("aelf", "aelfe"),
        ("aficionado", "aficionados"),
        ("afreet", "afreeti"),
        ("afrit", "afriti"),
        ("agape", "agapae"),
        ("agend", "agenda"),
        ("agendum", "agenda"),
        ("agent provocateur", "agents provocateurs"),
        ("aggro", "aggros"),
        ("agon", "agones"),
        ("agora", "agorae"),
        ("agrogorod", "agrogoroda"),
        ("aide de camp", "aides de camp"),
        ("aide-de-camp", "aides-de-camp"),
        ("ala", "alae"),
        ("alan", "alani"),
        ("albergo", "alberghi"),
        ("albino", "albinos"),
        ("ale wife", "ale wives"),
        ("ale-wife", "ale-wives"),
        ("Alfurese", "Alfurese"),
        ("alga", "algae"),
        ("alguacil", "alguaciles"),
        ("alias", "aliases"),
        ("allargando", "allargandi"),
        ("allegro", "allegros"),
        ("alluvium", "alluvia"),
        ("alto", "alti"),
        ("alto relievo", "alto relievos"),
        ("alto-relievo", "alto-relievos"),
        ("altorelievo", "altorelievos"),
        ("alula", "alulae"),
        ("alumna", "alumnae"),
        ("alumnus", "alumni"),
        ("alveolus", "alveoli"),
        ("ambo", "ambones"),
        ("Amboinese", "Amboinese"),
        ("ambulacrum", "ambulacra"),
        ("ambuscado", "ambuscadoes"),
        ("amentum", "amenta"),
        ("Americanese", "Americanese"),
        ("amicus curiae", "amici curiae"),
        ("ammo", "ammos"),
        ("amoeba", "amoebae"),
        ("amoretto", "amoretti"),
        ("amorino", "amorini"),
        ("Amoyese", "Amoyese"),
        ("amphipneust", "amphipneusta"),
        ("amphora", "amphorae"),
        ("anacoluthon", "anacolutha"),
        ("anathema", "anathemata"),
        ("ancona", "ancone"),
        ("Andamanese", "Andamanese"),
        ("angioma", "angiomata"),
        ("Angolese", "Angolese"),
        ("angustia", "angustiae"),
        ("anlage", "anlagen"),
        ("Annamese", "Annamese"),
        ("anta", "antae"),
        ("Antananarivo", "Antananarivos"),
        ("antefix", "antefixa"),
        ("antenna", "antennae"),
        ("anthemion", "anthemia"),
        ("anthodium", "anthodia"),
        ("anti serum", "anti sera"),
        ("anti-serum", "anti-sera"),
        ("antiserum", "antisera"),
        ("antrum", "antra"),
        ("apex", "apices"),
        ("aphelion", "aphelia"),
        ("aphis", "aphides"),
        ("apothecium", "apothecia"),
        ("apparatchik", "apparatchiki"),
        ("apparatus", "apparatus"),
        ("appendix", "appendices"),
        ("appressorium", "appressoria"),
        ("apsis", "apsides"),
        ("apterium", "apteria"),
        ("aptychus", "aptychi"),
        ("aquarium", "aquaria"),
        ("Aragonese", "Aragonese"),
        ("Arakanese", "Arakanese"),
        ("arango", "arangoes"),
        ("arboretum", "arboreta"),
        ("arcanum", "arcana"),
        ("archegonium", "archegonia"),
        ("archipelago", "archipelagoes"),
        ("arcosolium", "arcosolia"),
        ("areola", "areolae"),
        ("arf", "arves"),
        ("argumentum", "argumenta"),
        ("arista", "aristae"),
        ("armadillo", "armadillos"),
        ("arrha", "arrhae"),
        ("asbestos", "asbestoses"),
        ("ascidium", "ascidia"),
        ("Asherah", "Asherim"),
        ("Assamese", "Assamese"),
        ("asterias", "asteriae"),
        ("astrocytoma", "astrocytomata"),
        ("asylum", "asyla"),
        ("asyndeton", "asyndeta"),
        ("ataman", "atamans"),
        ("Atlas", "Atlantes"),
        ("atlas", "atlantes"),
        ("atman", "atmas"),
        ("aureus", "aurei"),
        ("aurora", "aurorae"),
        ("Auslese", "Auslesen"),
        ("auslese", "auslesen"),
        ("auspex", "auspices"),
        ("auto", "autos"),
        ("auto de fe", "autos de fes"),
        ("auto-de-fe", "autos-de-fes"),
        ("autobahn", "autobahnen"),
        ("autochthon", "autochthones"),
        ("autostrada", "autostrade"),
        ("avicularium", "avicularia"),
        ("Avignonese", "Avignonese"),
        ("aviso", "avisos"),
        ("avocado", "avocados"),
        ("ax", "axes"),
        ("axe", "axes"),
        ("axilla", "axillae"),
        ("axis", "axes"),
        ("axon", "axones"),
        ("axopodium", "axopodia"),
        ("Azerbaijanese", "Azerbaijanese"),
        ("baal", "baalim"),
        ("bacillus", "bacilli"),
        ("bacterium", "bacteria"),
        ("Bahaman", "Bahamans"),
        ("bajocco", "bajocchi"),
        ("Balinese", "Balinese"),
        ("ballabile", "ballabili"),
        ("ballata", "ballate"),
        ("ballerina", "ballerine"),
        ("ballista", "ballistae"),
        ("Bamako", "Bamakos"),
        ("bandeau", "bandeaux"),
        ("bandit", "banditti"),
        ("Barquisimeto", "Barquisimetos"),
        ("barrico", "barricoes"),
        ("base", "bases"),
        ("basilica", "basilicae"),
        ("basis", "bases"),
        ("bass", "bass"),
        ("basso", "bassi"),
        ("bateau", "bateaux"),
        ("bath", "baths"),
        ("bathos", "bathoses"),
        ("batz", "batzes"),
        ("beau", "beaux"),
        ("beau geste", "beaux gestes"),
        ("bechuana", "bechuana"),
        ("beef", "beeves"),
        ("beerenauslese", "beerenauslesen"),
        ("bel esprit", "beaux esprits"),
        ("bel homme", "beaux hommes"),
        ("bel-esprit", "beaux esprits"),
        ("belle epoque", "belles epoques"),
        ("bema", "bemata"),
        ("Bengalese", "Bengalese"),
        ("Bernese", "Bernese"),
        ("bersagliere", "bersaglieri"),
        ("bhikshu", "bhikshook"),
        ("Bhutanese", "Bhutanese"),
        ("bias", "biases"),
        ("bierstube", "bierstuben"),
        ("bifolium", "bifolia"),
        ("bijou", "bijoux"),
        ("bilbo", "bilboes"),
        ("bimbo", "bimbos"),
        ("bingo", "bingos"),
        ("Biro", "Biros"),
        ("biscotto", "biscotti"),
        ("bison", "bison"),
        ("blastema", "blastemata"),
        ("blemya", "blemyae"),
        ("blin", "blini"),
        ("blitz", "blitzes"),
        ("blouse", "blouses"),
        ("blue", "blues"),
        ("blues", "blues"),
        ("bodegon", "bodegones"),
        ("bolero", "boleros"),
        ("Bolognese", "Bolognese"),
        ("bolus", "boluses"),
        ("Bolzano", "Bolzanos"),
        ("bon mot", "bons mots"),
        ("bon vivant", "bons vivants"),
        ("bona fides", "bonis fidebus"),
        ("bongo", "bongoes"),
        ("bordereau", "bordereaux"),
        ("Borghese", "Borghese"),
        ("Bostonese", "Bostonese"),
        ("Boto", "Botos"),
        ("bozzetto", "bozzetti"),
        ("braccio", "braccia"),
        ("brachiopod", "brachiopoda"),
        ("branchiopod", "branchiopoda"),
        ("bratwurst", "bratwurste"),
        ("bravo", "bravoes"),
        ("break away", "breaks away"),
        ("break-away", "breaks-away"),
        ("breakaway", "breaksaway"),
        ("bream", "bream"),
        ("breech", "breeches"),
        ("breeches", "breeches"),
        ("bregma", "bregmata"),
        ("brigadier general", "brigadier generals"),
        ("britches", "britches"),
        ("bronchitis", "bronchitises"),
        ("bronchus", "bronchi"),
        ("brother", "brethren"),
        ("brother german", "brethren german"),
        ("brother-german", "brethren-german"),
        ("bruschetta", "bruschette"),
        ("bubo", "buboes"),
        ("buffalo", "buffalo"),
        ("Buginese", "Buginese"),
        ("bulimus", "bulimi"),
        ("bulla", "bullae"),
        ("bureau", "bureaux"),
        ("Burman", "Burmans"),
        ("Burmese", "Burmese"),
        ("burro", "burros"),
        ("bursa", "bursae"),
        ("bursch", "burschen"),
        ("bursitis", "bursitises"),
        ("busto", "bustoes"),
        ("buzz", "buzzes"),
        ("bylina", "byliny"),
        ("cabaletta", "cabalette"),
        ("cactus", "cacti"),
        ("caddis", "caddises"),
        ("caduceus", "caducei"),
        ("caecum", "caeca"),
        ("caffe macchiato", "caffe macchiati"),
        ("caffe ristretto", "caffe ristretti"),
        ("caiman", "caimans"),
        ("Cairo", "Cairos"),
        ("Calabrese", "Calabrese"),
        ("calamistrum", "calamistra"),
        ("calathus", "calathi"),
        ("calix", "calices"),
        ("callus", "calluses"),
        ("calypso", "calypsos"),
        ("calzone", "calzoni"),
        ("Camaldolese", "Camaldolese"),
        ("camera obscura", "camerae obscurae"),
        ("canaliculus", "canaliculi"),
        ("candelabrum", "candelabra"),
        ("cannabis", "cannabises"),
        ("cantharus", "canthari"),
        ("canto", "cantos"),
        ("Cantonese", "Cantonese"),
        ("cantus", "cantus"),
        ("canvas", "canvases"),
        ("canzonetta", "canzonette"),
        ("capataz", "capataces"),
        ("capo", "capi"),
        ("cappuccino", "cappuccinos"),
        ("carabiniere", "carabinieri"),
        ("carcinoma", "carcinomata"),
        ("cardo", "cardines"),
        ("cardophagus", "cardophagi"),
        ("carex", "carices"),
        ("cargador", "cargadores"),
        ("caribou", "caribou"),
        ("Carlylese", "Carlylese"),
        ("carmen", "carmina"),
        ("carp", "carp"),
        ("carte de visite", "cartes de visite"),
        ("carte-de-visite", "cartes-de-visite"),
        ("caryatid", "caryatides"),
        ("caryopsis", "caryopsides"),
        ("casino", "casinos"),
        ("Cassinese", "Cassinese"),
        ("cassone", "cassoni"),
        ("castrato", "castrati"),
        ("castrum", "castra"),
        ("casus belli", "casus belli"),
        ("cathisma", "cathismata"),
        ("caudex", "caudices"),
        ("caulis", "caules"),
        ("cavea", "caveae"),
        ("cayman", "caymans"),
        ("cecidium", "cecidia"),
        ("Celanese", "Celanese"),
        ("celia", "celiae"),
        ("cello", "cellos"),
        ("cementoma", "cementomata"),
        ("centesimo", "centesimi"),
        ("centumvir", "centumviri"),
        ("cercus", "cerci"),
        ("ceriman", "cerimans"),
        ("Ceylonese", "Ceylonese"),
        ("chaeta", "chaetae"),
        ("chaos", "chaoses"),
        ("chapeau", "chapeaux"),
        ("chapplis", "chapplies"),
        ("charisma", "charismata"),
        ("chassis", "chassis"),
        ("chateau", "chateaux"),
        ("cherub", "cherubim"),
        ("chervonetz", "chervontzi"),
        ("cheval", "chevaux"),
        ("cheval de bataille", "chevaux de bataille"),
        ("cheval-de-bataille", "chevaux-de-bataille"),
        ("Chicago", "Chicagos"),
        ("child", "children"),
        ("Chimango", "Chimangos"),
        ("Chinese", "Chinese"),
        ("chintz", "chintzes"),
        ("chitarrone", "chitarroni"),
        ("chlamydia", "chlamydiae"),
        ("choana", "choanae"),
        ("chorda", "chordae"),
        ("chorus", "choruses"),
        ("chou", "choux"),
        ("chromidium", "chromidia"),
        ("chromonema", "chromonemata"),
        ("chrysalis", "chrysalides"),
        ("cicatrix", "cicatrices"),
        ("cilantro", "cilantros"),
        ("cimex", "cimices"),
        ("cinclis", "cinclides"),
        ("cistophorus", "cistophorori"),
        ("cladus", "cladi"),
        ("claustrum", "claustra"),
        ("clausula", "clausulae"),
        ("clavula", "clavulae"),
        ("cleithrum", "cleithra"),
        ("clepsydra", "clepsydrae"),
        ("clipper", "clippers"),
        ("clippers", "clippers"),
        ("clitoris", "clitorides"),
        ("clostridium", "clostridia"),
        ("co", "coes"),
        ("coagulum", "coagula"),
        ("coccidium", "coccidia"),
        ("cochito", "cochitos"),
        ("coco", "cocos"),
        ("cod", "cod"),
        ("codex", "codices"),
        ("coe", "coes"),
        ("coelia", "coeliae"),
        ("cognoscente", "cognoscenti"),
        ("coitus", "coitus"),
        ("collegium", "collegia"),
        ("collegium musicum", "collegia musica"),
        ("Colombo", "Colombos"),
        ("Colorado", "Colorados"),
        ("columbarium", "columbaria"),
        ("columna", "columnae"),
        ("coma", "comae"),
        ("comatula", "comatulae"),
        ("commando", "commandos"),
        ("compendium", "compendia"),
        ("competent", "competentes"),
        ("concertino", "concertinos"),
        ("concerto grosso", "concerti grossi"),
        ("concetto", "concetti"),
        ("condo", "condos"),
        ("condottiere", "condottieri"),
        ("conductus", "conducti"),
        ("coney", "conies"),
        ("conferva", "confervae"),
        ("confluvium", "confluvia"),
        ("congius", "congii"),
        ("Congoese", "Congoese"),
        ("Congolese", "Congolese"),
        ("conidium", "conidia"),
        ("conoscente", "conoscenti"),
        ("consortium", "consortia"),
        ("contadina", "contadine"),
        ("contadino", "contadini"),
        ("contagium", "contagia"),
        ("contango", "contangos"),
        ("contrafactum", "contrafacta"),
        ("contralto", "contralti"),
        ("contretemps", "contretemps"),
        ("conversazione", "conversazioni"),
        ("convolvulus", "convolvuli"),
        ("cony", "conies"),
        ("corgi", "corgwn"),
        ("corgy", "corgwn"),
        ("cornetto", "cornetti"),
        ("corno", "corni"),
        ("cornu", "cornua"),
        ("corona", "coronae"),
        ("corps", "corps"),
        ("corpus", "corpora"),
        ("corpus vile", "corpora vilia"),
        ("corpusculum", "corpuscula"),
        ("corrigendum", "corrigenda"),
        ("cortex", "cortices"),
        ("cosmos", "cosmoses"),
        ("costa", "costae"),
        ("coup d'etat", "coups d'etat"),
        ("court martial", "courts martial"),
        ("court-martial", "courts-martial"),
        ("cow", "kine"),
        ("coxendix", "coxendices"),
        ("coz", "cozes"),
        ("craft", "craft"),
        ("crafts child", "crafts childer"),
        ("crafts-child", "crafts-childer"),
        ("cranium", "crania"),
        ("craspedon", "craspeda"),
        ("craspedum", "craspeda"),
        ("crazia", "crazie"),
        ("credo", "credos"),
        ("cremaster", "cremasteres"),
        ("crescendo", "crescendos"),
        ("cri de coeur", "cris de coeur"),
        ("crista", "cristae"),
        ("criterion", "criteria"),
        ("crowfoot", "crowfoots"),
        ("crus", "crura"),
        ("crusta", "crustae"),
        ("cubiculum", "cubicula"),
        ("cul de four", "culs de four"),
        ("cul de lampe", "culs de lampe"),
        ("cul de sac", "culs de sac"),
        ("cul-de-four", "culs-de-four"),
        ("cul-de-lampe", "culs-de-lampe"),
        ("cul-de-sac", "culs-de-sac"),
        ("cultellus", "cultelli"),
        ("cumulus", "cumuli"),
        ("cuniculus", "cuniculi"),
        ("curioso", "curiosi"),
        ("curriculum", "curricula"),
        ("cuspis", "cuspides"),
        ("cyano", "cyanos"),
        ("cyathus", "cyathi"),
        ("cyclops", "cyclopes"),
        ("cynocephalus", "cynocephali"),
        ("cyphella", "cyphellae"),
        ("cysticercus", "cysticerci"),
        ("cystidium", "cystidia"),
        ("cystoma", "cystomata"),
        ("Czech", "Czechs"),
        ("dace", "dace"),
        ("dais", "daises"),
        ("datum", "data"),
        ("debris", "debris"),
        ("decennium", "decennia"),
        ("deer", "deer"),
        ("delirium", "deliria"),
        ("demo", "demos"),
        ("denarius", "denarii"),
        ("denkmal", "denkmaler"),
        ("denotatum", "denotata"),
        ("dentalium", "dentalia"),
        ("depositum", "deposita"),
        ("descriptum", "descripta"),
        ("desideratum", "desiderata"),
        ("designatum", "designata"),
        ("desma", "desmata"),
        ("desman", "desmans"),
        ("devoto", "devoti"),
        ("diabetes", "diabetes"),
        ("diastema", "diastemata"),
        ("dichasium", "dichasia"),
        ("dictum", "dicta"),
        ("didymis", "didymes"),
        ("die", "dies"),
        ("differentia", "differentiae"),
        ("digitalis", "digitalises"),
        ("dilettante", "dilettanti"),
        ("diplococcus", "diplococci"),
        ("diploma", "diplomata"),
        ("diporpa", "diporpae"),
        ("dipsas", "dipsades"),
        ("directrix", "directrices"),
        ("ditto", "dittos"),
        ("diverticulum", "diverticula"),
        ("divertimento", "divertimenti"),
        ("djinn", "djinn"),
        ("do", "does"),
        ("doe", "does"),
        ("dogma", "dogmata"),
        ("dolman", "dolmans"),
        ("dolphinarium", "dolphinaria"),
        ("Dongolese", "Dongolese"),
        ("Draco", "Dracos"),
        ("dragoman", "dragomans"),
        ("drama", "dramas"),
        ("dreikanter", "dreikanter"),
        ("dumka", "dumky"),
        ("duumvir", "duumviri"),
        ("dynamo", "dynamos"),
        ("edema", "edemata"),
        ("editio princeps", "editiones principes"),
        ("efreet", "efreeti"),
        ("eland", "eland"),
        ("elf", "elves"),
        ("elk", "elk"),
        ("ellipse", "ellipses"),
        ("ellipsis", "ellipses"),
        ("emblema", "emblememata"),
        ("embryo", "embryos"),
        ("embryoma", "embryomata"),
        ("emporium", "emporia"),
        ("enconium", "enconia"),
        ("endothelioma", "endotheliomata"),
        ("enema", "enemata"),
        ("enigma", "enigmata"),
        ("ens rationis", "entia rationis"),
        ("ens reale", "entia realia"),
        ("entente cordiale", "ententes cordiales"),
        ("enteron", "entera"),
        ("entrochus", "entrochi"),
        ("ephelis", "ephelides"),
        ("ephemera", "ephemerae"),
        ("ephemeris", "ephemerides"),
        ("epicardium", "epicardia"),
        ("epidermis", "epidermises"),
        ("epididymis", "epididymides"),
        ("epilimnion", "epilimnia"),
        ("epimeron", "epimera"),
        ("epiphenomenon", "epiphenomena"),
        ("epithelioma", "epitheliomata"),
        ("epyllion", "epyllia"),
        ("equinoctium", "equinoctia"),
        ("equisetum", "equiseta"),
        ("erf", "erven"),
        ("ergastulum", "ergastula"),
        ("eros", "erotes"),
        ("erratum", "errata"),
        ("espanol", "espanoles"),
        ("Esperanto", "Esperantos"),
        ("espresso", "espressos"),
        ("ethos", "ethoses"),
        ("eucalyptus", "eucalypti"),
        ("eunuch", "eunuchs"),
        ("euporiston", "euporista"),
        ("euro", "euros"),
        ("evirato", "evirati"),
        ("ex", "exes"),
        ("exanthema", "exanthemata"),
        ("exemplum", "exempla"),
        ("exencephalus", "exencephali"),
        ("explanandum", "explananda"),
        ("explicandum", "explicanda"),
        ("extispex", "extispices"),
        ("extremum", "extrema"),
        ("eyas", "eyases"),
        ("fabella", "fabellae"),
        ("fabliau", "fabliaux"),
        ("faciendum", "facienda"),
        ("faecula", "faeculae"),
        ("fait accompli", "faits accomplis"),
        ("falsetto", "falsettos"),
        ("falx", "falces"),
        ("familia", "familiae"),
        ("famulus", "famuli"),
        ("fanfoot", "fanfoots"),
        ("farman", "farmans"),
        ("Faro", "Faros"),
        ("Faroese", "Faroese"),
        ("fascia", "fasciae"),
        ("fasciculus", "fasciculi"),
        ("fauna", "faunae"),
        ("favella", "favellae"),
        ("faveolus", "faveoli"),
        ("favissa", "favissae"),
        ("fecula", "feculae"),
        ("fedai", "fedai"),
        ("feis", "feiseanna"),
        ("felo", "felones"),
        ("felo de se", "felones de se"),
        ("felo-de-se", "felones-de-se"),
        ("felsenmeer", "felsenmeere"),
        ("femur", "femora"),
        ("fenestra", "fenestrae"),
        ("fermata", "fermate"),
        ("Ferrarese", "Ferrarese"),
        ("fiasco", "fiascos"),
        ("fibra", "fibrae"),
        ("fibrilla", "fibrillae"),
        ("fibroma", "fibromata"),
        ("fibula", "fibulae"),
        ("fidei defensor", "fidei defensores"),
        ("figurante", "figuranti"),
        ("filaria", "filariae"),
        ("Filipino", "Filipinos"),
        ("finger end", "fingers ends"),
        ("finger-end", "fingers-ends"),
        ("fioritura", "fioriture"),
        ("fish", "fish"),
        ("fizz", "fizzes"),
        ("flabellum", "flabella"),
        ("flag staff", "flag staves"),
        ("flag-staff", "flag-staves"),
        ("flagellum", "flagella"),
        ("flamenco", "flamencos"),
        ("flatfoot", "flatfoots"),
        ("flatus", "flatuses"),
        ("flocculus", "flocculi"),
        ("floccus", "flocci"),
        ("flora", "florae"),
        ("flounder", "flounder"),
        ("fly", "flys"),
        ("focus", "foci"),
        ("follis", "folles"),
        ("fomes", "fomites"),
        ("Foochowese", "Foochowese"),
        ("foot", "feet"),
        ("foramen", "foramina"),
        ("formula", "formulae"),
        ("forum", "fora"),
        ("fossa", "fossae"),
        ("fowl", "fowl"),
        ("fraenum", "fraena"),
        ("franc archer", "francs archers"),
        ("franc-archer", "francs-archers"),
        ("frate", "frati"),
        ("frenum", "fraena"),
        ("fricandeau", "fricandeaux"),
        ("frizz", "frizzes"),
        ("fro", "froes"),
        ("froe", "froes"),
        ("frottola", "frottole"),
        ("frustulum", "frustula"),
        ("frustum", "frusta"),
        ("fucus", "fuci"),
        ("fulcrum", "fulcra"),
        ("funambulus", "funambuli"),
        ("fundamentum divisionis", "fundamenta divisionis"),
        ("fungo porcino", "funghi porchini"),
        ("fungus", "fungi"),
        ("furfur", "furfures"),
        ("furioso", "furiosos"),
        ("fuzz", "fuzzes"),
        ("Gabunese", "Gabunese"),
        ("Galla", "Galla"),
        ("galla", "galla"),
        ("gallows", "gallows"),
        ("gametangium", "gametangia"),
        ("ganglion", "ganglia"),
        ("gaon", "gaonim"),
        ("gastrocnemius", "gastrocnemii"),
        ("geisha", "geisha"),
        ("geisteswissenschaft", "geisteswissenschaften"),
        ("gemma", "gemmae"),
        ("gena", "genae"),
        ("generalissimo", "generalissimos"),
        ("Genevese", "Genevese"),
        ("genie", "genii"),
        ("genius", "genii"),
        ("Genoese", "Genoese"),
        ("gens", "gentes"),
        ("genus", "genera"),
        ("German", "Germans"),
        ("germarium", "germaria"),
        ("Gestapo", "Gestapos"),
        ("ghetto", "ghettos"),
        ("gigolo", "gigolos"),
        ("Gilbertese", "Gilbertese"),
        ("giuncus", "giunchi"),
        ("gizmo", "gizmos"),
        ("glacis", "glacis"),
        ("gladiolus", "gladioli"),
        ("glass", "glasses"),
        ("glasses", "glasses"),
        ("glioma", "gliomata"),
        ("gliosarcoma", "gliosarcomata"),
        ("glissando", "glissandi"),
        ("globigerina", "globigerinae"),
        ("glochidium", "glochidia"),
        ("glomus", "glomera"),
        ("glutaeus", "glutaei"),
        ("gluteus", "glutaei"),
        ("gmina", "gminy"),
        ("go", "goes"),
        ("Goanese", "Goanese"),
        ("gonangium", "gonangia"),
        ("gonidium", "gonidia"),
        ("gonimium", "gonimia"),
        ("goose", "geese"),
        ("gorgonia", "gorgoniae"),
        ("gousblom", "gousblomme"),
        ("goy", "goyim"),
        ("graben", "graben"),
        ("graffiti", "graffiti"),
        ("graffito", "graffiti"),
        ("granita", "granite"),
        ("grano", "grani"),
        ("granula", "granulae"),
        ("gravamen", "gravamina"),
        ("Greensboro", "Greensboros"),
        ("gringo", "gringos"),
        ("grissino", "grissini"),
        ("grotto", "grottoes"),
        ("grouse", "grouse"),
        ("Guaiabero", "Guaiaberos"),
        ("guano", "guanos"),
        ("guardia civil", "guardias civiles"),
        ("gubernaculum", "gubernacula"),
        ("guglio", "guglioes"),
        ("Guianese", "Guianese"),
        ("gumbo", "gumbos"),
        ("gumma", "gummata"),
        ("guttus", "gutti"),
        ("guy", "guys"),
        ("gymnasium", "gymnasia"),
        ("gymnotus", "gymnoti"),
        ("gyro", "gyros"),
        ("gyrus", "gyri"),
        ("haddock", "haddock"),
        ("haemangioma", "haemangiomata"),
        ("haggis", "haggis"),
        ("Hainanese", "Hainanese"),
        ("hairdo", "hairdos"),
        ("hake", "hake"),
        ("halibut", "halibut"),
        ("hallux", "halluces"),
        ("halteridium", "halteridia"),
        ("hamadryad", "hamadryades"),
        ("hamulus", "hamuli"),
        ("hapax legomenon", "hapax legomena"),
        ("hapteron", "haptera"),
        ("Hararese", "Hararese"),
        ("Harlemese", "Harlemese"),
        ("harman", "harmans"),
        ("haruspex", "haruspices"),
        ("haustellum", "haustella"),
        ("haustorium", "haustoria"),
        ("haustrum", "haustra"),
        ("Havanese", "Havanese"),
        ("he", "they"),
        ("headquarters", "headquarters"),
        ("Heavenese", "Heavenese"),
        ("hedron", "hedra"),
        ("heft", "hefte"),
        ("helion", "helia"),
        ("helix", "helices"),
        ("hemangeioma", "hemangeiomata"),
        ("hemangioma", "hemangiomata"),
        ("hemelytrum", "hemelytra"),
        ("hemera", "hemerae"),
        ("hemi elytrum", "hemi elytra"),
        ("hemi-elytrum", "hemi-elytra"),
        ("her", "them"),
        ("hernia", "herniae"),
        ("hero", "heroes"),
        ("heroon", "heroa"),
        ("heroum", "heroa"),
        ("herpes", "herpes"),
        ("herr", "herren"),
        ("herring", "herring"),
        ("hers", "theirs"),
        ("herself", "themselves"),
        ("hertz", "hertz"),
        ("hetaera", "hetairai"),
        ("hetaira", "hetairai"),
        ("hetman", "hetmans"),
        ("hiatus", "hiatus"),
        ("hijinks", "hijinks"),
        ("him", "them"),
        ("himself", "themselves"),
        ("hinaki", "hinaki"),
        ("hippo", "hippos"),
        ("hippocampus", "hippocampi"),
        ("hippopotamus", "hippopotami"),
        ("Hiroshiman", "Hiroshimans"),
        ("his", "theirs"),
        ("ho", "hoes"),
        ("hoe", "hoes"),
        ("holothuria", "holothuriae"),
        ("honorarium", "honoraria"),
        ("hoof", "hooves"),
        ("Hoosierese", "Hoosierese"),
        ("hordeolum", "hordeola"),
        ("hormogonium", "hormogonia"),
        ("hoti", "hoties"),
        ("Hottentotese", "Hottentotese"),
        ("hsien", "heen"),
        ("hubris", "hubrises"),
        ("human", "humans"),
        ("humerus", "humeri"),
        ("Hunanese", "Hunanese"),
        ("hydra", "hydrae"),
        ("hydraulicon", "hydraulica"),
        ("hydria", "hydriae"),
        ("hymenium", "hymenia"),
        ("hymnarium", "hymnaria"),
        ("hyperbaton", "hyperbata"),
        ("hyperbola", "hyperbolae"),
        ("hypha", "hyphae"),
        ("hypnum", "hypna"),
        ("hypoderma", "hypodermata"),
        ("hypolimnion", "hypolimnia"),
        ("I", "we"),
        ("ibis", "ibises"),
        ("ichthyosaurus", "ichthyosauri"),
        ("Idaho", "Idahos"),
        ("idee fixe", "idees fixes"),
        ("idolon", "idola"),
        ("idolum", "idola"),
        ("ignoramus", "ignoramus"),
        ("ilium", "ilia"),
        ("imago", "imagines"),
        ("imbrex", "imbrices"),
        ("impetigo", "impetigos"),
        ("impetus", "impetus"),
        ("improperium", "improperia"),
        ("improvisatrice", "improvisatrici"),
        ("incubus", "incubi"),
        ("index", "indices"),
        ("indicium", "indicia"),
        ("indigena", "indigenae"),
        ("individuum", "individua"),
        ("Indochinese", "Indochinese"),
        ("indumentum", "indumenta"),
        ("indusium", "indusia"),
        ("inferno", "infernos"),
        ("infima species", "infimae species"),
        ("info", "infos"),
        ("inhalatorium", "inhalatoria"),
        ("innings", "innings"),
        ("inoculum", "inocula"),
        ("insula", "insulae"),
        ("intaglio", "intaglios"),
        ("interambulacrum", "interambulacra"),
        ("interaxis", "interaxes"),
        ("intercalarium", "intercalare"),
        ("interleaf", "leaves"),
        ("intermaxilla", "intermaxillae"),
        ("intermedium", "intermedia"),
        ("intermezzo", "intermezzos"),
        ("internodium", "internodia"),
        ("interphenomenon", "interphenomena"),
        ("interradius", "interradii"),
        ("interregnum", "interregna"),
        ("interrex", "interreges"),
        ("interstitium", "interstitia"),
        ("intertrigo", "intertrigos"),
        ("intervallum", "intervalla"),
        ("intichiuma", "intichiuma"),
        ("inuk", "inuit"),
        ("inukshuk", "inukshuit"),
        ("involucrum", "involucra"),
        ("ipse dixit", "ipse dixits"),
        ("Iquico", "Iquicos"),
        ("iris", "irides"),
        ("ischium", "ischia"),
        ("isidium", "isidia"),
        ("ispravnik", "ispravniki"),
        ("isthmus", "isthmi"),
        ("it", "they"),
        ("iter", "itinera"),
        ("its", "theirs"),
        ("itself", "themselves"),
        ("ixodid", "ixodides"),
        ("jackanapes", "jackanapes"),
        ("jacobus", "jacobus"),
        ("jalapeno", "jalapenos"),
        ("jambeau", "jambeaux"),
        ("Japanese", "Japanese"),
        ("Javanese", "Javanese"),
        ("jazz", "jazzes"),
        ("jerry", "jerries"),
        ("Jerry", "Jerrys"),
        ("jeu", "jeux"),
        ("jo", "joes"),
        ("joe", "joes"),
        ("Johnsonese", "Johnsonese"),
        ("judas", "judases"),
        ("judicatum", "judicata"),
        ("juelet", "iueles"),
        ("jugum", "juga"),
        ("jumbo", "jumbos"),
        ("junto", "juntos"),
        ("Kakapo", "Kakapos"),
        ("Kanarese", "Kanarese"),
        ("kantharos", "kantharoi"),
        ("kar", "kare"),
        ("karakia", "karakia"),
        ("karrenfeld", "karrenfelder"),
        ("kernos", "kernoi"),
        ("kibbutz", "kibbutzim"),
        ("kilo", "kilos"),
        ("kimono", "kimonos"),
        ("Kinkimavo", "Kinkimavos"),
        ("kioko", "kioko"),
        ("Kiplingese", "Kiplingese"),
        ("kletterschuh", "kletterschuhe"),
        ("knife", "knives"),
        ("knopper", "knoppern"),
        ("kobo", "kobo"),
        ("Kokako", "Kokakos"),
        ("konditorei", "konditoreien"),
        ("Kongoese", "Kongoese"),
        ("Kongolese", "Kongolese"),
        ("Kosovo", "Kosovos"),
        ("kouros", "kouroi"),
        ("kovsh", "kovshi"),
        ("kuvasz", "kuvaszok"),
        ("kylix", "kylikes"),
        ("labrum", "labra"),
        ("lacinia", "laciniae"),
        ("lactobacillus", "lactobacilli"),
        ("lacuna", "lacunae"),
        ("lacunar", "lacunaria"),
        ("laika", "laiki"),
        ("lamella", "lamellae"),
        ("lamina", "laminae"),
        ("Lapith", "Lapithae"),
        ("lapith", "lapithae"),
        ("Lapponese", "Lapponese"),
        ("lar", "lares"),
        ("larnax", "larnakes"),
        ("larynx", "larynges"),
        ("latex", "latices"),
        ("leaf", "leaves"),
        ("Lebanese", "Lebanese"),
        ("lebensform", "lebensformen"),
        ("legionella", "legionellae"),
        ("legomenon", "legomena"),
        ("legumen", "legumina"),
        ("leishmania", "leishmaniae"),
        ("leman", "lemans"),
        ("lemma", "lemmata"),
        ("lemniscus", "lemnisci"),
        ("lemur", "lemures"),
        ("lens", "lenses"),
        ("lentigo", "lentigines"),
        ("lentiscus", "lentisci"),
        ("Leonese", "Leonese"),
        ("leproma", "lepromata"),
        ("leprosarium", "leprosaria"),
        ("leptomonas", "leptomonas"),
        ("lepton", "lepta"),
        ("leptospira", "leptospirae"),
        ("Lesotho", "Lesothos"),
        ("leu", "lei"),
        ("lex humana", "leges humanae"),
        ("libero", "liberos"),
        ("libido", "libidos"),
        ("libretto", "libretti"),
        ("lido", "lidos"),
        ("lied", "lieder"),
        ("lieu", "lieux"),
        ("lieutenant general", "lieutenant generals"),
        ("life", "lives"),
        ("ligamentum", "ligamenta"),
        ("likuta", "makuta"),
        ("Lilo", "Lilos"),
        ("Liman", "Limans"),
        ("limax", "limaces"),
        ("limbo", "limbos"),
        ("limes", "limites"),
        ("limo", "limos"),
        ("limulus", "limuli"),
        ("linctus", "linctuses"),
        ("line out", "lines out"),
        ("line-out", "lines-out"),
        ("linea", "lineae"),
        ("lineno", "linenos"),
        ("lingo", "lingos"),
        ("lingula", "lingulae"),
        ("lino", "linos"),
        ("lipoma", "lipomata"),
        ("lis", "lis"),
        ("listerella", "listerellae"),
        ("listeria", "listeria"),
        ("lithodomus", "lithodomi"),
        ("lithophyton", "lithophyta"),
        ("livedo", "livedos"),
        ("lixivium", "lixivia"),
        ("loa", "loa"),
        ("loaf", "loaves"),
        ("lobulus", "lobuli"),
        ("lochus", "lochi"),
        ("loco", "locos"),
        ("loculus", "loculi"),
        ("locus", "loci"),
        ("loggia", "loggie"),
        ("logion", "logia"),
        ("logo", "logos"),
        ("logodaedalus", "logodaedale"),
        ("loma", "lomata"),
        ("lomentum", "lomenta"),
        ("Londonese", "Londonese"),
        ("lord lieutenant", "lords lieutenant"),
        ("lord-lieutenant", "lords-lieutenant"),
        ("Lorrainese", "Lorrainese"),
        ("lorum", "lora"),
        ("louis", "louis"),
        ("louse", "lice"),
        ("lowlife", "lowlifes"),
        ("lox", "lox"),
        ("Lucchese", "Lucchese"),
        ("lumbago", "lumbagos"),
        ("lumbricus", "lumbrici"),
        ("lumen", "lumina"),
        ("lustrum", "lustra"),
        ("lux", "lux"),
        ("lymphangioma", "lymphangiomata"),
        ("lymphoma", "lymphomata"),
        ("Lyonese", "Lyonese"),
        ("lyssa", "lyssae"),
        ("maar", "maare"),
        ("macacus", "macaci"),
        ("Macanese", "Macanese"),
        ("macaroni", "macaronies"),
        ("Macassarese", "Macassarese"),
        ("macho", "machos"),
        ("mackerel", "mackerel"),
        ("macro", "macros"),
        ("macula", "maculae"),
        ("Madurese", "Madurese"),
        ("maecenas", "maecenates"),
        ("maestro", "maestri"),
        ("mafiosa", "mafiose"),
        ("mafioso", "mafiosi"),
        ("magilus", "magili"),
        ("magma", "magmata"),
        ("magneto", "magnetos"),
        ("magnifico", "magnificos"),
        ("magnum opus", "magna opera"),
        ("magus", "magi"),
        ("major general", "major generals"),
        ("Majuro", "Majuros"),
        ("Malabarese", "Malabarese"),
        ("Malabo", "Malabos"),
        ("malagma", "malagmata"),
        ("malleolus", "malleoli"),
        ("malleus", "mallei"),
        ("Maltese", "Maltese"),
        ("malum in se", "mala in se"),
        ("man", "men"),
        ("man child", "men children"),
        ("man midwife", "men midwives"),
        ("man milliner", "men milliners"),
        ("man servant", "men servants"),
        ("man-child", "men-children"),
        ("man-midwife", "men-midwives"),
        ("man-milliner", "men-milliners"),
        ("man-servant", "men-servants"),
        ("manchild", "menchildren"),
        ("mango", "mangoes"),
        ("manifesto", "manifestos"),
        ("manservant", "menservants"),
        ("manteau", "manteaux"),
        ("mantelletta", "mantellette"),
        ("mantis", "mantises"),
        ("manubrium", "manubria"),
        ("Maputo", "Maputos"),
        ("maquereau", "maquereaux"),
        ("Maracaibo", "Maracaibos"),
        ("mare", "maria"),
        ("maremma", "maremme"),
        ("marquis", "marquises"),
        ("mary", "maries"),
        ("Mary", "Marys"),
        ("mater lectionis", "matres lectionis"),
        ("math", "maths"),
        ("matin", "matins"),
        ("matinee musicale", "matinees musicales"),
        ("matzah", "matzot"),
        ("mausoleum", "mausolea"),
        ("maxilla", "maxillae"),
        ("maximum", "maxima"),
        ("me", "us"),
        ("measles", "measles"),
        ("meatus", "meatus"),
        ("mediastinum", "mediastina"),
        ("mediatrix", "mediatrices"),
        ("medico", "medicoes"),
        ("medium", "media"),
        ("medulloblastoma", "medulloblastomata"),
        ("medusa", "medusae"),
        ("megalosaurus", "megalosauri"),
        ("megatherium", "megatheria"),
        ("melanoma", "melanomata"),
        ("melastoma", "melastomae"),
        ("meliceris", "melicerides"),
        ("melisma", "melismata"),
        ("memento", "mementoes"),
        ("memo", "memos"),
        ("memorandum", "memoranda"),
        ("menage a quatre", "menages a quatre"),
        ("menage a trois", "menages a trois"),
        ("meningioma", "meningiomata"),
        ("meniscus", "menisci"),
        ("menu", "menus"),
        ("meretrix", "meretrices"),
        ("meris", "merides"),
        ("meshumad", "meshumadim"),
        ("meshummad", "meshummadim"),
        ("mesothelioma", "mesotheliomata"),
        ("mesothelium", "mesothelia"),
        ("messa di voce", "messe di voce"),
        ("Messinese", "Messinese"),
        ("meta", "metae"),
        ("metalimnion", "metalimnia"),
        ("metapleuron", "metapleura"),
        ("metatarsus", "metatarsi"),
        ("metro", "metros"),
        ("metropolis", "metropolises"),
        ("mew", "mews"),
        ("mews", "mews"),
        ("Mexico", "Mexicos"),
        ("mezuza", "mezuzoth"),
        ("mezuzah", "mezuzoth"),
        ("mezzo rilievo", "mezzo rilievos"),
        ("mezzo-rilievo", "mezzo-rilievos"),
        ("miasma", "miasmata"),
        ("micro", "micros"),
        ("microbion", "microbia"),
        ("microcephalus", "microcephali"),
        ("micrococcus", "micrococci"),
        ("microfiche", "microfiche"),
        ("micronucleus", "micronuclei"),
        ("Milanese", "Milanese"),
        ("Milano", "Milanos"),
        ("miles gloriosus", "milites gloriosi"),
        ("milieu", "milieux"),
        ("milieu interieur", "milieux interieurs"),
        ("miliola", "miliolae"),
        ("millennium", "millennia"),
        ("mimosa", "mimosae"),
        ("mine", "ours"),
        ("minimum", "minima"),
        ("minnelied", "minnelieder"),
        ("minutia", "minutiae"),
        ("minyan", "minyanim"),
        ("miracidium", "miracidia"),
        ("mithraeum", "mithraea"),
        ("mitochondrion", "mitochondria"),
        ("mixolimnion", "mixolimnia"),
        ("mo", "moes"),
        ("moaks", "moakses"),
        ("modelletto", "modelletti"),
        ("modello", "modelli"),
        ("Modenese", "Modenese"),
        ("modernus", "moderni"),
        ("modius", "modii"),
        ("modulus", "moduli"),
        ("modus", "modi"),
        ("moe", "moes"),
        ("molimen", "molimina"),
        ("momentum", "momenta"),
        ("Monaco", "Monacos"),
        ("monas", "monades"),
        ("mondo", "mondi"),
        ("money", "monies"),
        ("mongoose", "mongooses"),
        ("monimolimnion", "monimolimnia"),
        ("mono", "monos"),
        ("monochasium", "monochasia"),
        ("monorchis", "monorchides"),
        ("monosyllabon", "monosyllaba"),
        ("monota", "monotae"),
        ("monoxylon", "monoxyla"),
        ("mons", "montes"),
        ("monseigneur", "messeigneurs"),
        ("monsignor", "monsignori"),
        ("monsignore", "monsignori"),
        ("monstre sacre", "monstres sacres"),
        ("Montenegro", "Montenegros"),
        ("moose", "moose"),
        ("moratorium", "moratoria"),
        ("morceau", "morceaux"),
        ("Morocco", "Moroccos"),
        ("moroso", "morosi"),
        ("mortadella", "mortadelle"),
        ("mortarium", "mortaria"),
        ("moscardino", "moscardini"),
        ("motoscafo", "motoscafi"),
        ("motto", "mottoes"),
        ("mouse", "mice"),
        ("mousetrap", "micetraps"),
        ("mouth", "mouths"),
        ("mucro", "mucrones"),
        ("mukim", "mukim"),
        ("multigravida", "multigravidae"),
        ("mumps", "mumps"),
        ("municipium", "municipia"),
        ("Muqdisho", "Muqdishos"),
        ("Muranese", "Muranese"),
        ("murex", "murices"),
        ("musa", "musae"),
        ("musee imaginaire", "musees imaginaires"),
        ("musique concrete", "musiques concretes"),
        ("mustachio", "mustachios"),
        ("muzz", "muzzes"),
        ("mya", "myae"),
        ("mycoplasma", "mycoplasmata"),
        ("mycorhiza", "mycorhizae"),
        ("mycorrhiza", "mycorrhizae"),
        ("myeloma", "myelomata"),
        ("myo", "myos"),
        ("myself", "ourselves"),
        ("mythos", "mythoi"),
        ("myxoma", "myxomata"),
        ("nachtlokal", "nachtlokale"),
        ("nagaika", "nagaiki"),
        ("Nakayaman", "Nakayamans"),
        ("Nankingese", "Nankingese"),
        ("nasutus", "nasuti"),
        ("naumachia", "naumachiae"),
        ("nauplius", "nauplii"),
        ("nautilus", "nautili"),
        ("Navarrese", "Navarrese"),
        ("naya paisa", "naye paise"),
        ("nebenkern", "nebenkerne"),
        ("nebula", "nebulae"),
        ("nectocalyx", "nectocalyces"),
        ("nemathecium", "nemathecia"),
        ("Nenets", "Nentsi"),
        ("nenets", "nentsy"),
        ("Nepalese", "Nepalese"),
        ("nephridium", "nephridia"),
        ("nerita", "neritae"),
        ("neuma", "neumata"),
        ("neurinoma", "neurinomata"),
        ("neuroma", "neuromata"),
        ("neurula", "neurulae"),
        ("neutrino", "neutrinos"),
        ("news", "news"),
        ("nexus", "nexus"),
        ("ngwee", "ngwee"),
        ("Niasese", "Niasese"),
        ("Nicobarese", "Nicobarese"),
        ("nidus", "nidi"),
        ("niello", "nielli"),
        ("nimbus", "nimbi"),
        ("Ningbo", "Ningbos"),
        ("Nipponese", "Nipponese"),
        ("nockerl", "nockerln"),
        ("noctiluca", "noctilucae"),
        ("nodum", "noda"),
        ("nodus", "nodi"),
        ("noema", "noemata"),
        ("nomisma", "nomismata"),
        ("non ens", "nonentia"),
        ("non-ens", "nonentia"),
        ("Norman", "Normans"),
        ("noumenon", "noumena"),
        ("nouveau pauvre", "nouveaux pauvres"),
        ("nouveau riche", "nouveaux riches"),
        ("nouvel arrive", "nouveaux arrives"),
        ("nova", "novae"),
        ("novus homo", "novi homines"),
        ("noxa", "noxae"),
        ("nse", "nses"),
        ("nubecula", "nubeculae"),
        ("nucleolonema", "nucleolonemata"),
        ("nucleolus", "nucleoli"),
        ("nucleus", "nuclei"),
        ("numen", "numina"),
        ("nuntius", "nuntii"),
        ("nympha", "nymphae"),
        ("nymphaeum", "nymphaea"),
        ("nympheum", "nymphaea"),
        ("oath", "oaths"),
        ("obelus", "obeli"),
        ("obolus", "oboli"),
        ("occiput", "occipita"),
        ("oceanarium", "oceanaria"),
        ("ocellus", "ocelli"),
        ("octavo", "octavos"),
        ("octohedron", "octohedra"),
        ("octopus", "octopuses"),
        ("oculus", "oculi"),
        ("odeum", "odea"),
        ("oedema", "oedemata"),
        ("offspring", "offspring"),
        ("ogle", "oglys"),
        ("Oklahoman", "Oklahomans"),
        ("olfactorium", "olfactoria"),
        ("omentum", "omenta"),
        ("ommatidium", "ommatidia"),
        ("onager", "onagri"),
        ("one", "some"),
        ("operculum", "opercula"),
        ("ophiophagus", "ophiophagi"),
        ("optimum", "optima"),
        ("opus", "opuses"),
        ("opus magnum", "opera magna"),
        ("opusculum", "opuscula"),
        ("oratrix", "oratrices"),
        ("oregano", "oreganos"),
        ("organon", "organa"),
        ("Orinoco", "Orinocos"),
        ("Orlando", "Orlandos"),
        ("orthoceras", "orthocerata"),
        ("osculum", "oscula"),
        ("Oslo", "Oslos"),
        ("osmaterium", "osmateria"),
        ("osmeterium", "osmeteria"),
        ("ossiculum", "ossicula"),
        ("osteoclastoma", "osteoclastomata"),
        ("osteoma", "osteomata"),
        ("ostium", "ostia"),
        ("oto", "otos"),
        ("Otomi", "Otomi"),
        ("otomi", "otomi"),
        ("ottoman", "ottomans"),
        ("ovarium", "ovaria"),
        ("ovolo", "ovoli"),
        ("ovulum", "ovula"),
        ("ovum", "ova"),
        ("ox", "oxen"),
        ("oxybaphon", "oxybapha"),
        ("oxymoron", "oxymora"),
        ("oxyuris", "oxyurides"),
        ("paha", "paha"),
        ("paisa", "paise"),
        ("pajamas", "pajamas"),
        ("pala", "palae"),
        ("palea", "paleae"),
        ("pallium", "pallia"),
        ("palpebra", "palpebrae"),
        ("palpus", "palpi"),
        ("palus", "pali"),
        ("Panaman", "Panamans"),
        ("Pangasinan", "Pangasinanes"),
        ("pangasinan", "pangasinanes"),
        ("panino", "panini"),
        ("panorpa", "panorpae"),
        ("pant", "pants"),
        ("panto", "pantos"),
        ("pants", "pants"),
        ("paparrazo", "paparrazi"),
        ("papilla", "papillae"),
        ("papilloma", "papillomata"),
        ("papula", "papulae"),
        ("papyrus", "papyri"),
        ("parabola", "parabolae"),
        ("parabolanus", "parabolani"),
        ("parador", "paradores"),
        ("paraganglioma", "paragangliomata"),
        ("paraganglion", "paraganglia"),
        ("paraglossa", "paraglossae"),
        ("Paramaribo", "Paramaribos"),
        ("paranucleus", "paranuclei"),
        ("parapleura", "parapleura"),
        ("parapleurum", "parapleura"),
        ("parapsis", "parapsides"),
        ("paraselene", "paraselenae"),
        ("parc ferme", "parcs fermes"),
        ("Pardusco", "Parduscos"),
        ("parenchyma", "parenchymata"),
        ("parergon", "parerga"),
        ("parhelion", "parhelia"),
        ("paries", "parietes"),
        ("parison", "parisa"),
        ("Parmese", "Parmese"),
        ("parnas", "parnassim"),
        ("parnass", "parnassim"),
        ("parvenu", "parvenus"),
        ("pasteurella", "pasteurellae"),
        ("pastorale", "pastorali"),
        ("patagium", "patagia"),
        ("patera", "paterae"),
        ("path", "paths"),
        ("pathos", "pathoses"),
        ("paxilla", "paxillae"),
        ("pecia", "peciae"),
        ("pecten", "pectines"),
        ("pectus", "pectora"),
        ("pedalo", "pedalos"),
        ("pedicellaria", "pedicellariae"),
        ("pediluvium", "pediluvia"),
        ("pedion", "pedia"),
        ("Pekingese", "Pekingese"),
        ("pelta", "peltae"),
        ("pelvis", "pelves"),
        ("pence", "pence"),
        ("pendulum", "pendula"),
        ("pengo", "pengoes"),
        ("penicillus", "penicilli"),
        ("peninsula", "peninsulae"),
        ("penis", "penes"),
        ("penni", "pennia"),
        ("penny", "pence"),
        ("pensiero", "pensieri"),
        ("perceptum", "percepta"),
        ("peridium", "peridia"),
        ("perikaryon", "perikarya"),
        ("perithecium", "perithecia"),
        ("pernio", "perniones"),
        ("peronium", "peronia"),
        ("perradius", "perradii"),
        ("person", "persons"),
        ("persona", "personae"),
        ("pes", "pedes"),
        ("phalangium", "phalangia"),
        ("phalanx", "phalanges"),
        ("phallos", "phalloi"),
        ("phallus", "phalli"),
        ("pharmakos", "pharmakoi"),
        ("phenomenon", "phenomena"),
        ("phlegmasia", "phlegmasiae"),
        ("phoca", "phocae"),
        ("pholas", "pholades"),
        ("photo", "photos"),
        ("phototaxis", "phototaxes"),
        ("phragma", "phragmata"),
        ("phren", "phrenes"),
        ("phyle", "phylae"),
        ("phyllobranchia", "phyllobranchiae"),
        ("phylum", "phyla"),
        ("phyma", "phymata"),
        ("phyogemmarium", "phyogemmaria"),
        ("piano", "piani"),
        ("pickerel", "pickerel"),
        ("pied a terre", "pieds a terre"),
        ("pied noir", "pieds noirs"),
        ("Piedmontese", "Piedmontese"),
        ("pietra", "pietre"),
        ("pifferaro", "pifferari"),
        ("pike", "pike"),
        ("pileus", "pilei"),
        ("pillie", "pilleis"),
        ("pilus", "pili"),
        ("pimento", "pimentos"),
        ("pina colada", "pinas coladas"),
        ("pinax", "pinaces"),
        ("pincer", "pincers"),
        ("pincers", "pincers"),
        ("pinetum", "pineta"),
        ("pingo", "pingoes"),
        ("pinna", "pinnae"),
        ("pinon", "pinones"),
        ("pinto", "pintos"),
        ("pipkrake", "pipkraker"),
        ("piscina", "piscinae"),
        ("pistillidium", "pistillidia"),
        ("Pistoiese", "Pistoiese"),
        ("pithos", "pithoi"),
        ("pizza", "pizze"),
        ("placebo", "placeboes"),
        ("placitum", "placita"),
        ("planctus", "planctus"),
        ("plankter", "plankton"),
        ("planula", "planulae"),
        ("plasmalemma", "plasmalemmae"),
        ("plasmodium", "plasmodia"),
        ("plasmolyticum", "plasmolytica"),
        ("plasmoma", "plasmomata"),
        ("plateau", "plateaux"),
        ("platypus", "platypodes"),
        ("pleco", "plecos"),
        ("plectrum", "plectra"),
        ("plenarium", "plenaria"),
        ("plesiosaurus", "plesiosauri"),
        ("plethron", "plether"),
        ("pleura", "pleura"),
        ("pleuron", "pleura"),
        ("pleurum", "pleura"),
        ("plexus", "plexus"),
        ("plica", "plicae"),
        ("pliers", "pliers"),
        ("ploshchadka", "ploshchadki"),
        ("plurale tantum", "pluralia tantum"),
        ("pluteus", "plutei"),
        ("Pluto", "Plutos"),
        ("pneumothorax", "pneumothoraces"),
        ("po", "poes"),
        ("poblador", "pobladores"),
        ("poculum", "pocula"),
        ("podere", "poderi"),
        ("podetium", "podetia"),
        ("podion", "podia"),
        ("podium", "podia"),
        ("poe", "poes"),
        ("pogo", "pogos"),
        ("poise", "poise"),
        ("polis", "polises"),
        ("politbureau", "politbureaux"),
        ("politico", "politicoes"),
        ("pollex", "pollices"),
        ("pollinarium", "pollinaria"),
        ("pollinium", "pollinia"),
        ("polo", "polos"),
        ("Polonese", "Polonese"),
        ("polythecium", "polythecia"),
        ("pomme de terre", "pommes de terre"),
        ("poncho", "ponchos"),
        ("pontifex", "pontifices"),
        ("porcino", "porcini"),
        ("porion", "poria"),
        ("porron", "porrones"),
        ("port a beul", "puirt a beul"),
        ("port de bras", "ports de bras"),
        ("port-a-beul", "puirt-a-beul"),
        ("portico", "porticoes"),
        ("portiforium", "portiforia"),
        ("portmanteau", "portmanteaux"),
        ("Porto", "Portos"),
        ("Porto Novo", "Porto Novos"),
        ("Porto-Novo", "Porto-Novos"),
        ("portrait parle", "portraits parles"),
        ("Portuguese", "Portuguese"),
        ("postnatus", "postnati"),
        ("postpubis", "postpubes"),
        ("postulatum", "postulata"),
        ("potato", "potatoes"),
        ("potestas", "potestates"),
        ("pox", "pox"),
        ("praecognitum", "praecognita"),
        ("pragma", "pragmata"),
        ("precis", "precis"),
        ("precognitum", "precognita"),
        ("premier danseur", "premiers danseurs"),
        ("prepenna", "prepennae"),
        ("prima ballerina", "prime ballerine"),
        ("prima donna", "prime donne"),
        ("primigravida", "primigravidae"),
        ("primordium", "primordia"),
        ("principium", "principia"),
        ("pro", "pros"),
        ("proavis", "proaves"),
        ("proboscis", "proboscides"),
        ("proceedings", "proceedings"),
        ("procoelia", "procoeliae"),
        ("prodromus", "prodromi"),
        ("proferens", "proferentes"),
        ("profluvium", "profluvia"),
        ("proglottis", "proglottides"),
        ("programma", "programmata"),
        ("progymnasium", "progymnasia"),
        ("progymnasma", "progymnasmata"),
        ("prokaryon", "prokarya"),
        ("prolabium", "prolabia"),
        ("prolegomenon", "prolegomena"),
        ("promerops", "promeropes"),
        ("propleuron", "propleura"),
        ("propodium", "propodia"),
        ("propositus", "propositi"),
        ("proprium", "propria"),
        ("propylaeum", "propylaea"),
        ("propylon", "propyla"),
        ("prora", "prorae"),
        ("prosa", "prosae"),
        ("proscenium", "proscenia"),
        ("proscolla", "proscollae"),
        ("prosecutrix", "prosecutrices"),
        ("prosencephalon", "prosencephala"),
        ("proseucha", "proseuchae"),
        ("prosodiencephalon", "prosodiencephala"),
        ("prosopium", "prosopia"),
        ("prospectus", "prospectus"),
        ("prosula", "prosulae"),
        ("protarsus", "protarsi"),
        ("prothallium", "prothallia"),
        ("prothallus", "prothalli"),
        ("protococcus", "protococci"),
        ("protoma", "protomae"),
        ("protonema", "protonemata"),
        ("prototypon", "prototypa"),
        ("protypon", "protypa"),
        ("proviso", "provisoes"),
        ("prytanis", "prytan"),
        ("psammoma", "psammomata"),
        ("pseudopodium", "pseudopodia"),
        ("pseudostoma", "pseudostomata"),
        ("psycho", "psychos"),
        ("psydracium", "psydracia"),
        ("pteroma", "pteromata"),
        ("pteropus", "pteropi"),
        ("pteryla", "pterylae"),
        ("pueblo", "pueblos"),
        ("pul", "puli"),
        ("pullus", "pulli"),
        ("pulmonarium", "pulmonaria"),
        ("pulsellum", "pulsella"),
        ("pulveratrix", "pulveratrices"),
        ("punctum", "puncta"),
        ("punto blanco", "punti blanchi"),
        ("pupa", "pupae"),
        ("purlieu", "purlieux"),
        ("Purum", "Purum"),
        ("purum", "purum"),
        ("putto", "putti"),
        ("puttony", "puttonys"),
        ("pycnidium", "pycnidia"),
        ("pycnis", "pycnides"),
        ("pycnium", "pycnia"),
        ("pyjamas", "pyjamas"),
        ("pyla", "pylae"),
        ("pyralis", "pyralides"),
        ("pyramidion", "pyramidia"),
        ("pyrexia", "pyrexiae"),
        ("pyrites", "pirrites"),
        ("pyrophorus", "pyrophori"),
        ("pyxidium", "pyxidia"),
        ("quadratrix", "quadratrices"),
        ("quaesitum", "quaesita"),
        ("quantum", "quanta"),
        ("quarto", "quartos"),
        ("quartz", "quartzes"),
        ("quid", "quid"),
        ("quinarius", "quinarii"),
        ("quinquennium", "quinquennia"),
        ("Quito", "Quitos"),
        ("rabies", "rabies"),
        ("rad", "rad"),
        ("radiale", "radialia"),
        ("radius", "radii"),
        ("radix", "radices"),
        ("ragazza", "ragazze"),
        ("ragazzo", "ragazzi"),
        ("raggare", "raggare"),
        ("ramulus", "ramuli"),
        ("ramus", "rami"),
        ("ranunculus", "ranunculi"),
        ("rara avis", "rarae aves"),
        ("razz", "razzes"),
        ("rectus", "recti"),
        ("redia", "rediae"),
        ("reductio", "reductiones"),
        ("referendum", "referenda"),
        ("refugium", "refugia"),
        ("regidor", "regidores"),
        ("regma", "regmata"),
        ("regulus", "reguli"),
        ("reich", "reiche"),
        ("rejon", "rejones"),
        ("rejoneador", "rejoneadores"),
        ("relatum", "relata"),
        ("rem", "rem"),
        ("remex", "remiges"),
        ("remous", "remou"),
        ("replum", "repla"),
        ("representamen", "representamina"),
        ("res", "res"),
        ("residuum", "residua"),
        ("responsum", "responsa"),
        ("rete", "retia"),
        ("retinaculum", "retinacula"),
        ("retinula", "retinulae"),
        ("rezident", "rezidenty"),
        ("rezidentsia", "rezidentsii"),
        ("rhino", "rhinos"),
        ("rhinoceros", "rhinoceros"),
        ("rhinophyma", "rhinophymata"),
        ("rhizoma", "rhizomata"),
        ("rhododendron", "rhododendra"),
        ("rhombohedron", "rhombohedra"),
        ("rhomboideus", "rhomboidei"),
        ("rhopalium", "rhopalia"),
        ("rhynchodaeum", "rhynchodaea"),
        ("rhythmus", "rhythmi"),
        ("ri", "ri"),
        ("ricercar", "ricercari"),
        ("ricercata", "ricercate"),
        ("ricordo", "ricordi"),
        ("rideau", "rideaux"),
        ("rilievo", "rilievos"),
        ("rimon", "rimmonim"),
        ("rione", "rioni"),
        ("risotto", "risottos"),
        ("ritardando", "ritardandi"),
        ("rite de passage", "rites de passage"),
        ("rococo", "rococos"),
        ("roe", "roe"),
        ("Rom", "Roma"),
        ("rom", "roms"),
        ("Romagnese", "Romagnese"),
        ("Roman", "Romans"),
        ("Romanese", "Romanese"),
        ("Romany", "Romanies"),
        ("romanze", "romanzen"),
        ("rond de jambe", "ronds de jambes"),
        ("rondeau", "rondeaux"),
        ("rondo", "rondos"),
        ("rostrum", "rostra"),
        ("rotula", "rotulae"),
        ("route nationale", "routes nationales"),
        ("rubashka", "rubashki"),
        ("ruga", "rugae"),
        ("ruse de guerre", "ruses de guerre"),
        ("rype", "ryper"),
        ("sabertooth", "sabertooths"),
        ("sacculus", "sacculi"),
        ("sacellum", "sacella"),
        ("sachverhalt", "sachverhalte"),
        ("Sacramento", "Sacramentos"),
        ("sacrarium", "sacraria"),
        ("sacrum", "sacra"),
        ("saddo", "saddos"),
        ("saffo", "saffi"),
        ("sago", "sagos"),
        ("sagum", "saga"),
        ("salita", "salite"),
        ("salivarium", "salivaria"),
        ("salmon", "salmon"),
        ("salpa", "salpae"),
        ("salvo", "salvos"),
        ("sambo", "samboes"),
        ("samurai", "samurai"),
        ("sanatorium", "sanatoria"),
        ("sanctum sanctorum", "sancta sanctorum"),
        ("sandr", "sandr"),
        ("Sangirese", "Sangirese"),
        ("Santiago", "Santiagos"),
        ("Sapporo", "Sapporos"),
        ("Sarajevo", "Sarajevos"),
        ("Sarawakese", "Sarawakese"),
        ("sarcina", "sarcinae"),
        ("sarcoma", "sarcomata"),
        ("sarcophagus", "sarcophagi"),
        ("sarissa", "sarissae"),
        ("sassafras", "sassafrases"),
        ("satelles", "satellites"),
        ("saxicava", "saxicavae"),
        ("sbirro", "sbirri"),
        ("scalenus", "scaleni"),
        ("scandalum magnatum", "scandala magnatum"),
        ("scapula", "scapulae"),
        ("scapus", "scapi"),
        ("scarabaeus", "scarabaei"),
        ("scarus", "scari"),
        ("scazon", "scazons"),
        ("sceat", "sceattas"),
        ("schema", "schemata"),
        ("scherzando", "scherzandos"),
        ("scherzo", "scherzos"),
        ("schisma", "schismata"),
        ("schistosomulum", "schistosomula"),
        ("schizostylis", "schizostylis"),
        ("scholium", "scholia"),
        ("sciolus", "scioli"),
        ("scirrhus", "scirrhi"),
        ("scissors", "scissors"),
        ("scolex", "scoleces"),
        ("scolopidium", "scolopidia"),
        ("scomber", "scombri"),
        ("scoria", "scoriae"),
        ("scotoma", "scotomata"),
        ("scriptorium", "scriptoria"),
        ("scudo", "scudi"),
        ("scungille", "scungilli"),
        ("scuola", "scuole"),
        ("scutellum", "scutella"),
        ("scutulum", "scutula"),
        ("scutum", "scuta"),
        ("scyphus", "scyphi"),
        ("seaquarium", "seaquaria"),
        ("secans", "secantes"),
        ("secretum", "secreta"),
        ("secundagravida", "secundagravidae"),
        ("secundigravida", "secundigravidae"),
        ("secundipara", "secundiparae"),
        ("sedes", "sedes"),
        ("sedile", "sedilia"),
        ("seecatch", "seecatchie"),
        ("seed", "seed"),
        ("Selman", "Selmans"),
        ("sema", "semata"),
        ("seminium", "seminia"),
        ("semuncia", "semunciae"),
        ("senarius", "senarii"),
        ("Senegalese", "Senegalese"),
        ("senex", "senes"),
        ("sensedatum", "sensedata"),
        ("sensillum", "sensilla"),
        ("sensoriolum", "sensoriola"),
        ("sensum", "sensa"),
        ("sententia", "sententiae"),
        ("separatrix", "separatrices"),
        ("sephardi", "sephardin"),
        ("septarium", "septaria"),
        ("septemvir", "septemviri"),
        ("septenarius", "septenarii"),
        ("septum", "septa"),
        ("sequela", "sequelae"),
        ("sequestrum", "sequestra"),
        ("seraph", "seraphim"),
        ("sericterium", "sericteria"),
        ("series", "series"),
        ("serir", "serir"),
        ("serpigo", "serpigines"),
        ("serpula", "serpulae"),
        ("serra", "serrae"),
        ("sertularia", "sertulariae"),
        ("serum", "sera"),
        ("sestertium", "sestertia"),
        ("sestiere", "sestieri"),
        ("set off", "sets off"),
        ("set out", "sets out"),
        ("set to", "sets to"),
        ("set-off", "sets-off"),
        ("set-out", "sets-out"),
        ("set-to", "sets-to"),
        ("seta", "setae"),
        ("sezession", "sezessionen"),
        ("sforzato", "sforzati"),
        ("sgraffiato", "sgraffiati"),
        ("shad", "shad"),
        ("shaman", "shamans"),
        ("shauri", "shauries"),
        ("Shavese", "Shavese"),
        ("shawabti", "shawabtiu"),
        ("Shawanese", "Shawanese"),
        ("she", "they"),
        ("shear", "shears"),
        ("shears", "shears"),
        ("sheep", "sheep"),
        ("shelf", "shelves"),
        ("shifta", "shifta"),
        ("shochet", "shochetim"),
        ("shomer", "shomrim"),
        ("short", "shorts"),
        ("shorts", "shorts"),
        ("Siamese", "Siamese"),
        ("siemens", "siemens"),
        ("Sienese", "Sienese"),
        ("siglos", "sigloi"),
        ("signum", "signa"),
        ("Sikkimese", "Sikkimese"),
        ("silbador", "silbadores"),
        ("silenus", "sileni"),
        ("silex", "silices"),
        ("siliqua", "siliquae"),
        ("silo", "silos"),
        ("Silurus", "Siluri"),
        ("simia", "simiae"),
        ("simplex", "simplices"),
        ("simpulum", "simpula"),
        ("simulacrum", "simulacra"),
        ("sinfonia", "sinfonie"),
        ("Singhalese", "Singhalese"),
        ("Sinhalese", "Sinhalese"),
        ("sinus", "sinus"),
        ("siphunculus", "siphunculi"),
        ("sipunculus", "sipunculi"),
        ("sirocco", "siroccos"),
        ("sistrum", "sistra"),
        ("situla", "situlae"),
        ("sizz", "sizzes"),
        ("ski", "skis"),
        ("snekkja", "snekkjur"),
        ("snipe", "snipe"),
        ("snooze", "snoozes"),
        ("so", "soes"),
        ("soe", "soes"),
        ("Sogdianese", "Sogdianese"),
        ("sol", "soles"),
        ("solarium", "solaria"),
        ("soldo", "soldi"),
        ("solenium", "solenia"),
        ("solfeggio", "solfeggi"),
        ("solidus", "solidos"),
        ("solo", "soli"),
        ("solstitium", "solstitia"),
        ("solvus", "solvi"),
        ("soma", "somata"),
        ("somaten", "somatenes"),
        ("sombrero", "sombreros"),
        ("Sonaman", "Sonamans"),
        ("soprano", "soprani"),
        ("soralium", "soralia"),
        ("soredium", "soredia"),
        ("sorus", "sori"),
        ("soshi", "soshi"),
        ("sotch", "sotchs"),
        ("souvlaki", "souvlakia"),
        ("spadix", "spadices"),
        ("Spaetlese", "Spaetlesen"),
        ("sparus", "spari"),
        ("spasmus", "spasmi"),
        ("spatha", "spathae"),
        ("species", "species"),
        ("spectrum", "spectra"),
        ("speculum", "specula"),
        ("sperma", "spermata"),
        ("spermarium", "spermaria"),
        ("spermatheca", "spermathecae"),
        ("spermatium", "spermatia"),
        ("spermatoon", "spermatoa"),
        ("spermogonium", "spermogonia"),
        ("sphaeridium", "sphaerideum"),
        ("sphagnum", "sphagna"),
        ("sphex", "spheges"),
        ("sphinx", "sphinges"),
        ("spiculum", "spicula"),
        ("spiraculum", "spiracula"),
        ("spirillum", "spirilla"),
        ("spondylus", "spondyli"),
        ("sporodochium", "sporodochia"),
        ("sputum", "sputa"),
        ("squadra", "squadre"),
        ("squadrist", "squadristi"),
        ("squalus", "squali"),
        ("squama", "squamae"),
        ("squilla", "squillae"),
        ("stabilimentum", "stabilimenta"),
        ("staccato", "staccatos"),
        ("stadium", "stadia"),
        ("stalactite", "stalactitae"),
        ("stamen", "stamina"),
        ("staminidium", "staminidia"),
        ("staphylococcus", "staphylococci"),
        ("star fish", "star fish"),
        ("star-fish", "star-fish"),
        ("starets", "startsy"),
        ("staretz", "startzy"),
        ("starfish", "starfish"),
        ("starosta", "starosti"),
        ("starover", "starovery"),
        ("stasimon", "stasima"),
        ("statera", "staterae"),
        ("statua", "statuae"),
        ("status", "status"),
        ("stela", "stelae"),
        ("stella", "stellae"),
        ("stemma", "stemmata"),
        ("stephanion", "stephania"),
        ("sterigma", "sterigmata"),
        ("sternebra", "sternebrae"),
        ("sterno", "sternos"),
        ("sternum", "sterna"),
        ("stichidium", "stichidia"),
        ("stichos", "stichoi"),
        ("stigma", "stigmata"),
        ("stigmaria", "stigmariae"),
        ("stiletto", "stilettoes"),
        ("stillicidium", "stillicidia"),
        ("stimulus", "stimuli"),
        ("stipes", "stipites"),
        ("stipula", "stipulae"),
        ("stirps", "stirpes"),
        ("stoa", "stoai"),
        ("stolo", "stolones"),
        ("stoma", "stomata"),
        ("stomach", "stomachs"),
        ("stomatium", "stomatia"),
        ("stomion", "stomia"),
        ("stomodaeum", "stomodaea"),
        ("storey", "storeys"),
        ("stornello", "stornelli"),
        ("strambotto", "strambotti"),
        ("strategos", "strategoi"),
        ("strategus", "strategi"),
        ("stratum", "strata"),
        ("streptococcus", "streptococci"),
        ("streptothrix", "streptothrices"),
        ("stria", "striae"),
        ("striatum", "striata"),
        ("striga", "strigae"),
        ("striola", "striolae"),
        ("strobila", "strobilae"),
        ("strobilus", "strobili"),
        ("stroma", "stromata"),
        ("stromodeum", "stromodaea"),
        ("struma", "strumae"),
        ("stryddag", "stryddae"),
        ("stucco", "stuccos"),
        ("studium generale", "studia generali"),
        ("stylo", "stylos"),
        ("stylopodium", "stylopodia"),
        ("stylus", "styli"),
        ("subbotnik", "subbotniki"),
        ("subsellium", "subsellia"),
        ("subsidium", "subsidia"),
        ("substratum", "substrata"),
        ("succinea", "succineae"),
        ("succubus", "succubi"),
        ("succus", "succi"),
        ("Sudanese", "Sudanese"),
        ("suffrutex", "suffrutices"),
        ("suggestio falsi", "suggestiones falsi"),
        ("suggestum", "suggesta"),
        ("sulcus", "sulci"),
        ("sum total", "sums total"),
        ("sum-total", "sums-total"),
        ("summa", "summae"),
        ("summum bonum", "summa bona"),
        ("summum genus", "summa genera"),
        ("sumo", "sumos"),
        ("Sundanese", "Sundanese"),
        ("supercilium", "supercilia"),
        ("superficies", "superficies"),
        ("supernova", "supernovae"),
        ("superstratum", "superstrata"),
        ("suppositum", "supposita"),
        ("supracleithrum", "supracleithra"),
        ("suprascapula", "suprascapulae"),
        ("surculus", "surculi"),
        ("surimono", "surimonos"),
        ("sustentaculum", "sustentacula"),
        ("Swahilese", "Swahilese"),
        ("swine", "swines"),
        ("switchfoot", "switchfoots"),
        ("syllabarium", "syllabaria"),
        ("syllabus", "syllabi"),
        ("symplasma", "symplasmata"),
        ("sympodium", "sympodia"),
        ("symposium", "symposia"),
        ("synaesthesia", "synaesthesiae"),
        ("synangium", "synangia"),
        ("synapticula", "synapticulae"),
        ("synaxarion", "synaxaria"),
        ("synaxarium", "synaxaria"),
        ("synaxis", "synaxes"),
        ("syncellus", "syncelli"),
        ("syncytium", "syncytia"),
        ("syndendrium", "syndendria"),
        ("synechia", "synechiae"),
        ("synedrion", "synedria"),
        ("synedrium", "synedria"),
        ("synesthesia", "synesthesiae"),
        ("syntagma", "syntagmata"),
        ("syntaxis", "syntaxes"),
        ("synthronus", "synthroni"),
        ("synusia", "synusiae"),
        ("syphiloma", "syphilomata"),
        ("syringe", "syringes"),
        ("syrinx", "syringes"),
        ("syrphus", "syrphi"),
        ("syrtis", "syrtes"),
        ("tabella", "tabellae"),
        ("tableau", "tableaux"),
        ("tablinum", "tablina"),
        ("tabula", "tabulae"),
        ("Tacoman", "Tacomans"),
        ("taenia", "taeniae"),
        ("tagma", "tagmata"),
        ("Taiko", "Taikos"),
        ("talea", "taleae"),
        ("talisman", "talismans"),
        ("talouse", "talouses"),
        ("talus", "tali"),
        ("tango", "tangoes"),
        ("tarantata", "tarantate"),
        ("tarantato", "tarantati"),
        ("tarsus", "tarsi"),
        ("taxis", "taxes"),
        ("taxon", "taxa"),
        ("tazza", "tazze"),
        ("teal", "teal"),
        ("techno", "technos"),
        ("tegmen", "tegmina"),
        ("tegmentum", "tegmenta"),
        ("tegula", "tegulae"),
        ("telamon", "telamones"),
        ("telium", "telia"),
        ("temblor", "temblores"),
        ("tempietto", "tempietti"),
        ("tempo", "tempi"),
        ("tenaculum", "tenacula"),
        ("tenderfoot", "tenderfoots"),
        ("Tenggerese", "Tenggerese"),
        ("tenia", "teniae"),
        ("tenorino", "tenorini"),
        ("tentaculum", "tentacula"),
        ("tentamen", "tentamina"),
        ("tenuis", "tenues"),
        ("tepidarium", "tepidaria"),
        ("teratoma", "teratomata"),
        ("terebellum", "terebella"),
        ("terebratula", "terebratulae"),
        ("teredo", "teredines"),
        ("tergum", "terga"),
        ("termes", "termites"),
        ("terminus", "termini"),
        ("terp", "terpen"),
        ("terrae filius", "terrae filii"),
        ("terramara", "terremare"),
        ("terrarium", "terraria"),
        ("terrazzo", "terrazzos"),
        ("territorium", "territoria"),
        ("terzetto", "terzetti"),
        ("tessella", "tessellae"),
        ("tessera", "tesserae"),
        ("testes", "testes"),
        ("testis", "testes"),
        ("testudo", "testudos"),
        ("tetanothrum", "tetanother"),
        ("tete a tete", "tete a tetes"),
        ("tete-a-tete", "tete-a-tetes"),
        ("tetracolon", "tetracola"),
        ("tetragrammaton", "tetragrammata"),
        ("tetrahedron", "tetrahedra"),
        ("tetrapleuron", "tetrapleura"),
        ("tetrasporangium", "tetrasporangia"),
        ("thalamos", "thalamoi"),
        ("thalamus", "thalami"),
        ("thanatorium", "thanatoria"),
        ("that", "those"),
        ("thaumaturgus", "thaumaturgi"),
        ("thebe", "thebe"),
        ("theca", "thecae"),
        ("theirs", "theirs"),
        ("thelycum", "thelyca"),
        ("them", "them"),
        ("thema", "themata"),
        ("themself", "themselves"),
        ("themselves", "themselves"),
        ("theologoumenon", "theologoumena"),
        ("thesaurus", "thesauri"),
        ("they", "they"),
        ("thief", "thieves"),
        ("this", "these"),
        ("tholos", "tholoi"),
        ("tholus", "tholi"),
        ("thorax", "thoraces"),
        ("thos", "thoes"),
        ("thraso", "thrasones"),
        ("thymiaterion", "thymiateria"),
        ("thymus", "thymi"),
        ("thyridium", "thyridia"),
        ("thyrsus", "thyrsi"),
        ("tibia", "tibiae"),
        ("Timorese", "Timorese"),
        ("timpano", "timpanos"),
        ("tintinnabulum", "tintinnabula"),
        ("tipula", "tipulae"),
        ("tiro", "tiros"),
        ("Tirolese", "Tirolese"),
        ("to", "toes"),
        ("tobacco", "tobaccos"),
        ("Tocharese", "Tocharese"),
        ("toe", "toes"),
        ("Togo", "Togos"),
        ("Tokyo", "Tokyos"),
        ("tolkach", "tolkachi"),
        ("tomato", "tomatoes"),
        ("tombarolo", "tombaroli"),
        ("tomium", "tomia"),
        ("tondo", "tondi"),
        ("tong", "tongs"),
        ("tongs", "tongs"),
        ("Tonkinese", "Tonkinese"),
        ("tonneau", "tonneaux"),
        ("tooth", "teeth"),
        ("topaz", "topazes"),
        ("topos", "topoi"),
        ("torero", "toreros"),
        ("toril", "toriles"),
        ("Torinese", "Torinese"),
        ("Torino", "Torinos"),
        ("torma", "torma"),
        ("Tornese", "Tornesi"),
        ("tornus", "torni"),
        ("Toronto", "Torontos"),
        ("torso", "torsos"),
        ("tortilla espanola", "tortillas espanolas"),
        ("tortrix", "tortrices"),
        ("torula", "torulae"),
        ("torulus", "toruli"),
        ("torus", "tori"),
        ("tour de force", "tours de force"),
        ("toxicum", "toxica"),
        ("toxius", "toxii"),
        ("toxoplasma", "toxoplasmata"),
        ("trabea", "trabeae"),
        ("trabecula", "trabeculae"),
        ("trachea", "tracheae"),
        ("tractatrix", "tractatrices"),
        ("tractellum", "tractella"),
        ("tractrix", "tractrices"),
        ("tragus", "tragi"),
        ("trapezium", "trapezia"),
        ("trapezius", "trapezii"),
        ("trapezohedron", "trapezohedra"),
        ("trattoria", "trattorie"),
        ("trauma", "traumata"),
        ("trellis", "trellises"),
        ("tremolo", "tremolos"),
        ("treponema", "treponemata"),
        ("trichidium", "trichidia"),
        ("trichina", "trichinae"),
        ("trichoma", "trichomata"),
        ("triclinium", "triclinia"),
        ("triens", "trientes"),
        ("triforium", "triforia"),
        ("trilby", "trilbys"),
        ("triplum", "tripla"),
        ("triradius", "triradii"),
        ("triumvir", "triumviri"),
        ("trochus", "trochi"),
        ("trockenbeerenauslese", "trockenbeerenauslesen"),
        ("tropaeolum", "tropaeola"),
        ("troparion", "troparia"),
        ("tropis", "tropides"),
        ("trousers", "trousers"),
        ("trousseau", "trousseaux"),
        ("trout", "trout"),
        ("trullo", "trulli"),
        ("trumeau", "trumeaux"),
        ("tsuba", "tsuba"),
        ("tsubo", "tsubo"),
        ("tuber", "tuberes"),
        ("tuberculoma", "tuberculomata"),
        ("tuberculum", "tubercula"),
        ("tubulus", "tubuli"),
        ("tumulus", "tumuli"),
        ("tuna", "tuna"),
        ("turbot", "turbot"),
        ("turf", "turves"),
        ("turron", "turrones"),
        ("tympanum", "tympana"),
        ("typo", "typos"),
        ("tyro", "tyros"),
        ("Tyrolese", "Tyrolese"),
        ("udarnik", "udarniki"),
        ("ulpan", "ulpanim"),
        ("ultimatum", "ultimata"),
        ("umbilicus", "umbilici"),
        ("umbo", "umbones"),
        ("umbra", "umbrae"),
        ("umwelt", "umwelten"),
        ("uncia", "unciae"),
        ("uncinus", "uncini"),
        ("uncus", "unci"),
        ("unguis", "ungues"),
        ("unio", "uniones"),
        ("uomo", "uomini"),
        ("uomo universale", "uomini universali"),
        ("uraeus", "uraei"),
        ("uredinium", "uredinia"),
        ("uredium", "uredia"),
        ("uredosorus", "uredosori"),
        ("urodaeum", "urodaea"),
        ("urodeum", "urodea"),
        ("urus", "uri"),
        ("usnea", "usneae"),
        ("ustilago", "ustilagines"),
        ("uterus", "uteri"),
        ("utricularia", "utriculariae"),
        ("uva", "uvae"),
        ("vaalpens", "vaalpensen"),
        ("vacuum", "vacua"),
        ("vagina", "vaginae"),
        ("vaginula", "vaginulae"),
        ("vagus", "vagi"),
        ("vallecula", "valleculae"),
        ("valuta", "valuten"),
        ("valvula", "valvulae"),
        ("vaporetto", "vaporetti"),
        ("vaquero", "vaqueros"),
        ("varella", "varely"),
        ("varia lectio", "variae lectiones"),
        ("varix", "varices"),
        ("vas", "vasa"),
        ("vasculitis", "vasculitides"),
        ("vasculum", "vascula"),
        ("veduta", "vedute"),
        ("veg", "veg"),
        ("vehiculum", "vehicula"),
        ("velamen", "velamina"),
        ("velarium", "velaria"),
        ("velum", "vela"),
        ("vena", "venae"),
        ("venus", "veneres"),
        ("vermicello", "vermicellos"),
        ("vermiculus", "vermiculi"),
        ("Vermontese", "Vermontese"),
        ("Veronese", "Veronese"),
        ("verruca", "verrucae"),
        ("vers libre", "vers libres"),
        ("versiculus", "versiculi"),
        ("verso", "versos"),
        ("vertebra", "vertebrae"),
        ("vertex", "vertices"),
        ("verticillus", "verticilli"),
        ("vesicula", "vesiculae"),
        ("vestigium", "vestigia"),
        ("vetturino", "vetturini"),
        ("viale", "viali"),
        ("viaticum", "viatica"),
        ("vibex", "vibices"),
        ("vibraculum", "vibracula"),
        ("vibrato", "vibratos"),
        ("vibrio", "vibriones"),
        ("Viennese", "Viennese"),
        ("Vietnamese", "Vietnamese"),
        ("vila", "vile"),
        ("villanella", "villanelle"),
        ("villino", "villini"),
        ("villus", "villi"),
        ("vinculum", "vincula"),
        ("violetta", "violette"),
        ("violoncello", "violoncellos"),
        ("virga", "virgae"),
        ("Virgo", "Virgos"),
        ("virtuoso", "virtuosi"),
        ("virus", "viruses"),
        ("vis", "vires"),
        ("viscus", "viscera"),
        ("vitellarium", "vitellaria"),
        ("vitta", "vittae"),
        ("vivarium", "vivaria"),
        ("vlakte", "vlakten"),
        ("voeu", "voeux"),
        ("volcanello", "volcanelli"),
        ("volcano", "volcanoes"),
        ("vomica", "vomicae"),
        ("vomitorium", "vomitoria"),
        ("voorbok", "voorbokke"),
        ("vorspiel", "vorspiele"),
        ("vorstellung", "vorstellungen"),
        ("vortex", "vortices"),
        ("wadi", "wadis"),
        ("wady", "wadys"),
        ("waldo", "waldoes"),
        ("waltz", "waltzes"),
        ("wanderjahr", "wanderjahre"),
        ("wandervogel", "wandervogel"),
        ("washer up", "washers up"),
        ("washer-up", "washers-up"),
        ("weirdo", "weirdos"),
        ("Wenchowese", "Wenchowese"),
        ("wharf", "wharves"),
        ("what", "what"),
        ("whatever", "whatever"),
        ("whatsoever", "whatsoever"),
        ("white staff", "white staves"),
        ("whiting", "whiting"),
        ("Whitmanese", "Whitmanese"),
        ("who", "who"),
        ("whoever", "whoever"),
        ("whom", "whom"),
        ("whomever", "whomever"),
        ("whomsoever", "whomsoever"),
        ("whose", "whose"),
        ("whosesoever", "whosesoever"),
        ("whosever", "whosever"),
        ("whosoever", "whosoever"),
        ("wife", "wives"),
        ("wildebeest", "wildebeest"),
        ("wolf", "wolves"),
        ("woman child", "women children"),
        ("woman servant", "women servants"),
        ("woman-child", "women-children"),
        ("woman-servant", "women-servants"),
        ("womanchild", "womenchildren"),
        ("wreath", "wreaths"),
        ("xanthoma", "xanthomata"),
        ("xiphiplastron", "xiphiplastra"),
        ("xiphopagus", "xiphopagi"),
        ("xiphoplastron", "xiphoplastra"),
        ("xoanon", "xoana"),
        ("xystus", "xysti"),
        ("Yakiman", "Yakimans"),
        ("Yamoussoukro", "Yamoussoukros"),
        ("yarraman", "yarramans"),
        ("Yengeese", "Yengeese"),
        ("yes", "yeses"),
        ("yo", "yoes"),
        ("yo yo", "yo yos"),
        ("yo-yo", "yo-yos"),
        ("yoe", "yoes"),
        ("Yokohaman", "Yokohamans"),
        ("you", "you"),
        ("yours", "yours"),
        ("yourself", "yourselves"),
        ("Yuman", "Yumans"),
        ("Yunnanese", "Yunnanese"),
        ("yuo", "yuon"),
        ("zadruga", "zadruge"),
        ("zeitgeber", "zeitgebers"),
        ("zemirah", "zemirot"),
        ("zeppole", "zeppoli"),
        ("zero", "zeros"),
        ("Zibo", "Zibos"),
        ("zingano", "zingani"),
        ("zita", "zite"),
        ("zitella", "zitelle"),
        ("zizz", "zizzes"),
        ("zloty", "zloty"),
        ("zoaea", "zoaeae"),
        ("zoarium", "zoaria"),
        ("zoea", "zoeae"),
        ("zooea", "zooeae"),
        ("zooecium", "zooecia"),
        ("zoon", "zoa"),
        ("zoophorus", "zoophori"),
        ("zoosporangium", "zoosporangia"),
        ("zophorus", "zophori"),
        ("zucca", "zucche"),
        ("zucchini", "zucchini"),
        ("zuppa", "zuppe"),
        ("zuz", "zuzim"),
        ("zygantrum", "zygantra"),
        ("zygoma", "zygomata"),
        ("zygon", "zyga"),
    ]
    .iter()
    .cloned()
    .collect()
});

/// Converts a noun to its classical plural form. Whenever possible, this
/// function returns static data or a reference to the string it was given,
/// rather than allocating a new `String`.
///
/// The case of the returned word will not necessarily match the case of the
/// original word, and when given shout case like "BUSINESSPERSON" you may get
/// odd casing results like "BUSINESSpersons". You are encouraged to always
/// pass words in their poroper case, either lower case or title case as
/// appropriate.
pub fn convert_to_classical_plural(word: &str) -> Cow<'_, str> {
    #[cfg(feature = "debug")]
    println!("convert_to_classical_plural({})", word);

    if word.is_empty() {
        #[cfg(feature = "debug")]
        println!("  word is empty");
        return Cow::Borrowed("");
    }

    if let Some(p) = CLASSICAL_PLURAL_OF.get(word) {
        #[cfg(feature = "debug")]
        println!("  found word '{}' in CLASSICAL_PLURAL_OF", word);
        return Cow::Borrowed(p);
    }
    if let Some(p) = CLASSICAL_PLURAL_OF.get(word.to_lowercase().as_str()) {
        #[cfg(feature = "debug")]
        println!("  found lc word '{}' in CLASSICAL_PLURAL_OF", word);
        return Cow::Borrowed(p);
    }
    if word.len() > 1 {
        let tc_word = to_titlecase(word);
        if let Some(p) = CLASSICAL_PLURAL_OF.get(tc_word.as_str()) {
            #[cfg(feature = "debug")]
            println!("  found tc word '{}' in CLASSICAL_PLURAL_OF", word);
            return Cow::Borrowed(p);
        }
    }

    if is_plural(word) && !is_singular(word) {
        #[cfg(feature = "debug")]
        println!("  word '{}' is already plural and is not singular", word);
        return Cow::Owned(word.to_string());
    }

    if PLURAL_POSSESSIVE_REGEX.is_match(word) {
        #[cfg(feature = "debug")]
        println!("  word '{}' matches plural possessive regex", word);
        return crate::adjective::Adjective::new(word).plural();
    }

    // (?i)\A(.*)stave$
    if let Some(caps) = SINGULAR_RECOGNIZERS[0].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}staves"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 0) and became {}"#,
            word, SINGULAR_RECOGNIZERS[0].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)staff$
    if let Some(caps) = SINGULAR_RECOGNIZERS[1].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}staves"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 1) and became {}"#,
            word, SINGULAR_RECOGNIZERS[1].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)genus$
    if let Some(caps) = SINGULAR_RECOGNIZERS[2].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}genera"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 2) and became {}"#,
            word, SINGULAR_RECOGNIZERS[2].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)person$
    if let Some(caps) = SINGULAR_RECOGNIZERS[3].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}persons"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 3) and became {}"#,
            word, SINGULAR_RECOGNIZERS[3].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)hertz$
    if let Some(caps) = SINGULAR_RECOGNIZERS[4].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}hertz"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 4) and became {}"#,
            word, SINGULAR_RECOGNIZERS[4].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)lux$
    if let Some(caps) = SINGULAR_RECOGNIZERS[5].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}lux"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 5) and became {}"#,
            word, SINGULAR_RECOGNIZERS[5].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)siemens$
    if let Some(caps) = SINGULAR_RECOGNIZERS[6].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}siemens"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 6) and became {}"#,
            word, SINGULAR_RECOGNIZERS[6].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)brother$
    if let Some(caps) = SINGULAR_RECOGNIZERS[7].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}brethren"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 7) and became {}"#,
            word, SINGULAR_RECOGNIZERS[7].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)child$
    if let Some(caps) = SINGULAR_RECOGNIZERS[8].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}children"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 8) and became {}"#,
            word, SINGULAR_RECOGNIZERS[8].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)cow$
    if let Some(caps) = SINGULAR_RECOGNIZERS[9].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}kine"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 9) and became {}"#,
            word, SINGULAR_RECOGNIZERS[9].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)-ox$
    if let Some(caps) = SINGULAR_RECOGNIZERS[10].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}-oxen"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 10) and became {}"#,
            word, SINGULAR_RECOGNIZERS[10].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)mensch$
    if let Some(caps) = SINGULAR_RECOGNIZERS[11].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}menschen"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 11) and became {}"#,
            word, SINGULAR_RECOGNIZERS[11].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)elf$
    if let Some(caps) = SINGULAR_RECOGNIZERS[12].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}elves"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 12) and became {}"#,
            word, SINGULAR_RECOGNIZERS[12].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)hoof$
    if let Some(caps) = SINGULAR_RECOGNIZERS[13].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}hooves"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 13) and became {}"#,
            word, SINGULAR_RECOGNIZERS[13].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)knife$
    if let Some(caps) = SINGULAR_RECOGNIZERS[14].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}knives"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 14) and became {}"#,
            word, SINGULAR_RECOGNIZERS[14].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)leaf$
    if let Some(caps) = SINGULAR_RECOGNIZERS[15].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}leaves"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 15) and became {}"#,
            word, SINGULAR_RECOGNIZERS[15].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)life$
    if let Some(caps) = SINGULAR_RECOGNIZERS[16].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}lives"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 16) and became {}"#,
            word, SINGULAR_RECOGNIZERS[16].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)loaf$
    if let Some(caps) = SINGULAR_RECOGNIZERS[17].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}loaves"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 17) and became {}"#,
            word, SINGULAR_RECOGNIZERS[17].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)shelf$
    if let Some(caps) = SINGULAR_RECOGNIZERS[18].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}shelves"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 18) and became {}"#,
            word, SINGULAR_RECOGNIZERS[18].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)thief$
    if let Some(caps) = SINGULAR_RECOGNIZERS[19].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}thieves"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 19) and became {}"#,
            word, SINGULAR_RECOGNIZERS[19].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)wife$
    if let Some(caps) = SINGULAR_RECOGNIZERS[20].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}wives"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 20) and became {}"#,
            word, SINGULAR_RECOGNIZERS[20].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)wolf$
    if let Some(caps) = SINGULAR_RECOGNIZERS[21].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}wolves"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 21) and became {}"#,
            word, SINGULAR_RECOGNIZERS[21].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)human$
    if let Some(caps) = SINGULAR_RECOGNIZERS[22].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}humans"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 22) and became {}"#,
            word, SINGULAR_RECOGNIZERS[22].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)foot$
    if let Some(caps) = SINGULAR_RECOGNIZERS[23].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}feet"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 23) and became {}"#,
            word, SINGULAR_RECOGNIZERS[23].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)goose$
    if let Some(caps) = SINGULAR_RECOGNIZERS[24].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}geese"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 24) and became {}"#,
            word, SINGULAR_RECOGNIZERS[24].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)louse$
    if let Some(caps) = SINGULAR_RECOGNIZERS[25].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}lice"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 25) and became {}"#,
            word, SINGULAR_RECOGNIZERS[25].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)man$
    if let Some(caps) = SINGULAR_RECOGNIZERS[26].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}men"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 26) and became {}"#,
            word, SINGULAR_RECOGNIZERS[26].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)mouse$
    if let Some(caps) = SINGULAR_RECOGNIZERS[27].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}mice"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 27) and became {}"#,
            word, SINGULAR_RECOGNIZERS[27].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)tooth$
    if let Some(caps) = SINGULAR_RECOGNIZERS[28].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}teeth"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 28) and became {}"#,
            word, SINGULAR_RECOGNIZERS[28].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)buzz$
    if let Some(caps) = SINGULAR_RECOGNIZERS[29].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}buzzes"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 29) and became {}"#,
            word, SINGULAR_RECOGNIZERS[29].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)fizz$
    if let Some(caps) = SINGULAR_RECOGNIZERS[30].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}fizzes"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 30) and became {}"#,
            word, SINGULAR_RECOGNIZERS[30].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)frizz$
    if let Some(caps) = SINGULAR_RECOGNIZERS[31].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}frizzes"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 31) and became {}"#,
            word, SINGULAR_RECOGNIZERS[31].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)fuzz$
    if let Some(caps) = SINGULAR_RECOGNIZERS[32].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}fuzzes"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 32) and became {}"#,
            word, SINGULAR_RECOGNIZERS[32].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)jazz$
    if let Some(caps) = SINGULAR_RECOGNIZERS[33].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}jazzes"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 33) and became {}"#,
            word, SINGULAR_RECOGNIZERS[33].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)proboscis$
    if let Some(caps) = SINGULAR_RECOGNIZERS[34].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}proboscides"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 34) and became {}"#,
            word, SINGULAR_RECOGNIZERS[34].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)bema$
    if let Some(caps) = SINGULAR_RECOGNIZERS[35].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}bemata"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 35) and became {}"#,
            word, SINGULAR_RECOGNIZERS[35].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)drama$
    if let Some(caps) = SINGULAR_RECOGNIZERS[36].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}dramas"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 36) and became {}"#,
            word, SINGULAR_RECOGNIZERS[36].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)edema$
    if let Some(caps) = SINGULAR_RECOGNIZERS[37].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}edemata"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 37) and became {}"#,
            word, SINGULAR_RECOGNIZERS[37].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)lemma$
    if let Some(caps) = SINGULAR_RECOGNIZERS[38].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}lemmata"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 38) and became {}"#,
            word, SINGULAR_RECOGNIZERS[38].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)sarcoma$
    if let Some(caps) = SINGULAR_RECOGNIZERS[39].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}sarcomata"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 39) and became {}"#,
            word, SINGULAR_RECOGNIZERS[39].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)stoma$
    if let Some(caps) = SINGULAR_RECOGNIZERS[40].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}stomata"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 40) and became {}"#,
            word, SINGULAR_RECOGNIZERS[40].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)nova$
    if let Some(caps) = SINGULAR_RECOGNIZERS[41].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}novae"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 41) and became {}"#,
            word, SINGULAR_RECOGNIZERS[41].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)umbra$
    if let Some(caps) = SINGULAR_RECOGNIZERS[42].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}umbrae"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 42) and became {}"#,
            word, SINGULAR_RECOGNIZERS[42].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)lumen$
    if let Some(caps) = SINGULAR_RECOGNIZERS[43].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}lumina"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 43) and became {}"#,
            word, SINGULAR_RECOGNIZERS[43].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)datum$
    if let Some(caps) = SINGULAR_RECOGNIZERS[44].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}data"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 44) and became {}"#,
            word, SINGULAR_RECOGNIZERS[44].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)stratum$
    if let Some(caps) = SINGULAR_RECOGNIZERS[45].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}strata"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 45) and became {}"#,
            word, SINGULAR_RECOGNIZERS[45].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)bacillus$
    if let Some(caps) = SINGULAR_RECOGNIZERS[46].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}bacilli"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 46) and became {}"#,
            word, SINGULAR_RECOGNIZERS[46].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)nucleus$
    if let Some(caps) = SINGULAR_RECOGNIZERS[47].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}nuclei"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 47) and became {}"#,
            word, SINGULAR_RECOGNIZERS[47].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)hedron$
    if let Some(caps) = SINGULAR_RECOGNIZERS[48].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}hedra"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 48) and became {}"#,
            word, SINGULAR_RECOGNIZERS[48].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)helion$
    if let Some(caps) = SINGULAR_RECOGNIZERS[49].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}helia"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 49) and became {}"#,
            word, SINGULAR_RECOGNIZERS[49].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)legomenon$
    if let Some(caps) = SINGULAR_RECOGNIZERS[50].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}legomena"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 50) and became {}"#,
            word, SINGULAR_RECOGNIZERS[50].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)phenomenon$
    if let Some(caps) = SINGULAR_RECOGNIZERS[51].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}phenomena"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 51) and became {}"#,
            word, SINGULAR_RECOGNIZERS[51].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)helix$
    if let Some(caps) = SINGULAR_RECOGNIZERS[52].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}helices"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 52) and became {}"#,
            word, SINGULAR_RECOGNIZERS[52].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)measles$
    if let Some(caps) = SINGULAR_RECOGNIZERS[53].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}measles"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 53) and became {}"#,
            word, SINGULAR_RECOGNIZERS[53].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)pox$
    if let Some(caps) = SINGULAR_RECOGNIZERS[54].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}pox"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 54) and became {}"#,
            word, SINGULAR_RECOGNIZERS[54].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)bass$
    if let Some(caps) = SINGULAR_RECOGNIZERS[55].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}bass"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 55) and became {}"#,
            word, SINGULAR_RECOGNIZERS[55].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)deer$
    if let Some(caps) = SINGULAR_RECOGNIZERS[56].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}deer"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 56) and became {}"#,
            word, SINGULAR_RECOGNIZERS[56].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)fish$
    if let Some(caps) = SINGULAR_RECOGNIZERS[57].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}fish"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 57) and became {}"#,
            word, SINGULAR_RECOGNIZERS[57].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)fowl$
    if let Some(caps) = SINGULAR_RECOGNIZERS[58].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}fowl"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 58) and became {}"#,
            word, SINGULAR_RECOGNIZERS[58].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)sheep$
    if let Some(caps) = SINGULAR_RECOGNIZERS[59].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}sheep"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 59) and became {}"#,
            word, SINGULAR_RECOGNIZERS[59].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)wildebeest$
    if let Some(caps) = SINGULAR_RECOGNIZERS[60].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}wildebeest"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 60) and became {}"#,
            word, SINGULAR_RECOGNIZERS[60].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)craft$
    if let Some(caps) = SINGULAR_RECOGNIZERS[61].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}craft"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 61) and became {}"#,
            word, SINGULAR_RECOGNIZERS[61].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)gas$
    if let Some(caps) = SINGULAR_RECOGNIZERS[62].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}gases"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 62) and became {}"#,
            word, SINGULAR_RECOGNIZERS[62].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)glottis$
    if let Some(caps) = SINGULAR_RECOGNIZERS[63].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}glottises"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 63) and became {}"#,
            word, SINGULAR_RECOGNIZERS[63].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)star general$
    if let Some(caps) = SINGULAR_RECOGNIZERS[64].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}star generals"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 64) and became {}"#,
            word, SINGULAR_RECOGNIZERS[64].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*?)(?:-general)$
    if let Some(caps) = SINGULAR_RECOGNIZERS[65].regex.captures(word) {
        let cap1 = caps.get(1).unwrap().as_str();
        let plural = if is_singular(cap1) {
            convert_to_classical_plural(cap1).to_string()
        } else {
            cap1.to_string()
        };
        let mut new_word = String::new();
        new_word.push_str(&plural);
        new_word.push_str("-general");
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched recursive pattern '(SING)-general' and became {}"#,
            word, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A({preposition_re})(?: it)$
    if let Some(caps) = SINGULAR_RECOGNIZERS[66].regex.captures(word) {
        let cap1 = caps.get(1).unwrap().as_str();
        let mut new_word = String::new();
        new_word.push_str(cap1);
        new_word.push_str(" them");
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched recursive pattern '(PREP) it' and became {}"#,
            word, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(?:son-of-a-)(.*?)$
    if let Some(caps) = SINGULAR_RECOGNIZERS[67].regex.captures(word) {
        let cap1 = caps.get(1).unwrap().as_str();
        let plural = if is_singular(cap1) {
            convert_to_classical_plural(cap1).to_string()
        } else {
            cap1.to_string()
        };
        let mut new_word = String::new();
        new_word.push_str("sons-of-");
        new_word.push_str(&plural);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched recursive pattern 'son-of-a-(SING)' and became {}"#,
            word, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(?:son of a )(.*?)$
    if let Some(caps) = SINGULAR_RECOGNIZERS[68].regex.captures(word) {
        let cap1 = caps.get(1).unwrap().as_str();
        let plural = if is_singular(cap1) {
            convert_to_classical_plural(cap1).to_string()
        } else {
            cap1.to_string()
        };
        let mut new_word = String::new();
        new_word.push_str("sons of ");
        new_word.push_str(&plural);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched recursive pattern 'son of a (SING)' and became {}"#,
            word, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*?)(?:-)({preposition_re})(?:-)(.*?)$
    if let Some(caps) = SINGULAR_RECOGNIZERS[69].regex.captures(word) {
        let cap1 = caps.get(1).unwrap().as_str();
        let plural = if is_singular(cap1) {
            convert_to_classical_plural(cap1).to_string()
        } else {
            cap1.to_string()
        };
        let cap2 = caps.get(2).unwrap().as_str();
        let cap3 = caps.get(3).unwrap().as_str();
        let mut new_word = String::new();
        new_word.push_str(&plural);
        new_word.push('-');
        new_word.push_str(cap2);
        new_word.push('-');
        new_word.push_str(cap3);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched recursive pattern '(SING)-(PREP)-*' and became {}"#,
            word, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*?)(?: )({preposition_re})(?: )(.*?)$
    if let Some(caps) = SINGULAR_RECOGNIZERS[70].regex.captures(word) {
        let cap1 = caps.get(1).unwrap().as_str();
        let plural = if is_singular(cap1) {
            convert_to_classical_plural(cap1).to_string()
        } else {
            cap1.to_string()
        };
        let cap2 = caps.get(2).unwrap().as_str();
        let cap3 = caps.get(3).unwrap().as_str();
        let mut new_word = String::new();
        new_word.push_str(&plural);
        new_word.push(' ');
        new_word.push_str(cap2);
        new_word.push(' ');
        new_word.push_str(cap3);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched recursive pattern '(SING) (PREP) *' and became {}"#,
            word, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A({preposition_re})(?:-)(.*?)$
    if let Some(caps) = SINGULAR_RECOGNIZERS[71].regex.captures(word) {
        let cap1 = caps.get(1).unwrap().as_str();
        let cap2 = caps.get(2).unwrap().as_str();
        let plural = if is_singular(cap2) {
            convert_to_classical_plural(cap2).to_string()
        } else {
            cap2.to_string()
        };
        let mut new_word = String::new();
        new_word.push_str(cap1);
        new_word.push('-');
        new_word.push_str(&plural);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched recursive pattern '(PREP)-(SING)' and became {}"#,
            word, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A({preposition_re})(?: )(.*?)$
    if let Some(caps) = SINGULAR_RECOGNIZERS[72].regex.captures(word) {
        let cap1 = caps.get(1).unwrap().as_str();
        let cap2 = caps.get(2).unwrap().as_str();
        let plural = if is_singular(cap2) {
            convert_to_classical_plural(cap2).to_string()
        } else {
            cap2.to_string()
        };
        let mut new_word = String::new();
        new_word.push_str(cap1);
        new_word.push(' ');
        new_word.push_str(&plural);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched recursive pattern '(PREP) (SING)' and became {}"#,
            word, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*?)(?:-errant)$
    if let Some(caps) = SINGULAR_RECOGNIZERS[73].regex.captures(word) {
        let cap1 = caps.get(1).unwrap().as_str();
        let plural = if is_singular(cap1) {
            convert_to_classical_plural(cap1).to_string()
        } else {
            cap1.to_string()
        };
        let mut new_word = String::new();
        new_word.push_str(&plural);
        new_word.push_str("-errant");
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched recursive pattern '(SING)-errant' and became {}"#,
            word, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*?)(?: errant)$
    if let Some(caps) = SINGULAR_RECOGNIZERS[74].regex.captures(word) {
        let cap1 = caps.get(1).unwrap().as_str();
        let plural = if is_singular(cap1) {
            convert_to_classical_plural(cap1).to_string()
        } else {
            cap1.to_string()
        };
        let mut new_word = String::new();
        new_word.push_str(&plural);
        new_word.push_str(" errant");
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched recursive pattern '(SING) errant' and became {}"#,
            word, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*?)(?:-)({preposition_re})$
    if let Some(caps) = SINGULAR_RECOGNIZERS[75].regex.captures(word) {
        let cap1 = caps.get(1).unwrap().as_str();
        let plural = if is_singular(cap1) {
            convert_to_classical_plural(cap1).to_string()
        } else {
            cap1.to_string()
        };
        let cap2 = caps.get(2).unwrap().as_str();
        let mut new_word = String::new();
        new_word.push_str(&plural);
        new_word.push('-');
        new_word.push_str(cap2);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched recursive pattern '(SING)-(PREP)' and became {}"#,
            word, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*?)(?: )({preposition_re})$
    if let Some(caps) = SINGULAR_RECOGNIZERS[76].regex.captures(word) {
        let cap1 = caps.get(1).unwrap().as_str();
        let plural = if is_singular(cap1) {
            convert_to_classical_plural(cap1).to_string()
        } else {
            cap1.to_string()
        };
        let cap2 = caps.get(2).unwrap().as_str();
        let mut new_word = String::new();
        new_word.push_str(&plural);
        new_word.push(' ');
        new_word.push_str(cap2);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched recursive pattern '(SING) (PREP)' and became {}"#,
            word, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+[aeiou])o$
    if let Some(caps) = SINGULAR_RECOGNIZERS[77].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}os"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 77) and became {}"#,
            word, SINGULAR_RECOGNIZERS[77].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+[aeo])lf$
    if let Some(caps) = SINGULAR_RECOGNIZERS[78].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}lves"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 78) and became {}"#,
            word, SINGULAR_RECOGNIZERS[78].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+[aiy])nx$
    if let Some(caps) = SINGULAR_RECOGNIZERS[79].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}nges"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 79) and became {}"#,
            word, SINGULAR_RECOGNIZERS[79].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)arf$
    if let Some(caps) = SINGULAR_RECOGNIZERS[80].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}arves"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 80) and became {}"#,
            word, SINGULAR_RECOGNIZERS[80].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)ceps$
    if let Some(caps) = SINGULAR_RECOGNIZERS[81].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ceps"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 81) and became {}"#,
            word, SINGULAR_RECOGNIZERS[81].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+[cs])h$
    if let Some(caps) = SINGULAR_RECOGNIZERS[82].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}hes"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 82) and became {}"#,
            word, SINGULAR_RECOGNIZERS[82].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)eaf$
    if let Some(caps) = SINGULAR_RECOGNIZERS[83].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}eaves"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 83) and became {}"#,
            word, SINGULAR_RECOGNIZERS[83].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)eau$
    if let Some(caps) = SINGULAR_RECOGNIZERS[84].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}eaux"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 84) and became {}"#,
            word, SINGULAR_RECOGNIZERS[84].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)ieu$
    if let Some(caps) = SINGULAR_RECOGNIZERS[85].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ieux"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 85) and became {}"#,
            word, SINGULAR_RECOGNIZERS[85].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)nife$
    if let Some(caps) = SINGULAR_RECOGNIZERS[86].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}nives"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 86) and became {}"#,
            word, SINGULAR_RECOGNIZERS[86].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)oe$
    if let Some(caps) = SINGULAR_RECOGNIZERS[87].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}oes"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 87) and became {}"#,
            word, SINGULAR_RECOGNIZERS[87].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)o$
    if let Some(caps) = SINGULAR_RECOGNIZERS[88].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}oes"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 88) and became {}"#,
            word, SINGULAR_RECOGNIZERS[88].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)quy$
    if let Some(caps) = SINGULAR_RECOGNIZERS[89].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}quies"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 89) and became {}"#,
            word, SINGULAR_RECOGNIZERS[89].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+[aeiou])y$
    if let Some(caps) = SINGULAR_RECOGNIZERS[90].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ys"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 90) and became {}"#,
            word, SINGULAR_RECOGNIZERS[90].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)ss$
    if let Some(caps) = SINGULAR_RECOGNIZERS[91].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}sses"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 91) and became {}"#,
            word, SINGULAR_RECOGNIZERS[91].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)orse$
    if let Some(caps) = SINGULAR_RECOGNIZERS[92].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}orses"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 92) and became {}"#,
            word, SINGULAR_RECOGNIZERS[92].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+[au])rse$
    if let Some(caps) = SINGULAR_RECOGNIZERS[93].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}rses"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 93) and became {}"#,
            word, SINGULAR_RECOGNIZERS[93].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)nse$
    if let Some(caps) = SINGULAR_RECOGNIZERS[94].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}nses"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 94) and became {}"#,
            word, SINGULAR_RECOGNIZERS[94].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+[^ns])sis$
    if let Some(caps) = SINGULAR_RECOGNIZERS[95].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ses"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 95) and became {}"#,
            word, SINGULAR_RECOGNIZERS[95].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)trix$
    if let Some(caps) = SINGULAR_RECOGNIZERS[96].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}trices"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 96) and became {}"#,
            word, SINGULAR_RECOGNIZERS[96].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)us$
    if let Some(caps) = SINGULAR_RECOGNIZERS[97].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}uses"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 97) and became {}"#,
            word, SINGULAR_RECOGNIZERS[97].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)x$
    if let Some(caps) = SINGULAR_RECOGNIZERS[98].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}xes"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 98) and became {}"#,
            word, SINGULAR_RECOGNIZERS[98].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)y$
    if let Some(caps) = SINGULAR_RECOGNIZERS[99].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ies"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 99) and became {}"#,
            word, SINGULAR_RECOGNIZERS[99].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)z$
    if let Some(caps) = SINGULAR_RECOGNIZERS[100].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}zzes"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 100) and became {}"#,
            word, SINGULAR_RECOGNIZERS[100].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)zoon$
    if let Some(caps) = SINGULAR_RECOGNIZERS[101].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}zoa"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 101) and became {}"#,
            word, SINGULAR_RECOGNIZERS[101].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)s$
    if let Some(caps) = SINGULAR_RECOGNIZERS[102].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ses"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 102) and became {}"#,
            word, SINGULAR_RECOGNIZERS[102].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)$
    if let Some(caps) = SINGULAR_RECOGNIZERS[103].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}s"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 103) and became {}"#,
            word, SINGULAR_RECOGNIZERS[103].regex, new_word
        );
        return Cow::Owned(new_word);
    }

    #[cfg(feature = "debug")]
    println!("  appending 's' to word '{}' ", word);
    Cow::Owned(add_plural_s(word))
}

fn add_plural_s(word: &str) -> String {
    let mut plural = word.to_string();
    plural.push('s');
    plural
}

static SINGULAR_OF: Lazy<HashMap<&'static str, &'static str>> = Lazy::new(|| {
    [
        (" oxen", " ox"),
        ("-oxen", "-ox"),
        ("[^ns]ses", "[^ns]sis"),
        ("[aeo]lves", "[aeo]lf"),
        ("abacuses", "abacus"),
        ("aboiteaus", "aboiteau"),
        ("aboiteaux", "aboiteau"),
        ("abortoria", "abortorium"),
        ("abortuses", "abortus"),
        ("abscissae", "abscissa"),
        ("abscissas", "abscissa"),
        ("abstracta", "abstractum"),
        ("acari", "acarus"),
        ("Achinese", "Achinese"),
        ("aciculae", "acicula"),
        ("acini", "acinus"),
        ("acroamata", "acroama"),
        ("acropolises", "acropolis"),
        ("actiniae", "actinia"),
        ("actinias", "actinia"),
        ("aculei", "aculeus"),
        ("addenda", "addendum"),
        ("addendums", "addendum"),
        ("adieus", "adieu"),
        ("adieux", "adieu"),
        ("adjutant generals", "adjutant general"),
        ("adminicula", "adminiculum"),
        ("ados", "ado"),
        ("advisoes", "adviso"),
        ("adyta", "adytum"),
        ("aecidia", "aecidium"),
        ("aegises", "aegis"),
        ("aelfe", "aelf"),
        ("aficionados", "aficionado"),
        ("afreeti", "afreet"),
        ("afreets", "afreet"),
        ("afriti", "afrit"),
        ("afrits", "afrit"),
        ("agapae", "agape"),
        ("agapes", "agape"),
        ("agenda", "agendum"),
        ("agends", "agend"),
        ("agents provocateurs", "agent provocateur"),
        ("aggros", "aggro"),
        ("agones", "agon"),
        ("agorae", "agora"),
        ("agrogoroda", "agrogorod"),
        ("aides de camp", "aide de camp"),
        ("aides-de-camp", "aide-de-camp"),
        ("alae", "ala"),
        ("alani", "alan"),
        ("alans", "alan"),
        ("alberghi", "albergo"),
        ("albinos", "albino"),
        ("ale wives", "ale wife"),
        ("ale-wives", "ale-wife"),
        ("Alfurese", "Alfurese"),
        ("algae", "alga"),
        ("alguaciles", "alguacil"),
        ("alguacils", "alguacil"),
        ("aliases", "alias"),
        ("allargandi", "allargando"),
        ("allegros", "allegro"),
        ("alluvia", "alluvium"),
        ("alluviums", "alluvium"),
        ("alti", "alto"),
        ("alto relievos", "alto relievo"),
        ("alto-relievos", "alto-relievo"),
        ("altorelievos", "altorelievo"),
        ("altos", "alto"),
        ("alulae", "alula"),
        ("alumnae", "alumna"),
        ("alumni", "alumnus"),
        ("alveoli", "alveolus"),
        ("Amboinese", "Amboinese"),
        ("ambones", "ambo"),
        ("ambos", "ambo"),
        ("ambulacra", "ambulacrum"),
        ("ambuscadoes", "ambuscado"),
        ("ambuscados", "ambuscado"),
        ("amenta", "amentum"),
        ("Americanese", "Americanese"),
        ("amici curiae", "amicus curiae"),
        ("ammos", "ammo"),
        ("amoebae", "amoeba"),
        ("amoebas", "amoeba"),
        ("amoretti", "amoretto"),
        ("amorini", "amorino"),
        ("Amoyese", "Amoyese"),
        ("amphipneusta", "amphipneust"),
        ("amphipneusts", "amphipneust"),
        ("amphorae", "amphora"),
        ("anacolutha", "anacoluthon"),
        ("anacoluthons", "anacoluthon"),
        ("anathemas", "anathema"),
        ("anathemata", "anathema"),
        ("ancone", "ancona"),
        ("Andamanese", "Andamanese"),
        ("angiomata", "angioma"),
        ("Angolese", "Angolese"),
        ("angustiae", "angustia"),
        ("anlagen", "anlage"),
        ("anlages", "anlage"),
        ("Annamese", "Annamese"),
        ("antae", "anta"),
        ("Antananarivos", "Antananarivo"),
        ("antefixa", "antefix"),
        ("antennae", "antenna"),
        ("antennas", "antenna"),
        ("anthemia", "anthemion"),
        ("anthodia", "anthodium"),
        ("anti sera", "anti serum"),
        ("anti serums", "anti serum"),
        ("anti-sera", "anti-serum"),
        ("anti-serums", "anti-serum"),
        ("antifixes", "antefix"),
        ("antisera", "antiserum"),
        ("antra", "antrum"),
        ("apexes", "apex"),
        ("aphelia", "aphelion"),
        ("aphides", "aphis"),
        ("apices", "apex"),
        ("apothecia", "apothecium"),
        ("apparatchiki", "apparatchik"),
        ("apparatchiks", "apparatchik"),
        ("apparatus", "apparatus"),
        ("apparatuses", "apparatus"),
        ("appendices", "appendix"),
        ("appendixes", "appendix"),
        ("appressoria", "appressorium"),
        ("apsides", "apsis"),
        ("apteria", "apterium"),
        ("aptychi", "aptychus"),
        ("aquaria", "aquarium"),
        ("aquariums", "aquarium"),
        ("Aragonese", "Aragonese"),
        ("Arakanese", "Arakanese"),
        ("arangoes", "arango"),
        ("arboreta", "arboretum"),
        ("arcana", "arcanum"),
        ("archegonia", "archegonium"),
        ("archipelagoes", "archipelago"),
        ("archipelagos", "archipelago"),
        ("arcosolia", "arcosolium"),
        ("areolae", "areola"),
        ("argumenta", "argumentum"),
        ("aristae", "arista"),
        ("armadillos", "armadillo"),
        ("arrhae", "arrha"),
        ("arves", "arf"),
        ("asbestoses", "asbestos"),
        ("ascidia", "ascidium"),
        ("Asherahs", "Asherah"),
        ("Asherim", "Asherah"),
        ("Assamese", "Assamese"),
        ("asteriae", "asterias"),
        ("astrocytomas", "astrocytoma"),
        ("astrocytomata", "astrocytoma"),
        ("asyla", "asylum"),
        ("asylums", "asylum"),
        ("asyndeta", "asyndeton"),
        ("atamans", "ataman"),
        ("Atlantes", "Atlas"),
        ("atlantes", "atlas"),
        ("atlases", "atlas"),
        ("atmas", "atman"),
        ("aurei", "aureus"),
        ("aurorae", "aurora"),
        ("auroras", "aurora"),
        ("Auslesen", "Auslese"),
        ("auslesen", "auslese"),
        ("ausleses", "auslese"),
        ("auspices", "auspex"),
        ("auto de fes", "auto de fe"),
        ("auto-de-fes", "auto-de-fe"),
        ("autobahnen", "autobahn"),
        ("autobahns", "autobahn"),
        ("autochthones", "autochthon"),
        ("autochthons", "autochthon"),
        ("autos", "auto"),
        ("autos de fes", "auto de fe"),
        ("autos-de-fes", "auto-de-fe"),
        ("autostradas", "autostrada"),
        ("autostrade", "autostrada"),
        ("avicularia", "avicularium"),
        ("Avignonese", "Avignonese"),
        ("avisos", "aviso"),
        ("avocados", "avocado"),
        ("axes", "axe"),
        ("axillae", "axilla"),
        ("axones", "axon"),
        ("axons", "axon"),
        ("axopodia", "axopodium"),
        ("Azerbaijanese", "Azerbaijanese"),
        ("baalim", "baal"),
        ("baals", "baal"),
        ("bacilli", "bacillus"),
        ("bacteria", "bacterium"),
        ("Bahamans", "Bahaman"),
        ("bajocchi", "bajocco"),
        ("Balinese", "Balinese"),
        ("ballabili", "ballabile"),
        ("ballate", "ballata"),
        ("ballerinas", "ballerina"),
        ("ballerine", "ballerina"),
        ("ballistae", "ballista"),
        ("ballistas", "ballista"),
        ("Bamakos", "Bamako"),
        ("bandeaus", "bandeau"),
        ("bandeaux", "bandeau"),
        ("bandits", "bandit"),
        ("banditti", "bandit"),
        ("Barquisimetos", "Barquisimeto"),
        ("barricoes", "barrico"),
        ("bases", "base"),
        ("basilicae", "basilica"),
        ("basilicas", "basilica"),
        ("bass", "bass"),
        ("basses", "bass"),
        ("bassi", "basso"),
        ("bassos", "basso"),
        ("bateaus", "bateau"),
        ("bateaux", "bateau"),
        ("bathoses", "bathos"),
        ("baths", "bath"),
        ("batzes", "batz"),
        ("beau gestes", "beau geste"),
        ("beaus", "beau"),
        ("beaux", "beau"),
        ("beaux esprits", "bel-esprit"),
        ("beaux gestes", "beau geste"),
        ("beaux hommes", "bel homme"),
        ("bechuana", "bechuana"),
        ("bechuanas", "bechuana"),
        ("beefs", "beef"),
        ("beerenauslesen", "beerenauslese"),
        ("beeves", "beef"),
        ("belle epoques", "belle epoque"),
        ("belles epoques", "belle epoque"),
        ("bemas", "bema"),
        ("bemata", "bema"),
        ("Bengalese", "Bengalese"),
        ("Bernese", "Bernese"),
        ("bersaglieri", "bersagliere"),
        ("bhikshook", "bhikshu"),
        ("bhikshus", "bhikshu"),
        ("Bhutanese", "Bhutanese"),
        ("biases", "bias"),
        ("bierstuben", "bierstube"),
        ("bierstubes", "bierstube"),
        ("bifolia", "bifolium"),
        ("bijoux", "bijou"),
        ("bilboes", "bilbo"),
        ("bimbos", "bimbo"),
        ("bingos", "bingo"),
        ("Biros", "Biro"),
        ("biscotti", "biscotto"),
        ("bison", "bison"),
        ("bisons", "bison"),
        ("blastemata", "blastema"),
        ("blemyae", "blemya"),
        ("blini", "blin"),
        ("blinis", "blin"),
        ("blitzes", "blitz"),
        ("blouses", "blouse"),
        ("blues", "blue"),
        ("bodegones", "bodegon"),
        ("boleros", "bolero"),
        ("Bolognese", "Bolognese"),
        ("boluses", "bolus"),
        ("Bolzanos", "Bolzano"),
        ("bon mots", "bon mot"),
        ("bon vivants", "bon vivant"),
        ("bongoes", "bongo"),
        ("bongos", "bongo"),
        ("bonis fidebus", "bona fides"),
        ("bons mots", "bon mot"),
        ("bons vivants", "bon vivant"),
        ("bordereaux", "bordereau"),
        ("Borghese", "Borghese"),
        ("Bostonese", "Bostonese"),
        ("Botos", "Boto"),
        ("bozzetti", "bozzetto"),
        ("braccia", "braccio"),
        ("brachiopoda", "brachiopod"),
        ("brachiopods", "brachiopod"),
        ("branchiopoda", "branchiopod"),
        ("branchiopods", "branchiopod"),
        ("bratwurste", "bratwurst"),
        ("bratwursts", "bratwurst"),
        ("bravoes", "bravo"),
        ("bravos", "bravo"),
        ("break aways", "break away"),
        ("break-aways", "break-away"),
        ("breakaways", "breakaway"),
        ("breaks away", "break away"),
        ("breaks-away", "break-away"),
        ("breaksaway", "breakaway"),
        ("bream", "bream"),
        ("breeches", "breech"),
        ("bregmata", "bregma"),
        ("brethren", "brother"),
        ("brethren german", "brother german"),
        ("brethren-german", "brother-german"),
        ("brigadier generals", "brigadier general"),
        ("britches", "britches"),
        ("bronchi", "bronchus"),
        ("bronchitises", "bronchitis"),
        ("brothers", "brother"),
        ("brothers german", "brother german"),
        ("brothers-german", "brother-german"),
        ("bruschette", "bruschetta"),
        ("buboes", "bubo"),
        ("buffalo", "buffalo"),
        ("buffalos", "buffalo"),
        ("Buginese", "Buginese"),
        ("bulimi", "bulimus"),
        ("bullae", "bulla"),
        ("bureaus", "bureau"),
        ("bureaux", "bureau"),
        ("Burmans", "Burman"),
        ("Burmese", "Burmese"),
        ("burros", "burro"),
        ("bursae", "bursa"),
        ("burschen", "bursch"),
        ("bursitises", "bursitis"),
        ("bustoes", "busto"),
        ("bustos", "busto"),
        ("buzzes", "buzz"),
        ("bylinas", "bylina"),
        ("byliny", "bylina"),
        ("cabalettas", "cabaletta"),
        ("cabalette", "cabaletta"),
        ("cacti", "cactus"),
        ("cactuses", "cactus"),
        ("caddises", "caddis"),
        ("caducei", "caduceus"),
        ("caeca", "caecum"),
        ("caffe macchiati", "caffe macchiato"),
        ("caffe macchiatos", "caffe macchiato"),
        ("caffe ristretti", "caffe ristretto"),
        ("caffe ristrettos", "caffe ristretto"),
        ("caimans", "caiman"),
        ("Cairos", "Cairo"),
        ("Calabrese", "Calabrese"),
        ("calamistra", "calamistrum"),
        ("calathi", "calathus"),
        ("calices", "calix"),
        ("calluses", "callus"),
        ("calypsos", "calypso"),
        ("calzones", "calzone"),
        ("calzoni", "calzone"),
        ("Camaldolese", "Camaldolese"),
        ("camera obscuras", "camera obscura"),
        ("camerae obscurae", "camera obscura"),
        ("canaliculi", "canaliculus"),
        ("candelabra", "candelabrum"),
        ("cannabises", "cannabis"),
        ("canthari", "cantharus"),
        ("Cantonese", "Cantonese"),
        ("cantos", "canto"),
        ("cantus", "cantus"),
        ("cantuses", "cantus"),
        ("canvases", "canvas"),
        ("canzonettas", "canzonetta"),
        ("canzonette", "canzonetta"),
        ("capataces", "capataz"),
        ("capi", "capo"),
        ("capos", "capo"),
        ("cappuccinos", "cappuccino"),
        ("carabinieri", "carabiniere"),
        ("carcinomas", "carcinoma"),
        ("carcinomata", "carcinoma"),
        ("cardines", "cardo"),
        ("cardophagi", "cardophagus"),
        ("cargadores", "cargador"),
        ("caribou", "caribou"),
        ("caribous", "caribou"),
        ("carices", "carex"),
        ("Carlylese", "Carlylese"),
        ("carmens", "carmen"),
        ("carmina", "carmen"),
        ("carp", "carp"),
        ("cartes de visite", "carte de visite"),
        ("cartes-de-visite", "carte-de-visite"),
        ("caryatides", "caryatid"),
        ("caryatids", "caryatid"),
        ("caryopsides", "caryopsis"),
        ("casinos", "casino"),
        ("Cassinese", "Cassinese"),
        ("cassones", "cassone"),
        ("cassoni", "cassone"),
        ("castra", "castrum"),
        ("castrati", "castrato"),
        ("casus belli", "casus belli"),
        ("cathismata", "cathisma"),
        ("caudices", "caudex"),
        ("caules", "caulis"),
        ("caveae", "cavea"),
        ("caymans", "cayman"),
        ("cecidia", "cecidium"),
        ("Celanese", "Celanese"),
        ("celiae", "celia"),
        ("cellos", "cello"),
        ("cementomata", "cementoma"),
        ("centesimi", "centesimo"),
        ("centumviri", "centumvir"),
        ("cerci", "cercus"),
        ("cerimans", "ceriman"),
        ("Ceylonese", "Ceylonese"),
        ("chaetae", "chaeta"),
        ("chaoses", "chaos"),
        ("chapeaus", "chapeau"),
        ("chapeaux", "chapeau"),
        ("chapplies", "chapplis"),
        ("charismas", "charisma"),
        ("charismata", "charisma"),
        ("chassis", "chassis"),
        ("chateaus", "chateau"),
        ("chateaux", "chateau"),
        ("cherubim", "cherub"),
        ("cherubs", "cherub"),
        ("chervontzi", "chervonetz"),
        ("chevaux", "cheval"),
        ("chevaux de bataille", "cheval de bataille"),
        ("chevaux-de-bataille", "cheval-de-bataille"),
        ("Chicagos", "Chicago"),
        ("children", "child"),
        ("Chimangos", "Chimango"),
        ("Chinese", "Chinese"),
        ("chintzes", "chintz"),
        ("chitarroni", "chitarrone"),
        ("chlamydiae", "chlamydia"),
        ("chlamydias", "chlamydia"),
        ("choanae", "choana"),
        ("chordae", "chorda"),
        ("choruses", "chorus"),
        ("choux", "chou"),
        ("chromidia", "chromidium"),
        ("chromonemata", "chromonema"),
        ("chrysalides", "chrysalis"),
        ("chrysalises", "chrysalis"),
        ("cicatrices", "cicatrix"),
        ("cilantros", "cilantro"),
        ("cimices", "cimex"),
        ("cinclides", "cinclis"),
        ("cistophorori", "cistophorus"),
        ("cladi", "cladus"),
        ("claustra", "claustrum"),
        ("clausulae", "clausula"),
        ("clavulae", "clavula"),
        ("cleithra", "cleithrum"),
        ("clepsydrae", "clepsydra"),
        ("clepsydras", "clepsydra"),
        ("clippers", "clippers"),
        ("clitorides", "clitoris"),
        ("clitorises", "clitoris"),
        ("clostridia", "clostridium"),
        ("coagula", "coagulum"),
        ("coccidia", "coccidium"),
        ("cochitos", "cochito"),
        ("cocos", "coco"),
        ("cod", "cod"),
        ("codices", "codex"),
        ("coeliae", "coelia"),
        ("coes", "co"),
        ("cognoscenti", "cognoscente"),
        ("coitus", "coitus"),
        ("coituses", "coitus"),
        ("collegia", "collegium"),
        ("collegia musica", "collegium musicum"),
        ("Colombos", "Colombo"),
        ("Colorados", "Colorado"),
        ("columbaria", "columbarium"),
        ("columnae", "columna"),
        ("comae", "coma"),
        ("comatulae", "comatula"),
        ("commandos", "commando"),
        ("compendia", "compendium"),
        ("compendiums", "compendium"),
        ("competentes", "competent"),
        ("concerti grossi", "concerto grosso"),
        ("concertinos", "concertino"),
        ("concetti", "concetto"),
        ("condos", "condo"),
        ("condottieri", "condottiere"),
        ("conducti", "conductus"),
        ("coneys", "coney"),
        ("confervae", "conferva"),
        ("confluvia", "confluvium"),
        ("congii", "congius"),
        ("Congoese", "Congoese"),
        ("Congolese", "Congolese"),
        ("conidia", "conidium"),
        ("conies", "coney"),
        ("conoscenti", "conoscente"),
        ("consortia", "consortium"),
        ("consortiums", "consortium"),
        ("contadine", "contadina"),
        ("contadini", "contadino"),
        ("contagia", "contagium"),
        ("contangos", "contango"),
        ("contrafacta", "contrafactum"),
        ("contralti", "contralto"),
        ("contraltos", "contralto"),
        ("contretemps", "contretemps"),
        ("conversaziones", "conversazione"),
        ("conversazioni", "conversazione"),
        ("convolvuli", "convolvulus"),
        ("convolvuluses", "convolvulus"),
        ("conys", "cony"),
        ("corgis", "corgi"),
        ("corgwn", "corgi"),
        ("corgys", "corgy"),
        ("cornetti", "cornetto"),
        ("corni", "corno"),
        ("cornua", "cornu"),
        ("coronae", "corona"),
        ("coronas", "corona"),
        ("corpora", "corpus"),
        ("corpora vilia", "corpus vile"),
        ("corps", "corps"),
        ("corpuscula", "corpusculum"),
        ("corpuses", "corpus"),
        ("corrigenda", "corrigendum"),
        ("cortexes", "cortex"),
        ("cortices", "cortex"),
        ("cosmoses", "cosmos"),
        ("costae", "costa"),
        ("coups d'etat", "coup d'etat"),
        ("court martials", "court martial"),
        ("court-martials", "court martial"),
        ("courts martial", "court martial"),
        ("courts-martial", "court-martial"),
        ("cows", "cow"),
        ("coxendices", "coxendix"),
        ("cozes", "coz"),
        ("craft", "craft"),
        ("crafts childer", "crafts child"),
        ("crafts-childer", "crafts-child"),
        ("crania", "cranium"),
        ("craniums", "cranium"),
        ("craspeda", "craspedum"),
        ("crazie", "crazia"),
        ("credos", "credo"),
        ("cremasteres", "cremaster"),
        ("cremasters", "cremaster"),
        ("crescendos", "crescendo"),
        ("cris de coeur", "cri de coeur"),
        ("cristae", "crista"),
        ("criteria", "criterion"),
        ("crowfoots", "crowfoot"),
        ("crura", "crus"),
        ("crustae", "crusta"),
        ("cubicula", "cubiculum"),
        ("culs de four", "cul de four"),
        ("culs de lampe", "cul de lampe"),
        ("culs de sac", "cul de sac"),
        ("culs-de-four", "cul-de-four"),
        ("culs-de-lampe", "cul-de-lampe"),
        ("culs-de-sac", "cul-de-sac"),
        ("cultelli", "cultellus"),
        ("cumuli", "cumulus"),
        ("cuniculi", "cuniculus"),
        ("curiosi", "curioso"),
        ("curiosos", "curioso"),
        ("curricula", "curriculum"),
        ("curriculums", "curriculum"),
        ("cuspides", "cuspis"),
        ("cyanos", "cyano"),
        ("cyathi", "cyathus"),
        ("cyclopes", "cyclops"),
        ("cyclopses", "cyclops"),
        ("cynocephali", "cynocephalus"),
        ("cyphellae", "cyphella"),
        ("cysticerci", "cysticercus"),
        ("cystidia", "cystidium"),
        ("cystomata", "cystoma"),
        ("Czechs", "Czech"),
        ("dace", "dace"),
        ("daces", "dace"),
        ("daises", "dais"),
        ("data", "datum"),
        ("debris", "debris"),
        ("decennia", "decennium"),
        ("deer", "deer"),
        ("deliria", "delirium"),
        ("deliriums", "delirium"),
        ("demos", "demo"),
        ("denarii", "denarius"),
        ("denkmaler", "denkmal"),
        ("denotata", "denotatum"),
        ("dentalia", "dentalium"),
        ("deposita", "depositum"),
        ("depositums", "depositum"),
        ("descripta", "descriptum"),
        ("desiderata", "desideratum"),
        ("designata", "designatum"),
        ("desmans", "desman"),
        ("desmas", "desma"),
        ("desmata", "desma"),
        ("devoti", "devoto"),
        ("devotos", "devoto"),
        ("diabetes", "diabetes"),
        ("diastemata", "diastema"),
        ("dice", "die"),
        ("dichasia", "dichasium"),
        ("dicta", "dictum"),
        ("dictums", "dictum"),
        ("didymes", "didymis"),
        ("dies", "die"),
        ("differentiae", "differentia"),
        ("digitalises", "digitalis"),
        ("dilettantes", "dilettante"),
        ("dilettanti", "dilettante"),
        ("diplococci", "diplococcus"),
        ("diplomas", "diploma"),
        ("diplomata", "diploma"),
        ("diporpae", "diporpa"),
        ("dipsades", "dipsas"),
        ("directrices", "directrix"),
        ("dittos", "ditto"),
        ("diverticula", "diverticulum"),
        ("divertimenti", "divertimento"),
        ("divertimentos", "divertimento"),
        ("djinn", "djinn"),
        ("djinns", "djinn"),
        ("does", "doe"),
        ("dogmas", "dogma"),
        ("dogmata", "dogma"),
        ("dolmans", "dolman"),
        ("dolphinaria", "dolphinarium"),
        ("dolphinariums", "dolphinarium"),
        ("Dongolese", "Dongolese"),
        ("Dracos", "Draco"),
        ("dragomans", "dragoman"),
        ("dragomen", "dragoman"),
        ("dramas", "drama"),
        ("dreikanter", "dreikanter"),
        ("dreikanters", "dreikanter"),
        ("dumkas", "dumka"),
        ("dumky", "dumka"),
        ("duumviri", "duumvir"),
        ("duumvirs", "duumvir"),
        ("dynamos", "dynamo"),
        ("edemas", "edema"),
        ("edemata", "edema"),
        ("editiones principes", "editio princeps"),
        ("efreeti", "efreet"),
        ("efreets", "efreet"),
        ("eland", "eland"),
        ("elands", "eland"),
        ("elk", "elk"),
        ("elks", "elk"),
        ("ellipses", "ellipse"),
        ("elves", "elf"),
        ("emblememata", "emblema"),
        ("embryomata", "embryoma"),
        ("embryos", "embryo"),
        ("emporia", "emporium"),
        ("emporiums", "emporium"),
        ("enconia", "enconium"),
        ("enconiums", "enconium"),
        ("endotheliomata", "endothelioma"),
        ("enemas", "enema"),
        ("enemata", "enema"),
        ("enigmas", "enigma"),
        ("enigmata", "enigma"),
        ("ententes cordiales", "entente cordiale"),
        ("entera", "enteron"),
        ("entia rationis", "ens rationis"),
        ("entia realia", "ens reale"),
        ("entrochi", "entrochus"),
        ("ephelides", "ephelis"),
        ("ephemerae", "ephemera"),
        ("ephemeras", "ephemera"),
        ("ephemerides", "ephemeris"),
        ("ephemerises", "ephemeris"),
        ("epicardia", "epicardium"),
        ("epidermises", "epidermis"),
        ("epididymides", "epididymis"),
        ("epididymises", "epididymis"),
        ("epilimnia", "epilimnion"),
        ("epimera", "epimeron"),
        ("epiphenomena", "epiphenomenon"),
        ("epitheliomata", "epithelioma"),
        ("epyllia", "epyllion"),
        ("equinoctia", "equinoctium"),
        ("equinoctiums", "equinoctium"),
        ("equiseta", "equisetum"),
        ("equisetums", "equisetum"),
        ("erfs", "erf"),
        ("ergastula", "ergastulum"),
        ("eroses", "eros"),
        ("erotes", "eros"),
        ("errata", "erratum"),
        ("erven", "erf"),
        ("espanoles", "espanol"),
        ("Esperantos", "Esperanto"),
        ("espressos", "espresso"),
        ("ethoses", "ethos"),
        ("eucalypti", "eucalyptus"),
        ("eucalyptuses", "eucalyptus"),
        ("eunuchs", "eunuch"),
        ("euporista", "euporiston"),
        ("euros", "euro"),
        ("evirati", "evirato"),
        ("exanthemata", "exanthema"),
        ("exempla", "exemplum"),
        ("exencephali", "exencephalus"),
        ("exes", "ex"),
        ("explananda", "explanandum"),
        ("explicanda", "explicandum"),
        ("extispices", "extispex"),
        ("extrema", "extremum"),
        ("extremums", "extremum"),
        ("eyases", "eyas"),
        ("fabellae", "fabella"),
        ("fabliaux", "fabliau"),
        ("facienda", "faciendum"),
        ("faeculae", "faecula"),
        ("faits accomplis", "fait accompli"),
        ("falces", "falx"),
        ("falsettos", "falsetto"),
        ("familiae", "familia"),
        ("famuli", "famulus"),
        ("fanfoots", "fanfoot"),
        ("farmans", "farman"),
        ("Faroese", "Faroese"),
        ("Faros", "Faro"),
        ("fasciae", "fascia"),
        ("fascias", "fascia"),
        ("fasciculi", "fasciculus"),
        ("faunae", "fauna"),
        ("faunas", "fauna"),
        ("favellae", "favella"),
        ("faveoli", "faveolus"),
        ("favissae", "favissa"),
        ("feculae", "fecula"),
        ("fedai", "fedai"),
        ("fedais", "fedai"),
        ("feet", "foot"),
        ("feiseanna", "feis"),
        ("felones", "felo"),
        ("felones de se", "felo de se"),
        ("felones-de-se", "felo-de-se"),
        ("felos de se", "felo de se"),
        ("felos-de-se", "felo-de-se"),
        ("felsenmeere", "felsenmeer"),
        ("femora", "femur"),
        ("femurs", "femur"),
        ("fenestrae", "fenestra"),
        ("fermatas", "fermata"),
        ("fermate", "fermata"),
        ("Ferrarese", "Ferrarese"),
        ("fess", "feis"),
        ("fiascos", "fiasco"),
        ("fibrae", "fibra"),
        ("fibrillae", "fibrilla"),
        ("fibromata", "fibroma"),
        ("fibulae", "fibula"),
        ("fibulas", "fibula"),
        ("fidei defensores", "fidei defensor"),
        ("figurantes", "figurante"),
        ("figuranti", "figurante"),
        ("filariae", "filaria"),
        ("filarias", "filaria"),
        ("Filipinos", "Filipino"),
        ("finger ends", "finger end"),
        ("finger-ends", "finger-end"),
        ("fingers ends", "finger end"),
        ("fingers-ends", "finger-end"),
        ("fioriture", "fioritura"),
        ("fish", "fish"),
        ("fizzes", "fizz"),
        ("flabella", "flabellum"),
        ("flag staffs", "flag staff"),
        ("flag staves", "flag staff"),
        ("flag-staffs", "flag-staff"),
        ("flag-staves", "flag-staff"),
        ("flagella", "flagellum"),
        ("flamencos", "flamenco"),
        ("flatfoots", "flatfoot"),
        ("flatuses", "flatus"),
        ("flies", "fly"),
        ("flocci", "floccus"),
        ("flocculi", "flocculus"),
        ("florae", "flora"),
        ("floras", "flora"),
        ("flounder", "flounder"),
        ("flys", "fly"),
        ("foci", "focus"),
        ("focuses", "focus"),
        ("folles", "follis"),
        ("fomites", "fomes"),
        ("Foochowese", "Foochowese"),
        ("fora", "forum"),
        ("foramens", "foramen"),
        ("foramina", "foramen"),
        ("formulae", "formula"),
        ("formulas", "formula"),
        ("forums", "forum"),
        ("fossae", "fossa"),
        ("fowl", "fowl"),
        ("fowls", "fowl"),
        ("fraena", "fraenum"),
        ("franc archers", "franc archer"),
        ("franc-archers", "franc-archer"),
        ("francs archers", "franc archer"),
        ("francs-archers", "franc-archer"),
        ("frati", "frate"),
        ("frena", "frenum"),
        ("fricandeaux", "fricandeau"),
        ("frizzes", "frizz"),
        ("froes", "fro"),
        ("frottole", "frottola"),
        ("frusta", "frustum"),
        ("frustula", "frustulum"),
        ("frustums", "frustum"),
        ("fuci", "fucus"),
        ("fulcra", "fulcrum"),
        ("funambuli", "funambulus"),
        ("fundamenta divisionis", "fundamentum divisionis"),
        ("funghi porchini", "fungo porcino"),
        ("fungi", "fungus"),
        ("funguses", "fungus"),
        ("furfures", "furfur"),
        ("furiosos", "furioso"),
        ("fuzzes", "fuzz"),
        ("Gabunese", "Gabunese"),
        ("Galla", "Galla"),
        ("galla", "galla"),
        ("Gallas", "Galla"),
        ("gallas", "galla"),
        ("gallows", "gallows"),
        ("gametangia", "gametangium"),
        ("ganglia", "ganglion"),
        ("ganglions", "ganglion"),
        ("gaonim", "gaon"),
        ("gaons", "gaon"),
        ("gastrocnemii", "gastrocnemius"),
        ("geese", "goose"),
        ("geisha", "geisha"),
        ("geishas", "geisha"),
        ("geisteswissenschaften", "geisteswissenschaft"),
        ("gemmae", "gemma"),
        ("genae", "gena"),
        ("genera", "genus"),
        ("generalissimos", "generalissimo"),
        ("Genevese", "Genevese"),
        ("genies", "genie"),
        ("genii", "genie"),
        ("geniuses", "genius"),
        ("Genoese", "Genoese"),
        ("gentes", "gens"),
        ("Germans", "German"),
        ("germaria", "germarium"),
        ("Gestapos", "Gestapo"),
        ("ghettos", "ghetto"),
        ("gigolos", "gigolo"),
        ("Gilbertese", "Gilbertese"),
        ("giunchi", "giuncus"),
        ("gizmos", "gizmo"),
        ("glacis", "glacis"),
        ("glacises", "glacis"),
        ("gladioli", "gladiolus"),
        ("gladioluses", "gladiolus"),
        ("glasses", "glass"),
        ("gliomata", "glioma"),
        ("gliosarcomata", "gliosarcoma"),
        ("glissandi", "glissando"),
        ("glissandos", "glissando"),
        ("globigerinae", "globigerina"),
        ("glochidia", "glochidium"),
        ("glomera", "glomus"),
        ("glutaei", "glutaeus"),
        ("glutei", "glutaeus"),
        ("gminy", "gmina"),
        ("Goanese", "Goanese"),
        ("goes", "go"),
        ("gonangia", "gonangium"),
        ("gonidia", "gonidium"),
        ("gonimia", "gonimium"),
        ("gorgoniae", "gorgonia"),
        ("gorgonias", "gorgonia"),
        ("gousblomme", "gousblom"),
        ("goyim", "goy"),
        ("goys", "goy"),
        ("graben", "graben"),
        ("grabens", "graben"),
        ("graffiti", "graffiti"),
        ("grani", "grano"),
        ("granite", "granita"),
        ("granulae", "granula"),
        ("gravamina", "gravamen"),
        ("Greensboros", "Greensboro"),
        ("gringos", "gringo"),
        ("grissini", "grissino"),
        ("grottoes", "grotto"),
        ("grottos", "grotto"),
        ("grouse", "grouse"),
        ("grouses", "grouse"),
        ("Guaiaberos", "Guaiabero"),
        ("guanos", "guano"),
        ("guardias civiles", "guardia civil"),
        ("gubernacula", "gubernaculum"),
        ("guglioes", "guglio"),
        ("guglios", "guglio"),
        ("Guianese", "Guianese"),
        ("gumbos", "gumbo"),
        ("gummas", "gumma"),
        ("gummata", "gumma"),
        ("gutti", "guttus"),
        ("guys", "guy"),
        ("gymnasia", "gymnasium"),
        ("gymnasiums", "gymnasium"),
        ("gymnoti", "gymnotus"),
        ("gyri", "gyrus"),
        ("gyros", "gyro"),
        ("haddock", "haddock"),
        ("haddocks", "haddock"),
        ("haemangiomas", "haemangioma"),
        ("haemangiomata", "haemangioma"),
        ("haggis", "haggis"),
        ("Hainanese", "Hainanese"),
        ("hairdos", "hairdo"),
        ("hake", "hake"),
        ("hakes", "hake"),
        ("halibut", "halibut"),
        ("halibuts", "halibut"),
        ("halluces", "hallux"),
        ("halteridia", "halteridium"),
        ("hamadrayads", "hamadryad"),
        ("hamadryades", "hamadryad"),
        ("hamuli", "hamulus"),
        ("hapax legomena", "hapax legomenon"),
        ("hapax legomenons", "hapax legomenon"),
        ("haptera", "hapteron"),
        ("Hararese", "Hararese"),
        ("Harlemese", "Harlemese"),
        ("harmans", "harman"),
        ("haruspices", "haruspex"),
        ("haustella", "haustellum"),
        ("haustoria", "haustorium"),
        ("haustra", "haustrum"),
        ("Havanese", "Havanese"),
        ("headquarters", "headquarters"),
        ("Heavenese", "Heavenese"),
        ("hedra", "hedron"),
        ("hedrons", "hedron"),
        ("heen", "hsien"),
        ("hefte", "heft"),
        ("helia", "helion"),
        ("helices", "helix"),
        ("helions", "helion"),
        ("hemangeiomas", "hemangeioma"),
        ("hemangeiomata", "hemangeioma"),
        ("hemangiomas", "hemangioma"),
        ("hemangiomata", "hemangioma"),
        ("hemelytra", "hemelytrum"),
        ("hemerae", "hemera"),
        ("hemi elytra", "hemi elytrum"),
        ("hemi-elytra", "hemi-elytrum"),
        ("herniae", "hernia"),
        ("hernias", "hernia"),
        ("heroa", "heroon"),
        ("heroes", "hero"),
        ("herpes", "herpes"),
        ("herren", "herr"),
        ("herring", "herring"),
        ("herrings", "herring"),
        ("hertz", "hertz"),
        ("hetaerae", "hetaera"),
        ("hetairai", "hetaera"),
        ("hetmans", "hetman"),
        ("hiatus", "hiatus"),
        ("hiatuses", "hiatus"),
        ("hijinks", "hijinks"),
        ("hinaki", "hinaki"),
        ("hippocampi", "hippocampus"),
        ("hippopotami", "hippopotamus"),
        ("hippopotamuses", "hippopotamus"),
        ("hippos", "hippo"),
        ("Hiroshimans", "Hiroshiman"),
        ("hoes", "hoe"),
        ("holothuriae", "holothuria"),
        ("holothurias", "holothuria"),
        ("honoraria", "honorarium"),
        ("honorariums", "honorarium"),
        ("hoofs", "hoof"),
        ("Hoosierese", "Hoosierese"),
        ("hooves", "hoof"),
        ("hordeola", "hordeolum"),
        ("hormogonia", "hormogonium"),
        ("hoties", "hoti"),
        ("Hottentotese", "Hottentotese"),
        ("hubrises", "hubris"),
        ("humans", "human"),
        ("humeri", "humerus"),
        ("Hunanese", "Hunanese"),
        ("hydrae", "hydra"),
        ("hydras", "hydra"),
        ("hydraulica", "hydraulicon"),
        ("hydriae", "hydria"),
        ("hymenia", "hymenium"),
        ("hymnaria", "hymnarium"),
        ("hyperbata", "hyperbaton"),
        ("hyperbolae", "hyperbola"),
        ("hyperbolas", "hyperbola"),
        ("hyphae", "hypha"),
        ("hypna", "hypnum"),
        ("hypnums", "hypnum"),
        ("hypodermata", "hypoderma"),
        ("hypolimnia", "hypolimnion"),
        ("ibises", "ibis"),
        ("ichthyosauri", "ichthyosaurus"),
        ("Idahos", "Idaho"),
        ("idees fixes", "idee fixe"),
        ("idola", "idolum"),
        ("ignoramus", "ignoramus"),
        ("ignoramuses", "ignoramus"),
        ("ilia", "ilium"),
        ("imagines", "imago"),
        ("imagos", "imago"),
        ("imbrices", "imbrex"),
        ("impetigos", "impetigo"),
        ("impetus", "impetus"),
        ("impetuses", "impetus"),
        ("improperia", "improperium"),
        ("improvisatrici", "improvisatrice"),
        ("incubi", "incubus"),
        ("incubuses", "incubus"),
        ("indexes", "index"),
        ("indices", "index"),
        ("indicia", "indicium"),
        ("indigenae", "indigena"),
        ("individua", "individuum"),
        ("individuums", "individuum"),
        ("Indochinese", "Indochinese"),
        ("indumenta", "indumentum"),
        ("indusia", "indusium"),
        ("infernos", "inferno"),
        ("infimae species", "infima species"),
        ("infos", "info"),
        ("inhalatoria", "inhalatorium"),
        ("innings", "innings"),
        ("inocula", "inoculum"),
        ("insulae", "insula"),
        ("intaglios", "intaglio"),
        ("interambulacra", "interambulacrum"),
        ("interaxes", "interaxis"),
        ("intercalare", "intercalarium"),
        ("intercalaria", "intercalarium"),
        ("intermaxillae", "intermaxilla"),
        ("intermedia", "intermedium"),
        ("intermezzos", "intermezzo"),
        ("internodia", "internodium"),
        ("interphenomena", "interphenomenon"),
        ("interradii", "interradius"),
        ("interreges", "interrex"),
        ("interregna", "interregnum"),
        ("interregnums", "interregnum"),
        ("interstitia", "interstitium"),
        ("interstitiums", "interstitium"),
        ("intertrigos", "intertrigo"),
        ("intervalla", "intervallum"),
        ("intervallums", "intervallum"),
        ("intichiuma", "intichiuma"),
        ("inuit", "inuk"),
        ("inukshuit", "inukshuk"),
        ("involucra", "involucrum"),
        ("ipse dixits", "ipse dixit"),
        ("Iquicos", "Iquico"),
        ("irides", "iris"),
        ("irises", "iris"),
        ("ischia", "ischium"),
        ("isidia", "isidium"),
        ("ispravniki", "ispravnik"),
        ("ispravniks", "ispravnik"),
        ("isthmi", "isthmus"),
        ("isthmuses", "isthmus"),
        ("iters", "iter"),
        ("itinera", "iter"),
        ("iueles", "juelet"),
        ("ixodides", "ixodid"),
        ("jackanapes", "jackanapes"),
        ("jacobus", "jacobus"),
        ("jacobuses", "jacobus"),
        ("jalapenos", "jalapeno"),
        ("jambeaus", "jambeau"),
        ("jambeaux", "jambeau"),
        ("Japanese", "Japanese"),
        ("Javanese", "Javanese"),
        ("jazzes", "jazz"),
        ("jerries", "jerry"),
        ("Jerrys", "Jerry"),
        ("jeux", "jeu"),
        ("joes", "joe"),
        ("Johnsonese", "Johnsonese"),
        ("judases", "judas"),
        ("judicata", "judicatum"),
        ("juga", "jugum"),
        ("jumbos", "jumbo"),
        ("juntos", "junto"),
        ("Kakapos", "Kakapo"),
        ("Kanarese", "Kanarese"),
        ("kantharoi", "kantharos"),
        ("karakia", "karakia"),
        ("karakias", "karakia"),
        ("kare", "kar"),
        ("karrenfelder", "karrenfeld"),
        ("karrenfelds", "karrenfeld"),
        ("kars", "kar"),
        ("kernoi", "kernos"),
        ("kibbutzes", "kibbutz"),
        ("kibbutzim", "kibbutz"),
        ("kilos", "kilo"),
        ("kimonos", "kimono"),
        ("kine", "cow"),
        ("Kinkimavos", "Kinkimavo"),
        ("kioko", "kioko"),
        ("kiokos", "kioko"),
        ("Kiplingese", "Kiplingese"),
        ("kletterschuhe", "kletterschuh"),
        ("knives", "knife"),
        ("knoppern", "knopper"),
        ("knoppers", "knopper"),
        ("kobo", "kobo"),
        ("Kokakos", "Kokako"),
        ("konditorei", "konditorei"),
        ("konditoreien", "konditorei"),
        ("Kongoese", "Kongoese"),
        ("Kongolese", "Kongolese"),
        ("Kosovos", "Kosovo"),
        ("kouroi", "kouros"),
        ("kovshi", "kovsh"),
        ("kuvaszok", "kuvasz"),
        ("kylikes", "kylix"),
        ("kylixes", "kylix"),
        ("labra", "labrum"),
        ("laciniae", "lacinia"),
        ("lactobacilli", "lactobacillus"),
        ("lacunae", "lacuna"),
        ("lacunaria", "lacunar"),
        ("lacunars", "lacunar"),
        ("lacunas", "lacuna"),
        ("laiki", "laika"),
        ("lamellae", "lamella"),
        ("laminae", "lamina"),
        ("Lapithae", "Lapith"),
        ("lapithae", "lapith"),
        ("Lapiths", "Lapith"),
        ("lapiths", "lapith"),
        ("Lapponese", "Lapponese"),
        ("lares", "lar"),
        ("larnakes", "larnax"),
        ("lars", "lar"),
        ("larynges", "larynx"),
        ("latexes", "latex"),
        ("latices", "latex"),
        ("leaves", "leaf"),
        ("Lebanese", "Lebanese"),
        ("lebensformen", "lebensform"),
        ("leges humanae", "lex humana"),
        ("legionellae", "legionella"),
        ("legomena", "legomenon"),
        ("legumens", "legumen"),
        ("legumina", "legumen"),
        ("lei", "leu"),
        ("leishmaniae", "leishmania"),
        ("leishmanias", "leishmania"),
        ("lemans", "leman"),
        ("lemmas", "lemma"),
        ("lemmata", "lemma"),
        ("lemnisci", "lemniscus"),
        ("lemures", "lemur"),
        ("lemurs", "lemur"),
        ("lenses", "lens"),
        ("lentigines", "lentigo"),
        ("lentisci", "lentiscus"),
        ("Leonese", "Leonese"),
        ("lepromas", "leproma"),
        ("lepromata", "leproma"),
        ("leprosaria", "leprosarium"),
        ("lepta", "lepton"),
        ("leptomonas", "leptomonas"),
        ("leptospirae", "leptospira"),
        ("Lesothos", "Lesotho"),
        ("liberos", "libero"),
        ("libidos", "libido"),
        ("libretti", "libretto"),
        ("librettos", "libretto"),
        ("lice", "louse"),
        ("lidos", "lido"),
        ("lieder", "lied"),
        ("lieus", "lieu"),
        ("lieutenant generals", "lieutenant general"),
        ("lieux", "lieu"),
        ("ligamenta", "ligamentum"),
        ("Lilos", "Lilo"),
        ("limaces", "limax"),
        ("Limans", "Liman"),
        ("limbos", "limbo"),
        ("limites", "limes"),
        ("limos", "limo"),
        ("limuli", "limulus"),
        ("linctuses", "linctus"),
        ("line outs", "line out"),
        ("line-outs", "line-out"),
        ("lineae", "linea"),
        ("linenos", "lineno"),
        ("lines out", "line out"),
        ("lines-out", "line-out"),
        ("lingos", "lingo"),
        ("lingulae", "lingula"),
        ("linos", "lino"),
        ("lipomata", "lipoma"),
        ("lis", "lis"),
        ("lisses", "lis"),
        ("listerellae", "listerella"),
        ("listerellas", "listerella"),
        ("listeria", "listeria"),
        ("listerias", "listeria"),
        ("lithodomi", "lithodomus"),
        ("lithophyta", "lithophyton"),
        ("livedos", "livedo"),
        ("lives", "life"),
        ("lixivia", "lixivium"),
        ("loa", "loa"),
        ("loas", "loa"),
        ("loaves", "loaf"),
        ("lobuli", "lobulus"),
        ("lochi", "lochus"),
        ("loci", "locus"),
        ("locos", "loco"),
        ("loculi", "loculus"),
        ("loggias", "loggia"),
        ("loggie", "loggia"),
        ("logia", "logion"),
        ("logodaedale", "logodaedalus"),
        ("logodaedali", "logodaedalus"),
        ("logos", "logo"),
        ("lomata", "loma"),
        ("lomenta", "lomentum"),
        ("Londonese", "Londonese"),
        ("lora", "lorum"),
        ("lord lieutenants", "lord lieutenant"),
        ("lord-lieutenants", "lord-lieutenant"),
        ("lords lieutenant", "lord lieutenant"),
        ("lords-lieutenant", "lord-lieutenant"),
        ("Lorrainese", "Lorrainese"),
        ("louis", "louis"),
        ("lowlifes", "lowlife"),
        ("lox", "lox"),
        ("loxes", "lox"),
        ("Lucchese", "Lucchese"),
        ("lumbagos", "lumbago"),
        ("lumbrici", "lumbricus"),
        ("lumens", "lumen"),
        ("lumina", "lumen"),
        ("lustra", "lustrum"),
        ("lustrums", "lustrum"),
        ("lux", "lux"),
        ("lymphangiomata", "lymphangioma"),
        ("lymphomas", "lymphoma"),
        ("lymphomata", "lymphoma"),
        ("Lyonese", "Lyonese"),
        ("lyssae", "lyssa"),
        ("maare", "maar"),
        ("maars", "maar"),
        ("macaci", "macacus"),
        ("Macanese", "Macanese"),
        ("macaronies", "macaroni"),
        ("Macassarese", "Macassarese"),
        ("machos", "macho"),
        ("mackerel", "mackerel"),
        ("mackerels", "mackerel"),
        ("macros", "macro"),
        ("maculae", "macula"),
        ("maculas", "macula"),
        ("Madurese", "Madurese"),
        ("maecenases", "maecenas"),
        ("maecenates", "maecenas"),
        ("maestri", "maestro"),
        ("maestros", "maestro"),
        ("mafiose", "mafiosa"),
        ("mafiosi", "mafioso"),
        ("mafiosos", "mafioso"),
        ("magi", "magus"),
        ("magili", "magilus"),
        ("magmas", "magma"),
        ("magmata", "magma"),
        ("magna opera", "magnum opus"),
        ("magnetos", "magneto"),
        ("magnificos", "magnifico"),
        ("magnum opuses", "magnum opus"),
        ("major generals", "major general"),
        ("Majuros", "Majuro"),
        ("makuta", "likuta"),
        ("mala in se", "malum in se"),
        ("Malabarese", "Malabarese"),
        ("Malabos", "Malabo"),
        ("malagmata", "malagma"),
        ("mallei", "malleus"),
        ("malleoli", "malleolus"),
        ("Maltese", "Maltese"),
        ("man milliners", "man milliner"),
        ("man-milliners", "man-milliner"),
        ("mangoes", "mango"),
        ("mangos", "mango"),
        ("manifestos", "manifesto"),
        ("manteaus", "manteau"),
        ("manteaux", "manteau"),
        ("mantellette", "mantelletta"),
        ("mantises", "mantis"),
        ("manubria", "manubrium"),
        ("manubriums", "manubrium"),
        ("Maputos", "Maputo"),
        ("maquereaux", "maquereau"),
        ("Maracaibos", "Maracaibo"),
        ("maremme", "maremma"),
        ("mares", "mare"),
        ("maria", "mare"),
        ("maries", "mary"),
        ("marquises", "marquis"),
        ("Marys", "Mary"),
        ("maths", "math"),
        ("matinees musicales", "matinee musicale"),
        ("matins", "matin"),
        ("matres lectionis", "mater lectionis"),
        ("matzahs", "matzah"),
        ("matzot", "matzah"),
        ("mausolea", "mausoleum"),
        ("mausoleums", "mausoleum"),
        ("maxillae", "maxilla"),
        ("maxima", "maximum"),
        ("maximums", "maximum"),
        ("measles", "measles"),
        ("meatus", "meatus"),
        ("meatuses", "meatus"),
        ("media", "medium"),
        ("mediastina", "mediastinum"),
        ("mediatrices", "mediatrix"),
        ("medicoes", "medico"),
        ("medicos", "medico"),
        ("mediums", "medium"),
        ("medulloblastomas", "medulloblastoma"),
        ("medulloblastomata", "medulloblastoma"),
        ("medusae", "medusa"),
        ("medusas", "medusa"),
        ("megalosauri", "megalosaurus"),
        ("megatheria", "megatherium"),
        ("melanomas", "melanoma"),
        ("melanomata", "melanoma"),
        ("melastomae", "melastoma"),
        ("melastomas", "melastoma"),
        ("melicerides", "meliceris"),
        ("melismas", "melisma"),
        ("melismata", "melisma"),
        ("mementoes", "memento"),
        ("mementos", "memento"),
        ("memoranda", "memorandum"),
        ("memorandums", "memorandum"),
        ("memos", "memo"),
        ("men", "man"),
        ("men children", "man child"),
        ("men midwives", "man midwife"),
        ("men milliners", "man milliner"),
        ("men servants", "man servant"),
        ("men-children", "man-child"),
        ("men-midwives", "man-midwife"),
        ("men-milliners", "man-milliner"),
        ("men-servants", "man-servant"),
        ("menages a quatre", "menage a quatre"),
        ("menages a trois", "menage a trois"),
        ("menchildren", "manchild"),
        ("meningiomas", "meningioma"),
        ("meningiomata", "meningioma"),
        ("menisci", "meniscus"),
        ("menservants", "manservant"),
        ("menus", "menu"),
        ("meretrices", "meretrix"),
        ("merides", "meris"),
        ("meshumadim", "meshumad"),
        ("meshummadim", "meshummad"),
        ("mesothelia", "mesothelium"),
        ("mesotheliomas", "mesothelioma"),
        ("mesotheliomata", "mesothelioma"),
        ("messe di voce", "messa di voce"),
        ("messeigneurs", "monseigneur"),
        ("Messinese", "Messinese"),
        ("metae", "meta"),
        ("metalimnia", "metalimnion"),
        ("metapleura", "metapleuron"),
        ("metatarsi", "metatarsus"),
        ("metropolises", "metropolis"),
        ("metros", "metro"),
        ("mews", "mew"),
        ("Mexicos", "Mexico"),
        ("mezuzoth", "mezuza"),
        ("mezzo rilievos", "mezzo rilievo"),
        ("mezzo-rilievos", "mezzo-rilievo"),
        ("miasmas", "miasma"),
        ("miasmata", "miasma"),
        ("mice", "mouse"),
        ("micetraps", "mousetrap"),
        ("microbia", "microbion"),
        ("microcephali", "microcephalus"),
        ("micrococci", "micrococcus"),
        ("microfiche", "microfiche"),
        ("microfiches", "microfiche"),
        ("micronuclei", "micronucleus"),
        ("micros", "micro"),
        ("Milanese", "Milanese"),
        ("Milanos", "Milano"),
        ("milieus", "milieu"),
        ("milieux", "milieu"),
        ("milieux interieurs", "milieu interieur"),
        ("miliolae", "miliola"),
        ("milites gloriosi", "miles gloriosus"),
        ("millennia", "millennium"),
        ("millenniums", "millennium"),
        ("mimosae", "mimosa"),
        ("mimosas", "mimosa"),
        ("minima", "minimum"),
        ("minimums", "minimum"),
        ("minnelieder", "minnelied"),
        ("minutiae", "minutia"),
        ("minutias", "minutia"),
        ("minyanim", "minyan"),
        ("miracidia", "miracidium"),
        ("mithraea", "mithraeum"),
        ("mitochondria", "mitochondrion"),
        ("mixolimnia", "mixolimnion"),
        ("moakses", "moaks"),
        ("modelletti", "modelletto"),
        ("modelli", "modello"),
        ("modellos", "modello"),
        ("Modenese", "Modenese"),
        ("moderni", "modernus"),
        ("modi", "modus"),
        ("modii", "modius"),
        ("moduli", "modulus"),
        ("moduluses", "modulus"),
        ("moduses", "modus"),
        ("moes", "moe"),
        ("molimina", "molimen"),
        ("momenta", "momentum"),
        ("momentums", "momentum"),
        ("Monacos", "Monaco"),
        ("monades", "monas"),
        ("mondi", "mondo"),
        ("mongooses", "mongoose"),
        ("monies", "money"),
        ("monimolimnia", "monimolimnion"),
        ("monochasia", "monochasium"),
        ("monorchides", "monorchis"),
        ("monos", "mono"),
        ("monosyllaba", "monosyllabon"),
        ("monotae", "monota"),
        ("monoxyla", "monoxylon"),
        ("monsiegneurs", "monseigneur"),
        ("monsignori", "monsignore"),
        ("monsignors", "monsignor"),
        ("monstres sacres", "monstre sacre"),
        ("Montenegros", "Montenegro"),
        ("montes", "mons"),
        ("moose", "moose"),
        ("moratoria", "moratorium"),
        ("moratoriums", "moratorium"),
        ("morceaux", "morceau"),
        ("Moroccos", "Morocco"),
        ("morosi", "moroso"),
        ("mortadellas", "mortadella"),
        ("mortadelle", "mortadella"),
        ("mortaria", "mortarium"),
        ("moscardini", "moscardino"),
        ("motoscafi", "motoscafo"),
        ("mottoes", "motto"),
        ("mottos", "motto"),
        ("mousetraps", "mousetrap"),
        ("mouths", "mouth"),
        ("mucrones", "mucro"),
        ("mucros", "mucro"),
        ("mukim", "mukim"),
        ("mukims", "mukim"),
        ("multigravidae", "multigravida"),
        ("multigravidas", "multigravida"),
        ("mumps", "mumps"),
        ("municipia", "municipium"),
        ("Muqdishos", "Muqdisho"),
        ("Muranese", "Muranese"),
        ("murexes", "murex"),
        ("murices", "murex"),
        ("musae", "musa"),
        ("musas", "musa"),
        ("musees imaginaires", "musee imaginaire"),
        ("musiques concretes", "musique concrete"),
        ("mustachios", "mustachio"),
        ("muzzes", "muzz"),
        ("myae", "mya"),
        ("myas", "mya"),
        ("mycoplasmas", "mycoplasma"),
        ("mycoplasmata", "mycoplasma"),
        ("mycorhizae", "mycorhiza"),
        ("mycorhizas", "mycorhiza"),
        ("mycorrhizae", "mycorrhiza"),
        ("mycorrhizas", "mycorrhiza"),
        ("myelomas", "myeloma"),
        ("myelomata", "myeloma"),
        ("myos", "myo"),
        ("mythoi", "mythos"),
        ("myxomata", "myxoma"),
        ("nachtlokale", "nachtlokal"),
        ("nagaikas", "nagaika"),
        ("nagaiki", "nagaika"),
        ("Nakayamans", "Nakayaman"),
        ("Nankingese", "Nankingese"),
        ("nasuti", "nasutus"),
        ("naumachiae", "naumachia"),
        ("naumachias", "naumachia"),
        ("nauplii", "nauplius"),
        ("nautili", "nautilus"),
        ("nautiluses", "nautilus"),
        ("Navarrese", "Navarrese"),
        ("naye paise", "naya paisa"),
        ("nebenkerne", "nebenkern"),
        ("nebulae", "nebula"),
        ("nebulas", "nebula"),
        ("nectocalyces", "nectocalyx"),
        ("nemathecia", "nemathecium"),
        ("Nenets", "Nenets"),
        ("Nentsi", "Nenets"),
        ("nentsi", "nenets"),
        ("nentsy", "nenets"),
        ("Nepalese", "Nepalese"),
        ("nephridia", "nephridium"),
        ("neritae", "nerita"),
        ("neritas", "nerita"),
        ("neumas", "neuma"),
        ("neumata", "neuma"),
        ("neurinomas", "neurinoma"),
        ("neurinomata", "neurinoma"),
        ("neuromata", "neuroma"),
        ("neurulae", "neurula"),
        ("neutrinos", "neutrino"),
        ("news", "news"),
        ("nexus", "nexus"),
        ("nexuses", "nexus"),
        ("ngwee", "ngwee"),
        ("Niasese", "Niasese"),
        ("Nicobarese", "Nicobarese"),
        ("nidi", "nidus"),
        ("niduses", "nidus"),
        ("nielli", "niello"),
        ("niellos", "niello"),
        ("nimbi", "nimbus"),
        ("nimbuses", "nimbus"),
        ("Ningbos", "Ningbo"),
        ("Nipponese", "Nipponese"),
        ("nockerln", "nockerl"),
        ("noctilucae", "noctiluca"),
        ("noda", "nodum"),
        ("nodi", "nodus"),
        ("noemata", "noema"),
        ("nomismata", "nomisma"),
        ("nonentia", "non-ens"),
        ("Normans", "Norman"),
        ("noumena", "noumenon"),
        ("nouveaux arrives", "nouvel arrive"),
        ("nouveaux pauvres", "nouveau pauvre"),
        ("nouveaux riches", "nouveau riche"),
        ("nouvelle pauvre", "nouveau pauvre"),
        ("nouvelle riche", "nouveau riche"),
        ("novae", "nova"),
        ("novas", "nova"),
        ("novi homines", "novus homo"),
        ("noxae", "noxa"),
        ("nses", "nse"),
        ("nubeculae", "nubecula"),
        ("nuclei", "nucleus"),
        ("nucleoli", "nucleolus"),
        ("nucleolonemas", "nucleolonema"),
        ("nucleolonemata", "nucleolonema"),
        ("nucleoluses", "nucleolus"),
        ("nucleuses", "nucleus"),
        ("numina", "numen"),
        ("nuntii", "nuntius"),
        ("nymphae", "nympha"),
        ("nymphaea", "nymphaeum"),
        ("nymphea", "nymphaeum"),
        ("oaths", "oath"),
        ("obeli", "obelus"),
        ("oboli", "obolus"),
        ("occipita", "occiput"),
        ("occiputs", "occiput"),
        ("oceanaria", "oceanarium"),
        ("ocelli", "ocellus"),
        ("octavos", "octavo"),
        ("octohedra", "octohedron"),
        ("octohedrons", "octohedron"),
        ("octopi", "octopus"),
        ("octopodes", "octopus"),
        ("octopuses", "octopus"),
        ("oculi", "oculus"),
        ("odea", "odeum"),
        ("oedemas", "oedema"),
        ("oedemata", "oedema"),
        ("offspring", "offspring"),
        ("oglys", "ogle"),
        ("Oklahomans", "Oklahoman"),
        ("olfactoria", "olfactorium"),
        ("omenta", "omentum"),
        ("ommatidia", "ommatidium"),
        ("onagers", "onager"),
        ("onagri", "onager"),
        ("opera magna", "opus magnum"),
        ("opercula", "operculum"),
        ("ophiophagi", "ophiophagus"),
        ("optima", "optimum"),
        ("optimums", "optimum"),
        ("opuscula", "opusculum"),
        ("opuses", "opus"),
        ("oratrices", "oratrix"),
        ("oreganos", "oregano"),
        ("organa", "organon"),
        ("Orinocos", "Orinoco"),
        ("Orlandos", "Orlando"),
        ("orthocerata", "orthoceras"),
        ("oscula", "osculum"),
        ("Oslos", "Oslo"),
        ("osmateria", "osmaterium"),
        ("osmeteria", "osmeterium"),
        ("ossicula", "ossiculum"),
        ("osteoclastomas", "osteoclastoma"),
        ("osteoclastomata", "osteoclastoma"),
        ("osteomata", "osteoma"),
        ("ostia", "ostium"),
        ("Otomi", "Otomi"),
        ("otomi", "otomi"),
        ("Otomies", "Otomi"),
        ("otomies", "otomi"),
        ("otos", "oto"),
        ("ottomans", "ottoman"),
        ("ours", "mine"),
        ("ourselves", "myself"),
        ("ova", "ovum"),
        ("ovaria", "ovarium"),
        ("ovoli", "ovolo"),
        ("ovula", "ovulum"),
        ("oxen", "ox"),
        ("oxybapha", "oxybaphon"),
        ("oxymora", "oxymoron"),
        ("oxymorons", "oxymoron"),
        ("oxyurides", "oxyuris"),
        ("paha", "paha"),
        ("paisas", "paisa"),
        ("paise", "paisa"),
        ("pajamas", "pajamas"),
        ("palae", "pala"),
        ("paleae", "palea"),
        ("pali", "palus"),
        ("pallia", "pallium"),
        ("palpebrae", "palpebra"),
        ("palpi", "palpus"),
        ("Panamans", "Panaman"),
        ("Pangasinanes", "Pangasinan"),
        ("pangasinanes", "pangasinan"),
        ("Pangasinans", "Pangasinan"),
        ("pangasinans", "pangasinan"),
        ("panini", "panino"),
        ("panorpae", "panorpa"),
        ("pantos", "panto"),
        ("pants", "pant"),
        ("paparrazi", "paparrazo"),
        ("papillae", "papilla"),
        ("papillomata", "papilloma"),
        ("papulae", "papula"),
        ("papyri", "papyrus"),
        ("papyruses", "papyrus"),
        ("parabolae", "parabola"),
        ("parabolani", "parabolanus"),
        ("parabolas", "parabola"),
        ("paradores", "parador"),
        ("paradors", "parador"),
        ("paraganglia", "paraganglion"),
        ("paragangliomas", "paraganglioma"),
        ("paragangliomata", "paraganglioma"),
        ("paraglossae", "paraglossa"),
        ("Paramaribos", "Paramaribo"),
        ("paranuclei", "paranucleus"),
        ("parapleura", "parapleura"),
        ("parapsides", "parapsis"),
        ("paraselenae", "paraselene"),
        ("parcs fermes", "parc ferme"),
        ("Parduscos", "Pardusco"),
        ("parenchymata", "parenchyma"),
        ("parerga", "parergon"),
        ("parhelia", "parhelion"),
        ("parhelions", "parhelion"),
        ("parietes", "paries"),
        ("parisa", "parison"),
        ("Parmese", "Parmese"),
        ("parnassim", "parnas"),
        ("parvenus", "parvenu"),
        ("pasteurellae", "pasteurella"),
        ("pasteurellas", "pasteurella"),
        ("pastorales", "pastorale"),
        ("pastorali", "pastorale"),
        ("patagia", "patagium"),
        ("paterae", "patera"),
        ("pathoses", "pathos"),
        ("paths", "path"),
        ("paxillae", "paxilla"),
        ("peciae", "pecia"),
        ("pecias", "pecia"),
        ("pectens", "pecten"),
        ("pectines", "pecten"),
        ("pectora", "pectus"),
        ("pedalos", "pedalo"),
        ("pedes", "pes"),
        ("pedia", "pedion"),
        ("pedicellariae", "pedicellaria"),
        ("pediluvia", "pediluvium"),
        ("Pekingese", "Pekingese"),
        ("peltae", "pelta"),
        ("pelves", "pelvis"),
        ("pelvises", "pelvis"),
        ("pence", "penny"),
        ("pendula", "pendulum"),
        ("pendulums", "pendulum"),
        ("penes", "penis"),
        ("pengo", "pengo"),
        ("pengoes", "pengo"),
        ("penicilli", "penicillus"),
        ("peninsulae", "peninsula"),
        ("peninsulas", "peninsula"),
        ("penises", "penis"),
        ("pennia", "penni"),
        ("pennies", "penny"),
        ("pensieri", "pensiero"),
        ("people", "person"),
        ("percepta", "perceptum"),
        ("peridia", "peridium"),
        ("perikarya", "perikaryon"),
        ("perithecia", "perithecium"),
        ("perniones", "pernio"),
        ("peronia", "peronium"),
        ("perradii", "perradius"),
        ("personae", "persona"),
        ("personas", "persona"),
        ("persons", "person"),
        ("phalanges", "phalanx"),
        ("phalangia", "phalangium"),
        ("phalanxes", "phalanx"),
        ("phalli", "phallus"),
        ("phalloi", "phallos"),
        ("phalluses", "phallus"),
        ("pharmakoi", "pharmakos"),
        ("phenomena", "phenomenon"),
        ("phlegmasiae", "phlegmasia"),
        ("phocae", "phoca"),
        ("phocas", "phoca"),
        ("pholades", "pholas"),
        ("photos", "photo"),
        ("phototaxes", "phototaxis"),
        ("phragmata", "phragma"),
        ("phrenes", "phren"),
        ("phyla", "phylum"),
        ("phylae", "phyle"),
        ("phyllobranchiae", "phyllobranchia"),
        ("phylums", "phylum"),
        ("phymata", "phyma"),
        ("phyogemmaria", "phyogemmarium"),
        ("piani", "piano"),
        ("pianos", "piano"),
        ("pickerel", "pickerel"),
        ("pickerels", "pickerel"),
        ("Piedmontese", "Piedmontese"),
        ("pieds a terre", "pied a terre"),
        ("pieds noirs", "pied noir"),
        ("pietre", "pietra"),
        ("pifferari", "pifferaro"),
        ("pike", "pike"),
        ("pikes", "pike"),
        ("pilei", "pileus"),
        ("pili", "pilus"),
        ("pilleis", "pillie"),
        ("pimentos", "pimento"),
        ("pina coladas", "pina colada"),
        ("pinaces", "pinax"),
        ("pinas coladas", "pina colada"),
        ("pincers", "pincer"),
        ("pineta", "pinetum"),
        ("pinetums", "pinetum"),
        ("pingoes", "pingo"),
        ("pingos", "pingo"),
        ("pinnae", "pinna"),
        ("pinnas", "pinna"),
        ("pinones", "pinon"),
        ("pinons", "pinon"),
        ("pintos", "pinto"),
        ("pipkraker", "pipkrake"),
        ("pipkrakes", "pipkrake"),
        ("pirrites", "pyrites"),
        ("piscinae", "piscina"),
        ("piscinas", "piscina"),
        ("pistillidia", "pistillidium"),
        ("Pistoiese", "Pistoiese"),
        ("pithoi", "pithos"),
        ("pizzas", "pizza"),
        ("pizze", "pizza"),
        ("placeboes", "placebo"),
        ("placebos", "placebo"),
        ("placita", "placitum"),
        ("planctus", "planctus"),
        ("plankton", "plankter"),
        ("planulae", "planula"),
        ("plasmalemmae", "plasmalemma"),
        ("plasmalemmas", "plasmalemma"),
        ("plasmodia", "plasmodium"),
        ("plasmolytica", "plasmolyticum"),
        ("plasmomata", "plasmoma"),
        ("plateaus", "plateau"),
        ("plateaux", "plateau"),
        ("platypodes", "platypus"),
        ("platypuses", "platypus"),
        ("plecos", "pleco"),
        ("plectra", "plectrum"),
        ("plenaria", "plenarium"),
        ("plesiosauri", "plesiosaurus"),
        ("plether", "plethron"),
        ("plethra", "plethron"),
        ("pleura", "pleura"),
        ("plexus", "plexus"),
        ("plexuses", "plexus"),
        ("plicae", "plica"),
        ("pliers", "pliers"),
        ("ploshchadki", "ploshchadka"),
        ("pluralia tantum", "plurale tantum"),
        ("plutei", "pluteus"),
        ("Plutos", "Pluto"),
        ("pneumothoraces", "pneumothorax"),
        ("pneumothoraxes", "pneumothorax"),
        ("pobladores", "poblador"),
        ("pocula", "poculum"),
        ("poderi", "podere"),
        ("podetia", "podetium"),
        ("podia", "podium"),
        ("podiums", "podium"),
        ("poes", "po"),
        ("pogos", "pogo"),
        ("poise", "poise"),
        ("poises", "poise"),
        ("polises", "polis"),
        ("politbureaus", "politbureau"),
        ("politbureaux", "politbureau"),
        ("politicoes", "politico"),
        ("politicos", "politico"),
        ("pollices", "pollex"),
        ("pollinaria", "pollinarium"),
        ("pollinia", "pollinium"),
        ("Polonese", "Polonese"),
        ("polos", "polo"),
        ("polythecia", "polythecium"),
        ("pommes de terre", "pomme de terre"),
        ("ponchos", "poncho"),
        ("pontifexes", "pontifex"),
        ("pontifices", "pontifex"),
        ("porcini", "porcino"),
        ("poria", "porion"),
        ("porrones", "porron"),
        ("porrons", "porron"),
        ("porticoes", "portico"),
        ("porticos", "portico"),
        ("portiforia", "portiforium"),
        ("portmanteaus", "portmanteau"),
        ("portmanteaux", "portmanteau"),
        ("Porto Novos", "Porto Novo"),
        ("Porto-Novos", "Porto-Novo"),
        ("Portos", "Porto"),
        ("portraits parles", "portrait parle"),
        ("ports de bras", "port de bras"),
        ("Portuguese", "Portuguese"),
        ("pos", "po"),
        ("postnati", "postnatus"),
        ("postpubes", "postpubis"),
        ("postulata", "postulatum"),
        ("potatoes", "potato"),
        ("potestates", "potestas"),
        ("pox", "pox"),
        ("praecognita", "praecognitum"),
        ("pragmas", "pragma"),
        ("pragmata", "pragma"),
        ("precis", "precis"),
        ("precognita", "precognitum"),
        ("premiers danseurs", "premier danseur"),
        ("prepennae", "prepenna"),
        ("prima ballerinas", "prima ballerina"),
        ("prima donnas", "prima donna"),
        ("prime ballerine", "prima ballerina"),
        ("prime donne", "prima donna"),
        ("primigravidae", "primigravida"),
        ("primordia", "primordium"),
        ("principia", "principium"),
        ("proaves", "proavis"),
        ("proboscides", "proboscis"),
        ("proboscises", "proboscis"),
        ("proceedings", "proceedings"),
        ("procoeliae", "procoelia"),
        ("prodromi", "prodromus"),
        ("proferentes", "proferens"),
        ("profluvia", "profluvium"),
        ("proglottides", "proglottis"),
        ("programmata", "programma"),
        ("progymnasia", "progymnasium"),
        ("progymnasmata", "progymnasma"),
        ("prokarya", "prokaryon"),
        ("prolabia", "prolabium"),
        ("prolegomena", "prolegomenon"),
        ("promeropes", "promerops"),
        ("propleura", "propleuron"),
        ("propodia", "propodium"),
        ("propositi", "propositus"),
        ("propria", "proprium"),
        ("propyla", "propylon"),
        ("propylaea", "propylaeum"),
        ("propylons", "propylon"),
        ("prorae", "prora"),
        ("pros", "pro"),
        ("prosae", "prosa"),
        ("proscenia", "proscenium"),
        ("proscollae", "proscolla"),
        ("prosecutrices", "prosecutrix"),
        ("prosencephala", "prosencephalon"),
        ("proseuchae", "proseucha"),
        ("prosodiencephala", "prosodiencephalon"),
        ("prosopia", "prosopium"),
        ("prospectus", "prospectus"),
        ("prospectuses", "prospectus"),
        ("prosulae", "prosula"),
        ("protarsi", "protarsus"),
        ("prothalli", "prothallus"),
        ("prothallia", "prothallium"),
        ("protococci", "protococcus"),
        ("protomae", "protoma"),
        ("protomas", "protoma"),
        ("protonemata", "protonema"),
        ("prototypa", "prototypon"),
        ("prototypons", "prototypon"),
        ("protypa", "protypon"),
        ("provisoes", "proviso"),
        ("provisos", "proviso"),
        ("prytan", "prytanis"),
        ("prytanes", "prytanis"),
        ("psammomata", "psammoma"),
        ("pseudopodia", "pseudopodium"),
        ("pseudostomata", "pseudostoma"),
        ("psychos", "psycho"),
        ("psydracia", "psydracium"),
        ("pteromata", "pteroma"),
        ("pteropi", "pteropus"),
        ("pterylae", "pteryla"),
        ("pueblos", "pueblo"),
        ("puirt a beul", "port a beul"),
        ("puirt-a-beul", "port-a-beul"),
        ("puli", "pul"),
        ("pulli", "pullus"),
        ("pulmonaria", "pulmonarium"),
        ("puls", "pul"),
        ("pulsella", "pulsellum"),
        ("pulveratrices", "pulveratrix"),
        ("puncta", "punctum"),
        ("punti blanchi", "punto blanco"),
        ("puntos blancos", "punto blanco"),
        ("pupae", "pupa"),
        ("purlieus", "purlieu"),
        ("purlieux", "purlieu"),
        ("Purum", "Purum"),
        ("purum", "purum"),
        ("Purums", "Purum"),
        ("purums", "purum"),
        ("putti", "putto"),
        ("puttonys", "puttony"),
        ("pycnia", "pycnium"),
        ("pycnides", "pycnis"),
        ("pycnidia", "pycnidium"),
        ("pyjamas", "pyjamas"),
        ("pylae", "pyla"),
        ("pyralides", "pyralis"),
        ("pyramidia", "pyramidion"),
        ("pyramidions", "pyramidion"),
        ("pyrexiae", "pyrexia"),
        ("pyritae", "pyrites"),
        ("pyrophori", "pyrophorus"),
        ("pyxidia", "pyxidium"),
        ("quadratrices", "quadratrix"),
        ("quaesita", "quaesitum"),
        ("quanta", "quantum"),
        ("quantums", "quantum"),
        ("quartos", "quarto"),
        ("quartzes", "quartz"),
        ("quid", "quid"),
        ("quinarii", "quinarius"),
        ("quinquennia", "quinquennium"),
        ("Quitos", "Quito"),
        ("rabies", "rabies"),
        ("rad", "rad"),
        ("radialia", "radiale"),
        ("radices", "radix"),
        ("radii", "radius"),
        ("radiuses", "radius"),
        ("radixes", "radix"),
        ("rads", "rad"),
        ("ragazze", "ragazza"),
        ("ragazzi", "ragazzo"),
        ("raggare", "raggare"),
        ("raggares", "raggare"),
        ("rami", "ramus"),
        ("ramuli", "ramulus"),
        ("ranunculi", "ranunculus"),
        ("ranunculuses", "ranunculus"),
        ("rara avises", "rara avis"),
        ("rarae aves", "rara avis"),
        ("razzes", "razz"),
        ("recti", "rectus"),
        ("rediae", "redia"),
        ("reductiones", "reductio"),
        ("referenda", "referendum"),
        ("referendums", "referendum"),
        ("refugia", "refugium"),
        ("regidores", "regidor"),
        ("regidors", "regidor"),
        ("regmata", "regma"),
        ("reguli", "regulus"),
        ("reiche", "reich"),
        ("rejoneadores", "rejoneador"),
        ("rejones", "rejon"),
        ("relata", "relatum"),
        ("rem", "rem"),
        ("remexes", "remex"),
        ("remiges", "remex"),
        ("remou", "remous"),
        ("remous", "remous"),
        ("rems", "rem"),
        ("repla", "replum"),
        ("representamens", "representamen"),
        ("representamina", "representamen"),
        ("res", "res"),
        ("residua", "residuum"),
        ("residuums", "residuum"),
        ("responsa", "responsum"),
        ("retia", "rete"),
        ("retinacula", "retinaculum"),
        ("retinulae", "retinula"),
        ("rezidentsii", "rezidentsia"),
        ("rezidenty", "rezident"),
        ("rhinoceros", "rhinoceros"),
        ("rhinoceroses", "rhinoceros"),
        ("rhinophymas", "rhinophyma"),
        ("rhinophymata", "rhinophyma"),
        ("rhinos", "rhino"),
        ("rhizomas", "rhizoma"),
        ("rhizomata", "rhizoma"),
        ("rhododendra", "rhododendron"),
        ("rhododendrons", "rhododendron"),
        ("rhombohedra", "rhombohedron"),
        ("rhombohedrons", "rhombohedron"),
        ("rhomboidei", "rhomboideus"),
        ("rhopalia", "rhopalium"),
        ("rhynchodaea", "rhynchodaeum"),
        ("rhythmi", "rhythmus"),
        ("ri", "ri"),
        ("ricercari", "ricercar"),
        ("ricercars", "ricercar"),
        ("ricercate", "ricercata"),
        ("ricordi", "ricordo"),
        ("rideaus", "rideau"),
        ("rideaux", "rideau"),
        ("rilievos", "rilievo"),
        ("rimmonim", "rimon"),
        ("rimonim", "rimon"),
        ("rioni", "rione"),
        ("risottos", "risotto"),
        ("ritardandi", "ritardando"),
        ("ritardandos", "ritardando"),
        ("rites de passage", "rite de passage"),
        ("rococos", "rococo"),
        ("roe", "roe"),
        ("roes", "roe"),
        ("Roma", "Rom"),
        ("Romagnese", "Romagnese"),
        ("Romanese", "Romanese"),
        ("Romanies", "Romany"),
        ("Romans", "Roman"),
        ("romanzen", "romanze"),
        ("roms", "rom"),
        ("rond de jambes", "rond de jambe"),
        ("rondeaus", "rondeau"),
        ("rondeaux", "rondeau"),
        ("rondos", "rondo"),
        ("ronds de jambes", "rond de jambe"),
        ("rostra", "rostrum"),
        ("rostrums", "rostrum"),
        ("rotulae", "rotula"),
        ("routes nationales", "route nationale"),
        ("rubashkas", "rubashka"),
        ("rubashki", "rubashka"),
        ("rugae", "ruga"),
        ("ruses de guerre", "ruse de guerre"),
        ("ryper", "rype"),
        ("sabertooths", "sabertooth"),
        ("sacculi", "sacculus"),
        ("sacella", "sacellum"),
        ("sachverhalte", "sachverhalt"),
        ("sacra", "sacrum"),
        ("Sacramentos", "Sacramento"),
        ("sacraria", "sacrarium"),
        ("sacrums", "sacrum"),
        ("saddos", "saddo"),
        ("saffi", "saffo"),
        ("saga", "sagum"),
        ("sagos", "sago"),
        ("salitas", "salita"),
        ("salite", "salita"),
        ("salivaria", "salivarium"),
        ("salmon", "salmon"),
        ("salpae", "salpa"),
        ("salpas", "salpa"),
        ("salvos", "salvo"),
        ("samboes", "sambo"),
        ("sambos", "sambo"),
        ("samurai", "samurai"),
        ("sanatoria", "sanatorium"),
        ("sanatoriums", "sanatorium"),
        ("sancta sanctorum", "sanctum sanctorum"),
        ("sandr", "sandr"),
        ("sandrs", "sandr"),
        ("Sangirese", "Sangirese"),
        ("Santiagos", "Santiago"),
        ("Sapporos", "Sapporo"),
        ("Sarajevos", "Sarajevo"),
        ("Sarawakese", "Sarawakese"),
        ("sarcinae", "sarcina"),
        ("sarcomas", "sarcoma"),
        ("sarcomata", "sarcoma"),
        ("sarcophagi", "sarcophagus"),
        ("sarissae", "sarissa"),
        ("sassafrases", "sassafras"),
        ("satellites", "satelles"),
        ("saxicavae", "saxicava"),
        ("sbirri", "sbirro"),
        ("scaleni", "scalenus"),
        ("scandala magnatum", "scandalum magnatum"),
        ("scapi", "scapus"),
        ("scapulae", "scapula"),
        ("scapulas", "scapula"),
        ("scarabaei", "scarabaeus"),
        ("scari", "scarus"),
        ("scazons", "scazon"),
        ("scazontes", "scazon"),
        ("sceattas", "sceat"),
        ("schemas", "schema"),
        ("schemata", "schema"),
        ("scherzandos", "scherzando"),
        ("scherzos", "scherzo"),
        ("schismata", "schisma"),
        ("schistosomula", "schistosomulum"),
        ("schizostylis", "schizostylis"),
        ("scholia", "scholium"),
        ("scioli", "sciolus"),
        ("scirrhi", "scirrhus"),
        ("scirrhusses", "scirrhus"),
        ("scissors", "scissors"),
        ("scoleces", "scolex"),
        ("scolopidia", "scolopidium"),
        ("scombri", "scomber"),
        ("scoriae", "scoria"),
        ("scorias", "scoria"),
        ("scotomas", "scotoma"),
        ("scotomata", "scotoma"),
        ("scriptoria", "scriptorium"),
        ("scriptoriums", "scriptorium"),
        ("scudi", "scudo"),
        ("scungilli", "scungille"),
        ("scuole", "scuola"),
        ("scuta", "scutum"),
        ("scutella", "scutellum"),
        ("scutula", "scutulum"),
        ("scyphi", "scyphus"),
        ("seaquaria", "seaquarium"),
        ("secantes", "secans"),
        ("secreta", "secretum"),
        ("secundagravidae", "secundagravida"),
        ("secundagravidas", "secundagravida"),
        ("secundigravidae", "secundigravida"),
        ("secundigravidas", "secundigravida"),
        ("secundiparae", "secundipara"),
        ("secundiparas", "secundipara"),
        ("sedes", "sedes"),
        ("sedilia", "sedile"),
        ("seecatchie", "seecatch"),
        ("seed", "seed"),
        ("seeds", "seed"),
        ("Selmans", "Selman"),
        ("semas", "sema"),
        ("semata", "sema"),
        ("seminia", "seminium"),
        ("semunciae", "semuncia"),
        ("senarii", "senarius"),
        ("Senegalese", "Senegalese"),
        ("senes", "senex"),
        ("sensa", "sensum"),
        ("sensedata", "sensedatum"),
        ("sensilla", "sensillum"),
        ("sensoriola", "sensoriolum"),
        ("sententiae", "sententia"),
        ("separatrices", "separatrix"),
        ("sephardim", "sephardi"),
        ("sephardin", "sephardi"),
        ("septa", "septum"),
        ("septaria", "septarium"),
        ("septemviri", "septemvir"),
        ("septenarii", "septenarius"),
        ("sequelae", "sequela"),
        ("sequestra", "sequestrum"),
        ("sera", "serum"),
        ("seraphim", "seraph"),
        ("seraphs", "seraph"),
        ("sericteria", "sericterium"),
        ("series", "series"),
        ("serir", "serir"),
        ("serirs", "serir"),
        ("serpigines", "serpigo"),
        ("serpigoes", "serpigo"),
        ("serpulae", "serpula"),
        ("serrae", "serra"),
        ("sertulariae", "sertularia"),
        ("sertularias", "sertularia"),
        ("serums", "serum"),
        ("sestertia", "sestertium"),
        ("sestieri", "sestiere"),
        ("set offs", "set off"),
        ("set outs", "set out"),
        ("set tos", "set to"),
        ("set-offs", "set-off"),
        ("set-outs", "set-out"),
        ("set-tos", "set-to"),
        ("setae", "seta"),
        ("sets off", "set off"),
        ("sets out", "set out"),
        ("sets to", "set to"),
        ("sets-off", "set-off"),
        ("sets-out", "set-out"),
        ("sets-to", "set-to"),
        ("sezessionen", "sezession"),
        ("sforzati", "sforzato"),
        ("sforzatos", "sforzato"),
        ("sgraffiati", "sgraffiato"),
        ("shad", "shad"),
        ("shads", "shad"),
        ("shamans", "shaman"),
        ("shauries", "shauri"),
        ("shauris", "shauri"),
        ("Shavese", "Shavese"),
        ("shawabtis", "shawabti"),
        ("shawabtiu", "shawabti"),
        ("Shawanese", "Shawanese"),
        ("shears", "shears"),
        ("sheep", "sheep"),
        ("shelves", "shelf"),
        ("shifta", "shifta"),
        ("shiftas", "shifta"),
        ("shochetim", "shochet"),
        ("shomrim", "shomer"),
        ("shorts", "shorts"),
        ("Siamese", "Siamese"),
        ("siemens", "siemens"),
        ("Sienese", "Sienese"),
        ("sigli", "siglos"),
        ("sigloi", "siglos"),
        ("signa", "signum"),
        ("Sikkimese", "Sikkimese"),
        ("silbadores", "silbador"),
        ("silbadors", "silbador"),
        ("sileni", "silenus"),
        ("silices", "silex"),
        ("siliquae", "siliqua"),
        ("silos", "silo"),
        ("Siluri", "Silurus"),
        ("simiae", "simia"),
        ("simplexes", "simplex"),
        ("simplices", "simplex"),
        ("simpula", "simpulum"),
        ("simulacra", "simulacrum"),
        ("simulacrums", "simulacrum"),
        ("sinfonias", "sinfonia"),
        ("sinfonie", "sinfonia"),
        ("Singhalese", "Singhalese"),
        ("Sinhalese", "Sinhalese"),
        ("sinus", "sinus"),
        ("sinuses", "sinus"),
        ("siphunculi", "siphunculus"),
        ("sipunculi", "sipunculus"),
        ("siroccos", "sirocco"),
        ("sistra", "sistrum"),
        ("sistrums", "sistrum"),
        ("situlae", "situla"),
        ("situlas", "situla"),
        ("sizzes", "sizz"),
        ("skis", "ski"),
        ("snekkjur", "snekkja"),
        ("snipe", "snipe"),
        ("snipes", "snipe"),
        ("snoozes", "snooze"),
        ("soes", "so"),
        ("Sogdianese", "Sogdianese"),
        ("solaria", "solarium"),
        ("soldi", "soldo"),
        ("solenia", "solenium"),
        ("soles", "sol"),
        ("solfeggi", "solfeggio"),
        ("solfeggios", "solfeggio"),
        ("soli", "solo"),
        ("solidi", "solidus"),
        ("solidos", "solidus"),
        ("solos", "solo"),
        ("solstitia", "solstitium"),
        ("solvi", "solvus"),
        ("somas", "soma"),
        ("somata", "soma"),
        ("somatenes", "somaten"),
        ("sombreros", "sombrero"),
        ("some", "one"),
        ("Sonamans", "Sonaman"),
        ("soprani", "soprano"),
        ("sopranos", "soprano"),
        ("soralia", "soralium"),
        ("soredia", "soredium"),
        ("sori", "sorus"),
        ("soshi", "soshi"),
        ("sotches", "sotch"),
        ("sotchs", "sotch"),
        ("souvlakia", "souvlaki"),
        ("souvlakis", "souvlaki"),
        ("spadices", "spadix"),
        ("spadixes", "spadix"),
        ("Spaetlesen", "Spaetlese"),
        ("spari", "sparus"),
        ("spasmi", "spasmus"),
        ("spathae", "spatha"),
        ("species", "species"),
        ("spectra", "spectrum"),
        ("spectrums", "spectrum"),
        ("specula", "speculum"),
        ("speculums", "speculum"),
        ("spermaria", "spermarium"),
        ("spermata", "sperma"),
        ("spermathecae", "spermatheca"),
        ("spermatia", "spermatium"),
        ("spermatoa", "spermatoon"),
        ("spermogonia", "spermogonium"),
        ("sphaerideum", "sphaeridium"),
        ("sphaeridia", "sphaeridium"),
        ("sphagna", "sphagnum"),
        ("sphagnums", "sphagnum"),
        ("spheges", "sphex"),
        ("sphinges", "sphinx"),
        ("sphinxes", "sphinx"),
        ("spicula", "spiculum"),
        ("spiracula", "spiraculum"),
        ("spirilla", "spirillum"),
        ("spondyli", "spondylus"),
        ("sporodochia", "sporodochium"),
        ("sputa", "sputum"),
        ("squadre", "squadra"),
        ("squadristi", "squadrist"),
        ("squadrists", "squadrist"),
        ("squali", "squalus"),
        ("squamae", "squama"),
        ("squillae", "squilla"),
        ("stabilimenta", "stabilimentum"),
        ("staccatos", "staccato"),
        ("stadia", "stadium"),
        ("stadiums", "stadium"),
        ("stalactitae", "stalactite"),
        ("stalactites", "stalactite"),
        ("stamen", "stamen"),
        ("stamina", "stamen"),
        ("staminidia", "staminidium"),
        ("staphylococci", "staphylococcus"),
        ("star fish", "star fish"),
        ("star fishes", "star fish"),
        ("star-fish", "star-fish"),
        ("star-fishes", "star-fish"),
        ("starfish", "starfish"),
        ("starfishes", "starfish"),
        ("starosti", "starosta"),
        ("starovers", "starover"),
        ("starovery", "starover"),
        ("startsy", "starets"),
        ("startzy", "staretz"),
        ("stasima", "stasimon"),
        ("stasimons", "stasimon"),
        ("staterae", "statera"),
        ("statuae", "statua"),
        ("statuas", "statua"),
        ("status", "status"),
        ("statuses", "status"),
        ("stelae", "stela"),
        ("stelas", "stela"),
        ("stellae", "stella"),
        ("stemmata", "stemma"),
        ("stephania", "stephanion"),
        ("stephanions", "stephanion"),
        ("sterigmata", "sterigma"),
        ("sterna", "sternum"),
        ("sternebrae", "sternebra"),
        ("sternos", "sterno"),
        ("sternums", "sternum"),
        ("stichidia", "stichidium"),
        ("stichoi", "stichos"),
        ("stigmariae", "stigmaria"),
        ("stigmas", "stigma"),
        ("stigmata", "stigma"),
        ("stilettoes", "stiletto"),
        ("stillicidia", "stillicidium"),
        ("stimuli", "stimulus"),
        ("stipites", "stipes"),
        ("stipulae", "stipula"),
        ("stipulas", "stipula"),
        ("stirpes", "stirps"),
        ("stoai", "stoa"),
        ("stoas", "stoa"),
        ("stolones", "stolo"),
        ("stomachs", "stomach"),
        ("stomas", "stoma"),
        ("stomata", "stoma"),
        ("stomatia", "stomatium"),
        ("stomia", "stomion"),
        ("stomodaea", "stomodaeum"),
        ("stomodea", "stomodaeum"),
        ("storeys", "storey"),
        ("stornelli", "stornello"),
        ("strambotti", "strambotto"),
        ("strata", "stratum"),
        ("strategi", "strategus"),
        ("strategoi", "strategos"),
        ("stratums", "stratum"),
        ("streptococci", "streptococcus"),
        ("streptothrices", "streptothrix"),
        ("striae", "stria"),
        ("striata", "striatum"),
        ("strigae", "striga"),
        ("striolae", "striola"),
        ("strobilae", "strobila"),
        ("strobili", "strobilus"),
        ("stromata", "stroma"),
        ("stromodaea", "stromodeum"),
        ("stromodea", "stromodeum"),
        ("strumae", "struma"),
        ("stryddae", "stryddag"),
        ("stuccos", "stucco"),
        ("studia generali", "studium generale"),
        ("styli", "stylus"),
        ("stylopodia", "stylopodium"),
        ("stylos", "stylo"),
        ("styluses", "stylus"),
        ("subbotniki", "subbotnik"),
        ("subbotniks", "subbotnik"),
        ("subsellia", "subsellium"),
        ("subsidia", "subsidium"),
        ("substrata", "substratum"),
        ("substratums", "substratum"),
        ("succi", "succus"),
        ("succineae", "succinea"),
        ("succineas", "succinea"),
        ("succubi", "succubus"),
        ("succubuses", "succubus"),
        ("Sudanese", "Sudanese"),
        ("suffrutices", "suffrutex"),
        ("suggesta", "suggestum"),
        ("suggestiones falsi", "suggestio falsi"),
        ("suggestums", "suggestum"),
        ("sulci", "sulcus"),
        ("sum totals", "sum total"),
        ("sum-totals", "sum-total"),
        ("summa bona", "summum bonum"),
        ("summa genera", "summum genus"),
        ("summae", "summa"),
        ("sumos", "sumo"),
        ("sums total", "sum total"),
        ("sums-total", "sum-total"),
        ("Sundanese", "Sundanese"),
        ("supercilia", "supercilium"),
        ("superficies", "superficies"),
        ("supernovae", "supernova"),
        ("supernovas", "supernova"),
        ("superstrata", "superstratum"),
        ("supposita", "suppositum"),
        ("supracleithra", "supracleithrum"),
        ("suprascapulae", "suprascapula"),
        ("surculi", "surculus"),
        ("surimonos", "surimono"),
        ("sustentacula", "sustentaculum"),
        ("Swahilese", "Swahilese"),
        ("swine", "swine"),
        ("swines", "swine"),
        ("switchfoots", "switchfoot"),
        ("syllabaria", "syllabarium"),
        ("syllabi", "syllabus"),
        ("syllabuses", "syllabus"),
        ("symplasmata", "symplasma"),
        ("sympodia", "sympodium"),
        ("symposia", "symposium"),
        ("symposiums", "symposium"),
        ("synaesthesiae", "synaesthesia"),
        ("synangia", "synangium"),
        ("synapticulae", "synapticula"),
        ("synapticulas", "synapticula"),
        ("synaxaria", "synaxarium"),
        ("synaxes", "synaxis"),
        ("syncelli", "syncellus"),
        ("syncytia", "syncytium"),
        ("syndendria", "syndendrium"),
        ("synechiae", "synechia"),
        ("synedria", "synedrium"),
        ("synesthesiae", "synesthesia"),
        ("syntagmas", "syntagma"),
        ("syntagmata", "syntagma"),
        ("syntaxes", "syntaxis"),
        ("synthroni", "synthronus"),
        ("synusiae", "synusia"),
        ("syphilomata", "syphiloma"),
        ("syringes", "syringe"),
        ("syrinxes", "syrinx"),
        ("syrphi", "syrphus"),
        ("syrtes", "syrtis"),
        ("tabellae", "tabella"),
        ("tableaus", "tableau"),
        ("tableaux", "tableau"),
        ("tablina", "tablinum"),
        ("tabulae", "tabula"),
        ("Tacomans", "Tacoman"),
        ("taeniae", "taenia"),
        ("taenias", "taenia"),
        ("tagmata", "tagma"),
        ("Taikos", "Taiko"),
        ("taleae", "talea"),
        ("tali", "talus"),
        ("talismans", "talisman"),
        ("talouses", "talouse"),
        ("tangoes", "tango"),
        ("tangos", "tango"),
        ("tarantate", "tarantata"),
        ("tarantati", "tarantato"),
        ("tarsi", "tarsus"),
        ("taxa", "taxon"),
        ("taxes", "taxis"),
        ("tazze", "tazza"),
        ("teal", "teal"),
        ("teals", "teal"),
        ("technos", "techno"),
        ("teeth", "tooth"),
        ("tegmenta", "tegmentum"),
        ("tegmina", "tegmen"),
        ("tegulae", "tegula"),
        ("telamones", "telamon"),
        ("telia", "telium"),
        ("temblores", "temblor"),
        ("tempi", "tempo"),
        ("tempietti", "tempietto"),
        ("tempos", "tempo"),
        ("tenacula", "tenaculum"),
        ("tenderfoots", "tenderfoot"),
        ("Tenggerese", "Tenggerese"),
        ("teniae", "tenia"),
        ("tenias", "tenia"),
        ("tenorini", "tenorino"),
        ("tentacula", "tentaculum"),
        ("tentamina", "tentamen"),
        ("tenues", "tenuis"),
        ("tepidaria", "tepidarium"),
        ("teratomata", "teratoma"),
        ("terebella", "terebellum"),
        ("terebratulae", "terebratula"),
        ("terebratulas", "terebratula"),
        ("teredines", "teredo"),
        ("teredos", "teredo"),
        ("terga", "tergum"),
        ("termini", "terminus"),
        ("terminuses", "terminus"),
        ("termites", "termes"),
        ("terpen", "terp"),
        ("terps", "terp"),
        ("terrae filii", "terrae filius"),
        ("terraria", "terrarium"),
        ("terrariums", "terrarium"),
        ("terrazzos", "terrazzo"),
        ("terremare", "terramara"),
        ("territoria", "territorium"),
        ("terzetti", "terzetto"),
        ("tessellae", "tessella"),
        ("tessellas", "tessella"),
        ("tesserae", "tessera"),
        ("testes", "testes"),
        ("testudos", "testudo"),
        ("tetanother", "tetanothrum"),
        ("tetanothra", "tetanothrum"),
        ("tete a tetes", "tete a tete"),
        ("tete-a-tetes", "tete-a-tete"),
        ("tetracola", "tetracolon"),
        ("tetragrammata", "tetragrammaton"),
        ("tetrahedra", "tetrahedron"),
        ("tetrahedrons", "tetrahedron"),
        ("tetrapleura", "tetrapleuron"),
        ("tetrapleurons", "tetrapleuron"),
        ("tetrasporangia", "tetrasporangium"),
        ("thalami", "thalamus"),
        ("thalamoi", "thalamos"),
        ("thanatoria", "thanatorium"),
        ("thaumaturgi", "thaumaturgus"),
        ("thebe", "thebe"),
        ("thecae", "theca"),
        ("theirs", "its"),
        ("thelyca", "thelycum"),
        ("them", "it"),
        ("themata", "thema"),
        ("themselves", "themselves"),
        ("theologoumena", "theologoumenon"),
        ("thesauri", "thesaurus"),
        ("thesauruses", "thesaurus"),
        ("these", "this"),
        ("they", "it"),
        ("thieves", "thief"),
        ("thoes", "thos"),
        ("tholi", "tholus"),
        ("tholoi", "tholos"),
        ("thoraces", "thorax"),
        ("thoraxes", "thorax"),
        ("those", "that"),
        ("thrasoes", "thraso"),
        ("thrasones", "thraso"),
        ("thymi", "thymus"),
        ("thymiateria", "thymiaterion"),
        ("thyridia", "thyridium"),
        ("thyrsi", "thyrsus"),
        ("tibiae", "tibia"),
        ("Timorese", "Timorese"),
        ("timpanos", "timpano"),
        ("tintinnabula", "tintinnabulum"),
        ("tipulae", "tipula"),
        ("Tirolese", "Tirolese"),
        ("tiros", "tiro"),
        ("tobaccos", "tobacco"),
        ("Tocharese", "Tocharese"),
        ("toes", "toe"),
        ("Togos", "Togo"),
        ("Tokyos", "Tokyo"),
        ("tolkachi", "tolkach"),
        ("tomatoes", "tomato"),
        ("tombaroli", "tombarolo"),
        ("tomia", "tomium"),
        ("tondi", "tondo"),
        ("tongs", "tongs"),
        ("Tonkinese", "Tonkinese"),
        ("tonneaus", "tonneau"),
        ("tonneaux", "tonneau"),
        ("topazes", "topaz"),
        ("topoi", "topos"),
        ("toreros", "torero"),
        ("tori", "torus"),
        ("toriles", "toril"),
        ("Torinese", "Torinese"),
        ("Torinos", "Torino"),
        ("torma", "torma"),
        ("tormas", "torma"),
        ("Tornesi", "Tornese"),
        ("torni", "tornus"),
        ("Torontos", "Toronto"),
        ("torsos", "torso"),
        ("tortillas espanolas", "tortilla espanola"),
        ("tortrices", "tortrix"),
        ("torulae", "torula"),
        ("toruli", "torulus"),
        ("toruses", "torus"),
        ("tours de force", "tour de force"),
        ("toxica", "toxicum"),
        ("toxii", "toxius"),
        ("toxoplasmata", "toxoplasma"),
        ("trabeae", "trabea"),
        ("trabeculae", "trabecula"),
        ("tracheae", "trachea"),
        ("tractatrices", "tractatrix"),
        ("tractella", "tractellum"),
        ("tractrices", "tractrix"),
        ("tragi", "tragus"),
        ("trapezia", "trapezium"),
        ("trapezii", "trapezius"),
        ("trapeziums", "trapezium"),
        ("trapezohedra", "trapezohedron"),
        ("trapezohedrons", "trapezohedron"),
        ("trattorias", "trattoria"),
        ("trattorie", "trattoria"),
        ("traumas", "trauma"),
        ("traumata", "trauma"),
        ("trellises", "trellis"),
        ("tremolos", "tremolo"),
        ("treponemata", "treponema"),
        ("trichidia", "trichidium"),
        ("trichinae", "trichina"),
        ("trichine", "trichina"),
        ("trichomata", "trichoma"),
        ("triclinia", "triclinium"),
        ("trientes", "triens"),
        ("triforia", "triforium"),
        ("trilbys", "trilby"),
        ("tripla", "triplum"),
        ("triradii", "triradius"),
        ("triumviri", "triumvir"),
        ("triumvirs", "triumvir"),
        ("trochi", "trochus"),
        ("trochuses", "trochus"),
        ("trockenbeerenauslesen", "trockenbeerenauslese"),
        ("tropaeola", "tropaeolum"),
        ("tropaeolums", "tropaeolum"),
        ("troparia", "troparion"),
        ("tropides", "tropis"),
        ("trousers", "trousers"),
        ("trousseaus", "trousseau"),
        ("trousseaux", "trousseau"),
        ("trout", "trout"),
        ("trulli", "trullo"),
        ("trumeaux", "trumeau"),
        ("tsuba", "tsuba"),
        ("tsubas", "tsuba"),
        ("tsubo", "tsubo"),
        ("tsubos", "tsubo"),
        ("tubercula", "tuberculum"),
        ("tuberculomas", "tuberculoma"),
        ("tuberculomata", "tuberculoma"),
        ("tuberes", "tuber"),
        ("tubuli", "tubulus"),
        ("tumuli", "tumulus"),
        ("tuna", "tuna"),
        ("turbot", "turbot"),
        ("turbots", "turbot"),
        ("turfs", "turf"),
        ("turrones", "turron"),
        ("turrons", "turron"),
        ("turves", "turf"),
        ("tympana", "tympanum"),
        ("typos", "typo"),
        ("Tyrolese", "Tyrolese"),
        ("tyros", "tyro"),
        ("udarniki", "udarnik"),
        ("ulpanim", "ulpan"),
        ("ultimata", "ultimatum"),
        ("ultimatums", "ultimatum"),
        ("umbilici", "umbilicus"),
        ("umbilicuses", "umbilicus"),
        ("umbones", "umbo"),
        ("umbos", "umbo"),
        ("umbrae", "umbra"),
        ("umbras", "umbra"),
        ("umwelten", "umwelt"),
        ("unci", "uncus"),
        ("unciae", "uncia"),
        ("uncini", "uncinus"),
        ("ungues", "unguis"),
        ("uniones", "unio"),
        ("unios", "unio"),
        ("uomini", "uomo"),
        ("uomini universali", "uomo universale"),
        ("uraei", "uraeus"),
        ("uredia", "uredium"),
        ("uredinia", "uredinium"),
        ("uredosori", "uredosorus"),
        ("uri", "urus"),
        ("urodaea", "urodaeum"),
        ("urodea", "urodeum"),
        ("uruses", "urus"),
        ("us", "me"),
        ("usneae", "usnea"),
        ("usneas", "usnea"),
        ("ustilagines", "ustilago"),
        ("uteri", "uterus"),
        ("uteruses", "uterus"),
        ("utriculariae", "utricularia"),
        ("uvae", "uva"),
        ("vaalpens", "vaalpens"),
        ("vaalpensen", "vaalpens"),
        ("vacua", "vacuum"),
        ("vacuums", "vacuum"),
        ("vagi", "vagus"),
        ("vaginae", "vagina"),
        ("vaginas", "vagina"),
        ("vaginulae", "vaginula"),
        ("valleculae", "vallecula"),
        ("valute", "valuta"),
        ("valuten", "valuta"),
        ("valvulae", "valvula"),
        ("vaporetti", "vaporetto"),
        ("vaporettos", "vaporetto"),
        ("vaqueros", "vaquero"),
        ("varellaes", "varella"),
        ("varely", "varella"),
        ("variae lectiones", "varia lectio"),
        ("varices", "varix"),
        ("vasa", "vas"),
        ("vascula", "vasculum"),
        ("vasculitides", "vasculitis"),
        ("vasculitises", "vasculitis"),
        ("vasculums", "vasculum"),
        ("vedutas", "veduta"),
        ("vedute", "veduta"),
        ("veg", "veg"),
        ("veges", "veg"),
        ("vehicula", "vehiculum"),
        ("vela", "velum"),
        ("velamina", "velamen"),
        ("velaria", "velarium"),
        ("velums", "velum"),
        ("venae", "vena"),
        ("veneres", "venus"),
        ("venuses", "venus"),
        ("vermicellos", "vermicello"),
        ("vermiculi", "vermiculus"),
        ("Vermontese", "Vermontese"),
        ("Veronese", "Veronese"),
        ("verrucae", "verruca"),
        ("vers libres", "vers libre"),
        ("versiculi", "versiculus"),
        ("versos", "verso"),
        ("vertebrae", "vertebra"),
        ("vertexes", "vertex"),
        ("vertices", "vertex"),
        ("verticilli", "verticillus"),
        ("vesiculae", "vesicula"),
        ("vestigia", "vestigium"),
        ("vetturini", "vetturino"),
        ("viali", "viale"),
        ("viatica", "viaticum"),
        ("vibices", "vibex"),
        ("vibracula", "vibraculum"),
        ("vibratos", "vibrato"),
        ("vibriones", "vibrio"),
        ("vibrios", "vibrio"),
        ("Viennese", "Viennese"),
        ("Vietnamese", "Vietnamese"),
        ("vilas", "vila"),
        ("vile", "vila"),
        ("villanelle", "villanella"),
        ("villi", "villus"),
        ("villini", "villino"),
        ("vincula", "vinculum"),
        ("violette", "violetta"),
        ("violoncellos", "violoncello"),
        ("vires", "vis"),
        ("virgae", "virga"),
        ("Virgos", "Virgo"),
        ("viri", "virus"),
        ("virii", "virus"),
        ("virtuosi", "virtuoso"),
        ("virtuosos", "virtuoso"),
        ("viruses", "virus"),
        ("viscera", "viscus"),
        ("vitellaria", "vitellarium"),
        ("vittae", "vitta"),
        ("vivaria", "vivarium"),
        ("vivariums", "vivarium"),
        ("vlakten", "vlakte"),
        ("vlaktes", "vlakte"),
        ("voeux", "voeu"),
        ("volcanelli", "volcanello"),
        ("volcanoes", "volcano"),
        ("volcanos", "volcano"),
        ("vomicae", "vomica"),
        ("vomicas", "vomica"),
        ("vomitoria", "vomitorium"),
        ("vomitoriums", "vomitorium"),
        ("voorbokke", "voorbok"),
        ("vorspiele", "vorspiel"),
        ("vorstellungen", "vorstellung"),
        ("vortexes", "vortex"),
        ("vortices", "vortex"),
        ("wadies", "wadi"),
        ("wadis", "wadi"),
        ("wadys", "wady"),
        ("waldoes", "waldo"),
        ("waldos", "waldo"),
        ("waltzes", "waltz"),
        ("wanderjahre", "wanderjahr"),
        ("wandervogel", "wandervogel"),
        ("washers up", "washer up"),
        ("washers-up", "washer-up"),
        ("we", "I"),
        ("weirdos", "weirdo"),
        ("Wenchowese", "Wenchowese"),
        ("wharfs", "wharf"),
        ("wharves", "wharf"),
        ("what", "what"),
        ("whatever", "whatever"),
        ("whatsoever", "whatsoever"),
        ("white staves", "white staff"),
        ("whiting", "whiting"),
        ("Whitmanese", "Whitmanese"),
        ("who", "who"),
        ("whoever", "whoever"),
        ("whom", "whom"),
        ("whomever", "whomever"),
        ("whomsoever", "whomsoever"),
        ("whose", "whose"),
        ("whosesoever", "whosesoever"),
        ("whosever", "whosever"),
        ("whosoever", "whosoever"),
        ("wildebeest", "wildebeest"),
        ("wildebeests", "wildebeest"),
        ("wives", "wife"),
        ("wolves", "wolf"),
        ("women children", "woman child"),
        ("women servants", "woman servant"),
        ("women-children", "woman-child"),
        ("women-servants", "woman-servant"),
        ("womenchildren", "womanchild"),
        ("wreaths", "wreath"),
        ("xanthomas", "xanthoma"),
        ("xanthomata", "xanthoma"),
        ("xiphiplastra", "xiphiplastron"),
        ("xiphopagi", "xiphopagus"),
        ("xiphoplastra", "xiphoplastron"),
        ("xoana", "xoanon"),
        ("xysti", "xystus"),
        ("Yakimans", "Yakiman"),
        ("Yamoussoukros", "Yamoussoukro"),
        ("yarramans", "yarraman"),
        ("yarramen", "yarraman"),
        ("Yengeese", "Yengeese"),
        ("yeses", "yes"),
        ("yo yos", "yo yo"),
        ("yo-yos", "yo-yo"),
        ("yoes", "yo"),
        ("Yokohamans", "Yokohaman"),
        ("you", "you"),
        ("yours", "yours"),
        ("yourselves", "yourself"),
        ("Yumans", "Yuman"),
        ("Yunnanese", "Yunnanese"),
        ("yuon", "yuo"),
        ("zadrugas", "zadruga"),
        ("zadruge", "zadruga"),
        ("zeitgebers", "zeitgeber"),
        ("zemirot", "zemirah"),
        ("zemiroth", "zemirah"),
        ("zeppoli", "zeppole"),
        ("zeros", "zero"),
        ("Zibos", "Zibo"),
        ("zingani", "zingano"),
        ("zite", "zita"),
        ("zitelle", "zitella"),
        ("ziti", "zita"),
        ("zizzes", "zizz"),
        ("zloty", "zloty"),
        ("zlotys", "zloty"),
        ("zoa", "zoon"),
        ("zoaeae", "zoaea"),
        ("zoaria", "zoarium"),
        ("zoeae", "zoea"),
        ("zoeas", "zoea"),
        ("zooeae", "zooea"),
        ("zooecia", "zooecium"),
        ("zoophori", "zoophorus"),
        ("zoosporangia", "zoosporangium"),
        ("zophori", "zophorus"),
        ("zucche", "zucca"),
        ("zucchini", "zucchini"),
        ("zucchinis", "zucchini"),
        ("zuppe", "zuppa"),
        ("zuzim", "zuz"),
        ("zuzzes", "zuz"),
        ("zyga", "zygon"),
        ("zygantra", "zygantrum"),
        ("zygomas", "zygoma"),
        ("zygomata", "zygoma"),
    ]
    .iter()
    .cloned()
    .collect()
});

static PLURAL_RECOGNIZERS: Lazy<Vec<Recognizer>> = Lazy::new(|| {
    vec![
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)staves$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 0
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)staffs$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 1
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)staves$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 2
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)genera$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 3
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)people$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 4
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)persons$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 5
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)hertz$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 6
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)lux$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 7
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)siemens$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 8
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)brothers$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 9
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)brethren$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 10
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)children$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 11
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)cows$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 12
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)kine$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 13
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.+)-oxen$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 14
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)menschen$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 15
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)elves$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 16
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)hoofs$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 17
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)hooves$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 18
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)knives$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 19
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)leaves$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 20
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)lives$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 21
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)loaves$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 22
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)shelves$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 23
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)thieves$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 24
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)wives$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 25
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)wolves$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 26
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)humans$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 27
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)feet$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 28
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)geese$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 29
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)lice$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 30
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)men$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 31
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)mice$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 32
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)teeth$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 33
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)buzzes$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 34
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)fizzes$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 35
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)frizzes$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 36
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)fuzzes$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 37
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)jazzes$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 38
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)proboscises$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 39
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)proboscides$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 40
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)bemas$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 41
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)bemata$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 42
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)dramas$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 43
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)edemas$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 44
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)edemata$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 45
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)lemmas$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 46
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)lemmata$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 47
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)sarcomas$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 48
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)sarcomata$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 49
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)stomas$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 50
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)stomata$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 51
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)novas$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 52
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)novae$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 53
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)umbras$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 54
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)umbrae$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 55
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)lumens$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 56
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)lumina$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 57
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)data$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 58
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)stratums$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 59
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)strata$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 60
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)bacilli$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 61
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)nuclei$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 62
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)hedrons$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 63
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)hedra$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 64
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)helions$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 65
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)helia$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 66
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)legomena$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 67
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)phenomena$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 68
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)helices$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 69
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)measles$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 70
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)pox$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 71
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)basses$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 72
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)bass$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 73
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)deer$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 74
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)fish$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 75
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)fowls$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 76
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)fowl$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 77
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)sheep$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 78
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)wildebeests$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 79
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)wildebeest$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 80
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)craft$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 81
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)gases$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 82
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*)glottises$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 83
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.+)star generals$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 84
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*?)(?:-general)$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: Some(1),
        }, // 85
        Recognizer {
            regex: Regex::new(&format!(
                r#"(?i)\A({preposition_re})(?: them)$"#,
                preposition_re = PREPOSITION_REGEX_STR
            ))
            .unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 86
        Recognizer {
            regex: Regex::new(r#"(?i)\A(?:sons-of-)(.*?)$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: Some(1),
        }, // 87
        Recognizer {
            regex: Regex::new(r#"(?i)\A(?:sons of )(.*?)$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: Some(1),
        }, // 88
        Recognizer {
            regex: Regex::new(&format!(
                r#"(?i)\A(.*?)(?:-)({preposition_re})(?:-)(.*?)$"#,
                preposition_re = PREPOSITION_REGEX_STR
            ))
            .unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: Some(1),
        }, // 89
        Recognizer {
            regex: Regex::new(&format!(
                r#"(?i)\A(.*?)(?: )({preposition_re})(?: )(.*?)$"#,
                preposition_re = PREPOSITION_REGEX_STR
            ))
            .unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: Some(1),
        }, // 90
        Recognizer {
            regex: Regex::new(&format!(
                r#"(?i)\A({preposition_re})(?:-)(.*?)$"#,
                preposition_re = PREPOSITION_REGEX_STR
            ))
            .unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: Some(2),
        }, // 91
        Recognizer {
            regex: Regex::new(&format!(
                r#"(?i)\A({preposition_re})(?: )(.*?)$"#,
                preposition_re = PREPOSITION_REGEX_STR
            ))
            .unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: Some(2),
        }, // 92
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*?)(?:-errant)$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: Some(1),
        }, // 93
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.*?)(?: errant)$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: Some(1),
        }, // 94
        Recognizer {
            regex: Regex::new(&format!(
                r#"(?i)\A(.*?)(?:-)({preposition_re})$"#,
                preposition_re = PREPOSITION_REGEX_STR
            ))
            .unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: Some(1),
        }, // 95
        Recognizer {
            regex: Regex::new(&format!(
                r#"(?i)\A(.*?)(?: )({preposition_re})$"#,
                preposition_re = PREPOSITION_REGEX_STR
            ))
            .unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: Some(1),
        }, // 96
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.+[aeiou])os$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 97
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.+[aeo])lves$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 98
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.+[aiy])nxes$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 99
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.+[aiy])nges$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 100
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.+)arves$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 101
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.+)ceps$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 102
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.+[cs])hes$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 103
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.+)eaves$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 104
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.+)eaus$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 105
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.+)eaux$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 106
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.+)ieus$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 107
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.+)ieux$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 108
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.+)nives$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 109
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.+)oes$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 110
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.+)quies$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 111
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.+[aeiou])ys$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 112
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.+)sses$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 113
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.+)orses$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 114
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.+[au])rses$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 115
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.+)nses$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 116
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.+[^ns])ses$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 117
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.+)trixes$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 118
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.+)trices$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 119
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.+)uses$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 120
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.+)xes$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 121
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.+)ies$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 122
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.+)zzes$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 123
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.+)zoa$"#).unwrap(),
            is_nonindicative: false,
            recursive_capture_idx: None,
        }, // 124
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.+)ses$"#).unwrap(),
            is_nonindicative: true,
            recursive_capture_idx: None,
        }, // 125
        Recognizer {
            regex: Regex::new(r#"(?i)\A(.+)s$"#).unwrap(),
            is_nonindicative: true,
            recursive_capture_idx: None,
        }, // 126
    ]
});

/// Converts a noun to its singular form. Whenever possible, this function
/// returns static data or a reference to the string it was given, rather than
/// allocating a new `String`.
///
/// The case of the returned word will not necessarily match the case of the
/// original word, and when given shout case like "BUSINESSPEOPLE" you may get
/// odd casing results like "BUSINESSperson". You are encouraged to always
/// pass words in their poroper case, either lower case or title case as
/// appropriate.
pub fn convert_to_singular(word: &str) -> Cow<'_, str> {
    #[cfg(feature = "debug")]
    println!("convert_to_singular({})", word);

    if word.is_empty() {
        #[cfg(feature = "debug")]
        println!("  word is empty");
        return Cow::Borrowed("");
    }

    if let Some(s) = SINGULAR_OF.get(word) {
        #[cfg(feature = "debug")]
        println!("  found word '{}' in SINGULAR_OF", word);
        return Cow::Borrowed(s);
    }
    if let Some(s) = SINGULAR_OF.get(word.to_lowercase().as_str()) {
        #[cfg(feature = "debug")]
        println!("  found lc word '{}' in SINGULAR_OF", word);
        return Cow::Borrowed(s);
    }
    if word.len() > 1 {
        let tc_word = to_titlecase(word);
        if let Some(p) = SINGULAR_OF.get(tc_word.as_str()) {
            #[cfg(feature = "debug")]
            println!("  found tc word '{}' in SINGULAR_OF", word);
            return Cow::Borrowed(p);
        }
    }

    if is_singular(word) {
        #[cfg(feature = "debug")]
        println!("  word '{}' is already singular", word);
        return Cow::Borrowed(word);
    }

    if SINGULAR_POSSESSIVE_REGEX.is_match(word) {
        #[cfg(feature = "debug")]
        println!("  word '{}' matches singular possessive regex", word);
        return crate::adjective::Adjective::new(word).singular();
    }

    // (?i)\A(.*)staves$
    if let Some(caps) = PLURAL_RECOGNIZERS[0].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}stave"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 0) and became {}"#,
            word, PLURAL_RECOGNIZERS[0].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)staffs$
    if let Some(caps) = PLURAL_RECOGNIZERS[1].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}staff"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 1) and became {}"#,
            word, PLURAL_RECOGNIZERS[1].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)staves$
    if let Some(caps) = PLURAL_RECOGNIZERS[2].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}staff"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 2) and became {}"#,
            word, PLURAL_RECOGNIZERS[2].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)genera$
    if let Some(caps) = PLURAL_RECOGNIZERS[3].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}genus"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 3) and became {}"#,
            word, PLURAL_RECOGNIZERS[3].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)people$
    if let Some(caps) = PLURAL_RECOGNIZERS[4].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}person"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 4) and became {}"#,
            word, PLURAL_RECOGNIZERS[4].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)persons$
    if let Some(caps) = PLURAL_RECOGNIZERS[5].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}person"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 5) and became {}"#,
            word, PLURAL_RECOGNIZERS[5].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)hertz$
    if let Some(caps) = PLURAL_RECOGNIZERS[6].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}hertz"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 6) and became {}"#,
            word, PLURAL_RECOGNIZERS[6].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)lux$
    if let Some(caps) = PLURAL_RECOGNIZERS[7].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}lux"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 7) and became {}"#,
            word, PLURAL_RECOGNIZERS[7].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)siemens$
    if let Some(caps) = PLURAL_RECOGNIZERS[8].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}siemens"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 8) and became {}"#,
            word, PLURAL_RECOGNIZERS[8].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)brothers$
    if let Some(caps) = PLURAL_RECOGNIZERS[9].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}brother"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 9) and became {}"#,
            word, PLURAL_RECOGNIZERS[9].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)brethren$
    if let Some(caps) = PLURAL_RECOGNIZERS[10].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}brother"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 10) and became {}"#,
            word, PLURAL_RECOGNIZERS[10].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)children$
    if let Some(caps) = PLURAL_RECOGNIZERS[11].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}child"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 11) and became {}"#,
            word, PLURAL_RECOGNIZERS[11].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)cows$
    if let Some(caps) = PLURAL_RECOGNIZERS[12].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}cow"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 12) and became {}"#,
            word, PLURAL_RECOGNIZERS[12].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)kine$
    if let Some(caps) = PLURAL_RECOGNIZERS[13].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}cow"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 13) and became {}"#,
            word, PLURAL_RECOGNIZERS[13].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)-oxen$
    if let Some(caps) = PLURAL_RECOGNIZERS[14].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}-ox"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 14) and became {}"#,
            word, PLURAL_RECOGNIZERS[14].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)menschen$
    if let Some(caps) = PLURAL_RECOGNIZERS[15].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}mensch"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 15) and became {}"#,
            word, PLURAL_RECOGNIZERS[15].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)elves$
    if let Some(caps) = PLURAL_RECOGNIZERS[16].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}elf"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 16) and became {}"#,
            word, PLURAL_RECOGNIZERS[16].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)hoofs$
    if let Some(caps) = PLURAL_RECOGNIZERS[17].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}hoof"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 17) and became {}"#,
            word, PLURAL_RECOGNIZERS[17].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)hooves$
    if let Some(caps) = PLURAL_RECOGNIZERS[18].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}hoof"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 18) and became {}"#,
            word, PLURAL_RECOGNIZERS[18].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)knives$
    if let Some(caps) = PLURAL_RECOGNIZERS[19].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}knife"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 19) and became {}"#,
            word, PLURAL_RECOGNIZERS[19].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)leaves$
    if let Some(caps) = PLURAL_RECOGNIZERS[20].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}leaf"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 20) and became {}"#,
            word, PLURAL_RECOGNIZERS[20].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)lives$
    if let Some(caps) = PLURAL_RECOGNIZERS[21].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}life"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 21) and became {}"#,
            word, PLURAL_RECOGNIZERS[21].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)loaves$
    if let Some(caps) = PLURAL_RECOGNIZERS[22].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}loaf"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 22) and became {}"#,
            word, PLURAL_RECOGNIZERS[22].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)shelves$
    if let Some(caps) = PLURAL_RECOGNIZERS[23].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}shelf"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 23) and became {}"#,
            word, PLURAL_RECOGNIZERS[23].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)thieves$
    if let Some(caps) = PLURAL_RECOGNIZERS[24].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}thief"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 24) and became {}"#,
            word, PLURAL_RECOGNIZERS[24].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)wives$
    if let Some(caps) = PLURAL_RECOGNIZERS[25].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}wife"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 25) and became {}"#,
            word, PLURAL_RECOGNIZERS[25].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)wolves$
    if let Some(caps) = PLURAL_RECOGNIZERS[26].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}wolf"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 26) and became {}"#,
            word, PLURAL_RECOGNIZERS[26].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)humans$
    if let Some(caps) = PLURAL_RECOGNIZERS[27].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}human"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 27) and became {}"#,
            word, PLURAL_RECOGNIZERS[27].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)feet$
    if let Some(caps) = PLURAL_RECOGNIZERS[28].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}foot"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 28) and became {}"#,
            word, PLURAL_RECOGNIZERS[28].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)geese$
    if let Some(caps) = PLURAL_RECOGNIZERS[29].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}goose"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 29) and became {}"#,
            word, PLURAL_RECOGNIZERS[29].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)lice$
    if let Some(caps) = PLURAL_RECOGNIZERS[30].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}louse"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 30) and became {}"#,
            word, PLURAL_RECOGNIZERS[30].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)men$
    if let Some(caps) = PLURAL_RECOGNIZERS[31].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}man"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 31) and became {}"#,
            word, PLURAL_RECOGNIZERS[31].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)mice$
    if let Some(caps) = PLURAL_RECOGNIZERS[32].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}mouse"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 32) and became {}"#,
            word, PLURAL_RECOGNIZERS[32].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)teeth$
    if let Some(caps) = PLURAL_RECOGNIZERS[33].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}tooth"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 33) and became {}"#,
            word, PLURAL_RECOGNIZERS[33].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)buzzes$
    if let Some(caps) = PLURAL_RECOGNIZERS[34].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}buzz"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 34) and became {}"#,
            word, PLURAL_RECOGNIZERS[34].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)fizzes$
    if let Some(caps) = PLURAL_RECOGNIZERS[35].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}fizz"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 35) and became {}"#,
            word, PLURAL_RECOGNIZERS[35].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)frizzes$
    if let Some(caps) = PLURAL_RECOGNIZERS[36].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}frizz"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 36) and became {}"#,
            word, PLURAL_RECOGNIZERS[36].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)fuzzes$
    if let Some(caps) = PLURAL_RECOGNIZERS[37].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}fuzz"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 37) and became {}"#,
            word, PLURAL_RECOGNIZERS[37].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)jazzes$
    if let Some(caps) = PLURAL_RECOGNIZERS[38].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}jazz"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 38) and became {}"#,
            word, PLURAL_RECOGNIZERS[38].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)proboscises$
    if let Some(caps) = PLURAL_RECOGNIZERS[39].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}proboscis"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 39) and became {}"#,
            word, PLURAL_RECOGNIZERS[39].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)proboscides$
    if let Some(caps) = PLURAL_RECOGNIZERS[40].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}proboscis"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 40) and became {}"#,
            word, PLURAL_RECOGNIZERS[40].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)bemas$
    if let Some(caps) = PLURAL_RECOGNIZERS[41].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}bema"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 41) and became {}"#,
            word, PLURAL_RECOGNIZERS[41].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)bemata$
    if let Some(caps) = PLURAL_RECOGNIZERS[42].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}bema"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 42) and became {}"#,
            word, PLURAL_RECOGNIZERS[42].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)dramas$
    if let Some(caps) = PLURAL_RECOGNIZERS[43].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}drama"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 43) and became {}"#,
            word, PLURAL_RECOGNIZERS[43].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)edemas$
    if let Some(caps) = PLURAL_RECOGNIZERS[44].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}edema"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 44) and became {}"#,
            word, PLURAL_RECOGNIZERS[44].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)edemata$
    if let Some(caps) = PLURAL_RECOGNIZERS[45].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}edema"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 45) and became {}"#,
            word, PLURAL_RECOGNIZERS[45].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)lemmas$
    if let Some(caps) = PLURAL_RECOGNIZERS[46].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}lemma"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 46) and became {}"#,
            word, PLURAL_RECOGNIZERS[46].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)lemmata$
    if let Some(caps) = PLURAL_RECOGNIZERS[47].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}lemma"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 47) and became {}"#,
            word, PLURAL_RECOGNIZERS[47].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)sarcomas$
    if let Some(caps) = PLURAL_RECOGNIZERS[48].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}sarcoma"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 48) and became {}"#,
            word, PLURAL_RECOGNIZERS[48].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)sarcomata$
    if let Some(caps) = PLURAL_RECOGNIZERS[49].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}sarcoma"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 49) and became {}"#,
            word, PLURAL_RECOGNIZERS[49].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)stomas$
    if let Some(caps) = PLURAL_RECOGNIZERS[50].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}stoma"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 50) and became {}"#,
            word, PLURAL_RECOGNIZERS[50].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)stomata$
    if let Some(caps) = PLURAL_RECOGNIZERS[51].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}stoma"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 51) and became {}"#,
            word, PLURAL_RECOGNIZERS[51].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)novas$
    if let Some(caps) = PLURAL_RECOGNIZERS[52].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}nova"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 52) and became {}"#,
            word, PLURAL_RECOGNIZERS[52].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)novae$
    if let Some(caps) = PLURAL_RECOGNIZERS[53].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}nova"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 53) and became {}"#,
            word, PLURAL_RECOGNIZERS[53].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)umbras$
    if let Some(caps) = PLURAL_RECOGNIZERS[54].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}umbra"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 54) and became {}"#,
            word, PLURAL_RECOGNIZERS[54].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)umbrae$
    if let Some(caps) = PLURAL_RECOGNIZERS[55].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}umbra"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 55) and became {}"#,
            word, PLURAL_RECOGNIZERS[55].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)lumens$
    if let Some(caps) = PLURAL_RECOGNIZERS[56].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}lumen"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 56) and became {}"#,
            word, PLURAL_RECOGNIZERS[56].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)lumina$
    if let Some(caps) = PLURAL_RECOGNIZERS[57].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}lumen"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 57) and became {}"#,
            word, PLURAL_RECOGNIZERS[57].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)data$
    if let Some(caps) = PLURAL_RECOGNIZERS[58].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}datum"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 58) and became {}"#,
            word, PLURAL_RECOGNIZERS[58].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)stratums$
    if let Some(caps) = PLURAL_RECOGNIZERS[59].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}stratum"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 59) and became {}"#,
            word, PLURAL_RECOGNIZERS[59].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)strata$
    if let Some(caps) = PLURAL_RECOGNIZERS[60].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}stratum"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 60) and became {}"#,
            word, PLURAL_RECOGNIZERS[60].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)bacilli$
    if let Some(caps) = PLURAL_RECOGNIZERS[61].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}bacillus"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 61) and became {}"#,
            word, PLURAL_RECOGNIZERS[61].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)nuclei$
    if let Some(caps) = PLURAL_RECOGNIZERS[62].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}nucleus"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 62) and became {}"#,
            word, PLURAL_RECOGNIZERS[62].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)hedrons$
    if let Some(caps) = PLURAL_RECOGNIZERS[63].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}hedron"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 63) and became {}"#,
            word, PLURAL_RECOGNIZERS[63].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)hedra$
    if let Some(caps) = PLURAL_RECOGNIZERS[64].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}hedron"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 64) and became {}"#,
            word, PLURAL_RECOGNIZERS[64].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)helions$
    if let Some(caps) = PLURAL_RECOGNIZERS[65].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}helion"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 65) and became {}"#,
            word, PLURAL_RECOGNIZERS[65].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)helia$
    if let Some(caps) = PLURAL_RECOGNIZERS[66].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}helion"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 66) and became {}"#,
            word, PLURAL_RECOGNIZERS[66].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)legomena$
    if let Some(caps) = PLURAL_RECOGNIZERS[67].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}legomenon"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 67) and became {}"#,
            word, PLURAL_RECOGNIZERS[67].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)phenomena$
    if let Some(caps) = PLURAL_RECOGNIZERS[68].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}phenomenon"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 68) and became {}"#,
            word, PLURAL_RECOGNIZERS[68].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)helices$
    if let Some(caps) = PLURAL_RECOGNIZERS[69].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}helix"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 69) and became {}"#,
            word, PLURAL_RECOGNIZERS[69].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)measles$
    if let Some(caps) = PLURAL_RECOGNIZERS[70].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}measles"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 70) and became {}"#,
            word, PLURAL_RECOGNIZERS[70].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)pox$
    if let Some(caps) = PLURAL_RECOGNIZERS[71].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}pox"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 71) and became {}"#,
            word, PLURAL_RECOGNIZERS[71].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)basses$
    if let Some(caps) = PLURAL_RECOGNIZERS[72].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}bass"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 72) and became {}"#,
            word, PLURAL_RECOGNIZERS[72].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)bass$
    if let Some(caps) = PLURAL_RECOGNIZERS[73].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}bass"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 73) and became {}"#,
            word, PLURAL_RECOGNIZERS[73].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)deer$
    if let Some(caps) = PLURAL_RECOGNIZERS[74].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}deer"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 74) and became {}"#,
            word, PLURAL_RECOGNIZERS[74].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)fish$
    if let Some(caps) = PLURAL_RECOGNIZERS[75].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}fish"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 75) and became {}"#,
            word, PLURAL_RECOGNIZERS[75].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)fowls$
    if let Some(caps) = PLURAL_RECOGNIZERS[76].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}fowl"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 76) and became {}"#,
            word, PLURAL_RECOGNIZERS[76].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)fowl$
    if let Some(caps) = PLURAL_RECOGNIZERS[77].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}fowl"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 77) and became {}"#,
            word, PLURAL_RECOGNIZERS[77].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)sheep$
    if let Some(caps) = PLURAL_RECOGNIZERS[78].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}sheep"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 78) and became {}"#,
            word, PLURAL_RECOGNIZERS[78].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)wildebeests$
    if let Some(caps) = PLURAL_RECOGNIZERS[79].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}wildebeest"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 79) and became {}"#,
            word, PLURAL_RECOGNIZERS[79].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)wildebeest$
    if let Some(caps) = PLURAL_RECOGNIZERS[80].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}wildebeest"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 80) and became {}"#,
            word, PLURAL_RECOGNIZERS[80].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)craft$
    if let Some(caps) = PLURAL_RECOGNIZERS[81].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}craft"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 81) and became {}"#,
            word, PLURAL_RECOGNIZERS[81].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)gases$
    if let Some(caps) = PLURAL_RECOGNIZERS[82].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}gas"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 82) and became {}"#,
            word, PLURAL_RECOGNIZERS[82].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)glottises$
    if let Some(caps) = PLURAL_RECOGNIZERS[83].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}glottis"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 83) and became {}"#,
            word, PLURAL_RECOGNIZERS[83].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)star generals$
    if let Some(caps) = PLURAL_RECOGNIZERS[84].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}star general"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 84) and became {}"#,
            word, PLURAL_RECOGNIZERS[84].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*?)(?:-general)$
    if let Some(caps) = PLURAL_RECOGNIZERS[85].regex.captures(word) {
        let cap1 = caps.get(1).unwrap().as_str();
        let singular = if is_plural(cap1) {
            convert_to_singular(cap1).to_string()
        } else {
            cap1.to_string()
        };
        let mut new_word = String::new();
        new_word.push_str(&singular);
        new_word.push_str("-general");
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched recursive pattern '(PL)-general' and became {}"#,
            word, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A({preposition_re})(?: them)$
    if let Some(caps) = PLURAL_RECOGNIZERS[86].regex.captures(word) {
        let cap1 = caps.get(1).unwrap().as_str();
        let mut new_word = String::new();
        new_word.push_str(cap1);
        new_word.push_str(" it");
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched recursive pattern '(PREP) them' and became {}"#,
            word, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(?:sons-of-)(.*?)$
    if let Some(caps) = PLURAL_RECOGNIZERS[87].regex.captures(word) {
        let cap1 = caps.get(1).unwrap().as_str();
        let singular = if is_plural(cap1) {
            convert_to_singular(cap1).to_string()
        } else {
            cap1.to_string()
        };
        let mut new_word = String::new();
        new_word.push_str("son-of-a-");
        new_word.push_str(&singular);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched recursive pattern 'sons-of-(PL)' and became {}"#,
            word, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(?:sons of )(.*?)$
    if let Some(caps) = PLURAL_RECOGNIZERS[88].regex.captures(word) {
        let cap1 = caps.get(1).unwrap().as_str();
        let singular = if is_plural(cap1) {
            convert_to_singular(cap1).to_string()
        } else {
            cap1.to_string()
        };
        let mut new_word = String::new();
        new_word.push_str("son of a ");
        new_word.push_str(&singular);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched recursive pattern 'sons of (PL)' and became {}"#,
            word, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*?)(?:-)({preposition_re})(?:-)(.*?)$
    if let Some(caps) = PLURAL_RECOGNIZERS[89].regex.captures(word) {
        let cap1 = caps.get(1).unwrap().as_str();
        let singular = if is_plural(cap1) {
            convert_to_singular(cap1).to_string()
        } else {
            cap1.to_string()
        };
        let cap2 = caps.get(2).unwrap().as_str();
        let cap3 = caps.get(3).unwrap().as_str();
        let mut new_word = String::new();
        new_word.push_str(&singular);
        new_word.push('-');
        new_word.push_str(cap2);
        new_word.push('-');
        new_word.push_str(cap3);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched recursive pattern '(PL)-(PREP)-*' and became {}"#,
            word, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*?)(?: )({preposition_re})(?: )(.*?)$
    if let Some(caps) = PLURAL_RECOGNIZERS[90].regex.captures(word) {
        let cap1 = caps.get(1).unwrap().as_str();
        let singular = if is_plural(cap1) {
            convert_to_singular(cap1).to_string()
        } else {
            cap1.to_string()
        };
        let cap2 = caps.get(2).unwrap().as_str();
        let cap3 = caps.get(3).unwrap().as_str();
        let mut new_word = String::new();
        new_word.push_str(&singular);
        new_word.push(' ');
        new_word.push_str(cap2);
        new_word.push(' ');
        new_word.push_str(cap3);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched recursive pattern '(PL) (PREP) *' and became {}"#,
            word, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A({preposition_re})(?:-)(.*?)$
    if let Some(caps) = PLURAL_RECOGNIZERS[91].regex.captures(word) {
        let cap1 = caps.get(1).unwrap().as_str();
        let cap2 = caps.get(2).unwrap().as_str();
        let singular = if is_plural(cap2) {
            convert_to_singular(cap2).to_string()
        } else {
            cap2.to_string()
        };
        let mut new_word = String::new();
        new_word.push_str(cap1);
        new_word.push('-');
        new_word.push_str(&singular);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched recursive pattern '(PREP)-(PL)' and became {}"#,
            word, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A({preposition_re})(?: )(.*?)$
    if let Some(caps) = PLURAL_RECOGNIZERS[92].regex.captures(word) {
        let cap1 = caps.get(1).unwrap().as_str();
        let cap2 = caps.get(2).unwrap().as_str();
        let singular = if is_plural(cap2) {
            convert_to_singular(cap2).to_string()
        } else {
            cap2.to_string()
        };
        let mut new_word = String::new();
        new_word.push_str(cap1);
        new_word.push(' ');
        new_word.push_str(&singular);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched recursive pattern '(PREP) (PL)' and became {}"#,
            word, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*?)(?:-errant)$
    if let Some(caps) = PLURAL_RECOGNIZERS[93].regex.captures(word) {
        let cap1 = caps.get(1).unwrap().as_str();
        let singular = if is_plural(cap1) {
            convert_to_singular(cap1).to_string()
        } else {
            cap1.to_string()
        };
        let mut new_word = String::new();
        new_word.push_str(&singular);
        new_word.push_str("-errant");
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched recursive pattern '(PL)-errant' and became {}"#,
            word, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*?)(?: errant)$
    if let Some(caps) = PLURAL_RECOGNIZERS[94].regex.captures(word) {
        let cap1 = caps.get(1).unwrap().as_str();
        let singular = if is_plural(cap1) {
            convert_to_singular(cap1).to_string()
        } else {
            cap1.to_string()
        };
        let mut new_word = String::new();
        new_word.push_str(&singular);
        new_word.push_str(" errant");
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched recursive pattern '(PL) errant' and became {}"#,
            word, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*?)(?:-)({preposition_re})$
    if let Some(caps) = PLURAL_RECOGNIZERS[95].regex.captures(word) {
        let cap1 = caps.get(1).unwrap().as_str();
        let singular = if is_plural(cap1) {
            convert_to_singular(cap1).to_string()
        } else {
            cap1.to_string()
        };
        let cap2 = caps.get(2).unwrap().as_str();
        let mut new_word = String::new();
        new_word.push_str(&singular);
        new_word.push('-');
        new_word.push_str(cap2);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched recursive pattern '(PL)-(PREP)' and became {}"#,
            word, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*?)(?: )({preposition_re})$
    if let Some(caps) = PLURAL_RECOGNIZERS[96].regex.captures(word) {
        let cap1 = caps.get(1).unwrap().as_str();
        let singular = if is_plural(cap1) {
            convert_to_singular(cap1).to_string()
        } else {
            cap1.to_string()
        };
        let cap2 = caps.get(2).unwrap().as_str();
        let mut new_word = String::new();
        new_word.push_str(&singular);
        new_word.push(' ');
        new_word.push_str(cap2);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched recursive pattern '(PL) (PREP)' and became {}"#,
            word, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+[aeiou])os$
    if let Some(caps) = PLURAL_RECOGNIZERS[97].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}o"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 97) and became {}"#,
            word, PLURAL_RECOGNIZERS[97].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+[aeo])lves$
    if let Some(caps) = PLURAL_RECOGNIZERS[98].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}lf"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 98) and became {}"#,
            word, PLURAL_RECOGNIZERS[98].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+[aiy])nxes$
    if let Some(caps) = PLURAL_RECOGNIZERS[99].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}nx"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 99) and became {}"#,
            word, PLURAL_RECOGNIZERS[99].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+[aiy])nges$
    if let Some(caps) = PLURAL_RECOGNIZERS[100].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}nx"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 100) and became {}"#,
            word, PLURAL_RECOGNIZERS[100].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)arves$
    if let Some(caps) = PLURAL_RECOGNIZERS[101].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}arf"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 101) and became {}"#,
            word, PLURAL_RECOGNIZERS[101].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)ceps$
    if let Some(caps) = PLURAL_RECOGNIZERS[102].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ceps"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 102) and became {}"#,
            word, PLURAL_RECOGNIZERS[102].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+[cs])hes$
    if let Some(caps) = PLURAL_RECOGNIZERS[103].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}h"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 103) and became {}"#,
            word, PLURAL_RECOGNIZERS[103].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)eaves$
    if let Some(caps) = PLURAL_RECOGNIZERS[104].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}eaf"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 104) and became {}"#,
            word, PLURAL_RECOGNIZERS[104].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)eaus$
    if let Some(caps) = PLURAL_RECOGNIZERS[105].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}eau"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 105) and became {}"#,
            word, PLURAL_RECOGNIZERS[105].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)eaux$
    if let Some(caps) = PLURAL_RECOGNIZERS[106].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}eau"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 106) and became {}"#,
            word, PLURAL_RECOGNIZERS[106].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)ieus$
    if let Some(caps) = PLURAL_RECOGNIZERS[107].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ieu"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 107) and became {}"#,
            word, PLURAL_RECOGNIZERS[107].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)ieux$
    if let Some(caps) = PLURAL_RECOGNIZERS[108].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ieu"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 108) and became {}"#,
            word, PLURAL_RECOGNIZERS[108].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)nives$
    if let Some(caps) = PLURAL_RECOGNIZERS[109].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}nife"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 109) and became {}"#,
            word, PLURAL_RECOGNIZERS[109].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)oes$
    if let Some(caps) = PLURAL_RECOGNIZERS[110].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}oe"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 110) and became {}"#,
            word, PLURAL_RECOGNIZERS[110].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)quies$
    if let Some(caps) = PLURAL_RECOGNIZERS[111].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}quy"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 111) and became {}"#,
            word, PLURAL_RECOGNIZERS[111].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+[aeiou])ys$
    if let Some(caps) = PLURAL_RECOGNIZERS[112].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}y"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 112) and became {}"#,
            word, PLURAL_RECOGNIZERS[112].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)sses$
    if let Some(caps) = PLURAL_RECOGNIZERS[113].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ss"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 113) and became {}"#,
            word, PLURAL_RECOGNIZERS[113].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)orses$
    if let Some(caps) = PLURAL_RECOGNIZERS[114].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}orse"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 114) and became {}"#,
            word, PLURAL_RECOGNIZERS[114].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+[au])rses$
    if let Some(caps) = PLURAL_RECOGNIZERS[115].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}rse"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 115) and became {}"#,
            word, PLURAL_RECOGNIZERS[115].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)nses$
    if let Some(caps) = PLURAL_RECOGNIZERS[116].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}nse"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 116) and became {}"#,
            word, PLURAL_RECOGNIZERS[116].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+[^ns])ses$
    if let Some(caps) = PLURAL_RECOGNIZERS[117].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}sis"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 117) and became {}"#,
            word, PLURAL_RECOGNIZERS[117].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)trixes$
    if let Some(caps) = PLURAL_RECOGNIZERS[118].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}trix"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 118) and became {}"#,
            word, PLURAL_RECOGNIZERS[118].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)trices$
    if let Some(caps) = PLURAL_RECOGNIZERS[119].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}trix"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 119) and became {}"#,
            word, PLURAL_RECOGNIZERS[119].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)uses$
    if let Some(caps) = PLURAL_RECOGNIZERS[120].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}us"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 120) and became {}"#,
            word, PLURAL_RECOGNIZERS[120].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)xes$
    if let Some(caps) = PLURAL_RECOGNIZERS[121].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}x"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 121) and became {}"#,
            word, PLURAL_RECOGNIZERS[121].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)ies$
    if let Some(caps) = PLURAL_RECOGNIZERS[122].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}y"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 122) and became {}"#,
            word, PLURAL_RECOGNIZERS[122].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)zzes$
    if let Some(caps) = PLURAL_RECOGNIZERS[123].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}z"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 123) and became {}"#,
            word, PLURAL_RECOGNIZERS[123].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)zoa$
    if let Some(caps) = PLURAL_RECOGNIZERS[124].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}zoon"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 124) and became {}"#,
            word, PLURAL_RECOGNIZERS[124].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)ses$
    if let Some(caps) = PLURAL_RECOGNIZERS[125].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}s"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 125) and became {}"#,
            word, PLURAL_RECOGNIZERS[125].regex, new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)s$
    if let Some(caps) = PLURAL_RECOGNIZERS[126].regex.captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 126) and became {}"#,
            word, PLURAL_RECOGNIZERS[126].regex, new_word
        );
        return Cow::Owned(new_word);
    }

    #[cfg(feature = "debug")]
    println!("  trimming 's' from end of word '{}' ", word);
    Cow::Borrowed(word.trim_end_matches(&['s', 'S'][..]))
}

static IS_PLURAL: Lazy<HashSet<&'static str>> = Lazy::new(|| {
    [
        " oxen",
        "-oxen",
        "[^ns]ses",
        "[aeo]lves",
        "abacuses",
        "aboiteaus",
        "aboiteaux",
        "abortoria",
        "abortuses",
        "abscissae",
        "abscissas",
        "abstracta",
        "acari",
        "Achinese",
        "aciculae",
        "acini",
        "acroamata",
        "acropolises",
        "actiniae",
        "actinias",
        "aculei",
        "addenda",
        "addendums",
        "adieus",
        "adieux",
        "adjutant generals",
        "adminicula",
        "ados",
        "advisoes",
        "adyta",
        "aecidia",
        "aegises",
        "aelfe",
        "aficionados",
        "afreeti",
        "afreets",
        "afriti",
        "afrits",
        "agapae",
        "agapes",
        "agenda",
        "agenda",
        "agenda",
        "agends",
        "agents provocateurs",
        "aggros",
        "agones",
        "agorae",
        "agrogoroda",
        "aides de camp",
        "aides-de-camp",
        "alae",
        "alani",
        "alans",
        "alberghi",
        "albinos",
        "ale wives",
        "ale-wives",
        "Alfurese",
        "algae",
        "alguaciles",
        "alguacils",
        "aliases",
        "allargandi",
        "allegros",
        "alluvia",
        "alluviums",
        "alti",
        "alto relievos",
        "alto-relievos",
        "altorelievos",
        "altos",
        "alulae",
        "alumnae",
        "alumni",
        "alveoli",
        "Amboinese",
        "ambones",
        "ambos",
        "ambulacra",
        "ambuscadoes",
        "ambuscados",
        "amenta",
        "Americanese",
        "amici curiae",
        "ammos",
        "amoebae",
        "amoebas",
        "amoretti",
        "amorini",
        "Amoyese",
        "amphipneusta",
        "amphipneusts",
        "amphorae",
        "anacolutha",
        "anacoluthons",
        "anathemas",
        "anathemata",
        "ancone",
        "Andamanese",
        "angiomata",
        "Angolese",
        "angustiae",
        "anlagen",
        "anlages",
        "Annamese",
        "antae",
        "Antananarivos",
        "antefixa",
        "antennae",
        "antennas",
        "anthemia",
        "anthodia",
        "anti sera",
        "anti serums",
        "anti-sera",
        "anti-serums",
        "antifixes",
        "antisera",
        "antra",
        "apexes",
        "aphelia",
        "aphides",
        "apices",
        "apothecia",
        "apparatchiki",
        "apparatchiks",
        "apparatus",
        "apparatuses",
        "appendices",
        "appendixes",
        "appressoria",
        "apsides",
        "apteria",
        "aptychi",
        "aquaria",
        "aquariums",
        "Aragonese",
        "Arakanese",
        "arangoes",
        "arboreta",
        "arcana",
        "archegonia",
        "archipelagoes",
        "archipelagos",
        "arcosolia",
        "areolae",
        "argumenta",
        "aristae",
        "armadillos",
        "arrhae",
        "arves",
        "asbestoses",
        "ascidia",
        "Asherahs",
        "Asherim",
        "Assamese",
        "asteriae",
        "astrocytomas",
        "astrocytomata",
        "asyla",
        "asylums",
        "asyndeta",
        "atamans",
        "Atlantes",
        "atlantes",
        "atlases",
        "atmas",
        "aurei",
        "aurorae",
        "auroras",
        "auslesen",
        "Auslesen",
        "ausleses",
        "auspices",
        "auto de fes",
        "auto-de-fes",
        "autobahnen",
        "autobahns",
        "autochthones",
        "autochthons",
        "autos",
        "autos de fes",
        "autos-de-fes",
        "autostradas",
        "autostrade",
        "avicularia",
        "Avignonese",
        "avisos",
        "avocados",
        "axes",
        "axes",
        "axillae",
        "axones",
        "axons",
        "axopodia",
        "Azerbaijanese",
        "baalim",
        "baals",
        "bacilli",
        "bacteria",
        "Bahamans",
        "bajocchi",
        "Balinese",
        "ballabili",
        "ballate",
        "ballerinas",
        "ballerine",
        "ballistae",
        "ballistas",
        "Bamakos",
        "bandeaus",
        "bandeaux",
        "bandeaux",
        "bandits",
        "banditti",
        "Barquisimetos",
        "barricoes",
        "bases",
        "basilicae",
        "basilicas",
        "bass",
        "basses",
        "bassi",
        "bassos",
        "bateaus",
        "bateaux",
        "bateaux",
        "bathoses",
        "baths",
        "batzes",
        "beau gestes",
        "beaus",
        "beaus",
        "beaux",
        "beaux",
        "beaux esprits",
        "beaux gestes",
        "beaux hommes",
        "bechuana",
        "bechuanas",
        "beefs",
        "beerenauslesen",
        "beeves",
        "belle epoques",
        "belles epoques",
        "bemas",
        "bemata",
        "Bengalese",
        "Bernese",
        "bersaglieri",
        "bhikshook",
        "bhikshus",
        "Bhutanese",
        "biases",
        "bierstuben",
        "bierstubes",
        "bifolia",
        "bijoux",
        "bilboes",
        "bimbos",
        "bingos",
        "Biros",
        "biscotti",
        "bison",
        "bisons",
        "blastemata",
        "blemyae",
        "blini",
        "blinis",
        "blitzes",
        "blouses",
        "blues",
        "bodegones",
        "boleros",
        "Bolognese",
        "boluses",
        "Bolzanos",
        "bon mots",
        "bon vivants",
        "bongoes",
        "bongos",
        "bonis fidebus",
        "bons mots",
        "bons vivants",
        "bordereaux",
        "Borghese",
        "Bostonese",
        "Botos",
        "bozzetti",
        "braccia",
        "brachiopoda",
        "brachiopods",
        "branchiopoda",
        "branchiopods",
        "bratwurste",
        "bratwursts",
        "bravoes",
        "bravos",
        "break aways",
        "break-aways",
        "breakaways",
        "breaks away",
        "breaks-away",
        "breaksaway",
        "bream",
        "breeches",
        "bregmata",
        "brethren",
        "brethren german",
        "brethren german",
        "brethren-german",
        "brethren-german",
        "brigadier generals",
        "britches",
        "bronchi",
        "bronchitises",
        "brothers",
        "brothers german",
        "brothers german",
        "brothers-german",
        "brothers-german",
        "bruschette",
        "buboes",
        "buffalo",
        "buffalos",
        "Buginese",
        "bulimi",
        "bullae",
        "bureaus",
        "bureaus",
        "bureaux",
        "bureaux",
        "Burmans",
        "Burmese",
        "burros",
        "bursae",
        "burschen",
        "bursitises",
        "bustoes",
        "bustos",
        "buzzes",
        "bylinas",
        "byliny",
        "cabalettas",
        "cabalette",
        "cacti",
        "cactuses",
        "caddises",
        "caducei",
        "caeca",
        "caffe macchiati",
        "caffe macchiatos",
        "caffe ristretti",
        "caffe ristrettos",
        "caimans",
        "Cairos",
        "Calabrese",
        "calamistra",
        "calathi",
        "calices",
        "calluses",
        "calypsos",
        "calzones",
        "calzoni",
        "Camaldolese",
        "camera obscuras",
        "camerae obscurae",
        "canaliculi",
        "candelabra",
        "cannabises",
        "canthari",
        "Cantonese",
        "cantos",
        "cantus",
        "cantuses",
        "canvases",
        "canzonettas",
        "canzonette",
        "capataces",
        "capi",
        "capos",
        "cappuccinos",
        "carabinieri",
        "carcinomas",
        "carcinomata",
        "cardines",
        "cardophagi",
        "cargadores",
        "caribou",
        "caribous",
        "carices",
        "Carlylese",
        "carmens",
        "carmina",
        "carp",
        "cartes de visite",
        "cartes-de-visite",
        "caryatides",
        "caryatids",
        "caryopsides",
        "casinos",
        "Cassinese",
        "cassones",
        "cassoni",
        "castra",
        "castrati",
        "casus belli",
        "cathismata",
        "caudices",
        "caules",
        "caveae",
        "caymans",
        "cecidia",
        "Celanese",
        "celiae",
        "cellos",
        "cementomata",
        "centesimi",
        "centumviri",
        "cerci",
        "cerimans",
        "Ceylonese",
        "chaetae",
        "chaoses",
        "chapeaus",
        "chapeaux",
        "chapeaux",
        "chapplies",
        "charismas",
        "charismata",
        "chassis",
        "chateaus",
        "chateaux",
        "chateaux",
        "cherubim",
        "cherubs",
        "chervontzi",
        "chevaux",
        "chevaux de bataille",
        "chevaux-de-bataille",
        "Chicagos",
        "children",
        "Chimangos",
        "Chinese",
        "chintzes",
        "chitarroni",
        "chlamydiae",
        "chlamydias",
        "choanae",
        "chordae",
        "choruses",
        "choux",
        "chromidia",
        "chromonemata",
        "chrysalides",
        "chrysalises",
        "cicatrices",
        "cilantros",
        "cimices",
        "cinclides",
        "cistophorori",
        "cladi",
        "claustra",
        "clausulae",
        "clavulae",
        "cleithra",
        "clepsydrae",
        "clepsydras",
        "clippers",
        "clippers",
        "clitorides",
        "clitorises",
        "clostridia",
        "coagula",
        "coccidia",
        "cochitos",
        "cocos",
        "cod",
        "codices",
        "coeliae",
        "coes",
        "coes",
        "cognoscenti",
        "coitus",
        "coituses",
        "collegia",
        "collegia musica",
        "Colombos",
        "Colorados",
        "columbaria",
        "columnae",
        "comae",
        "comatulae",
        "commandos",
        "compendia",
        "compendiums",
        "competentes",
        "concerti grossi",
        "concertinos",
        "concetti",
        "condos",
        "condottieri",
        "conducti",
        "coneys",
        "confervae",
        "confluvia",
        "congii",
        "Congoese",
        "Congolese",
        "conidia",
        "conies",
        "conies",
        "conies",
        "conoscenti",
        "consortia",
        "consortiums",
        "contadine",
        "contadini",
        "contagia",
        "contangos",
        "contrafacta",
        "contralti",
        "contraltos",
        "contretemps",
        "conversaziones",
        "conversazioni",
        "convolvuli",
        "convolvuluses",
        "conys",
        "conys",
        "corgis",
        "corgwn",
        "corgwn",
        "corgys",
        "cornetti",
        "corni",
        "cornua",
        "coronae",
        "coronas",
        "corpora",
        "corpora vilia",
        "corps",
        "corps",
        "corpuscula",
        "corpuses",
        "corrigenda",
        "cortexes",
        "cortices",
        "cosmoses",
        "costae",
        "coups d'etat",
        "court martials",
        "court-martials",
        "court-martials",
        "courts martial",
        "courts martial",
        "courts-martial",
        "cows",
        "coxendices",
        "cozes",
        "craft",
        "crafts childer",
        "crafts-childer",
        "crania",
        "craniums",
        "craspeda",
        "craspeda",
        "crazie",
        "credos",
        "cremasteres",
        "cremasters",
        "crescendos",
        "cris de coeur",
        "cristae",
        "criteria",
        "crowfoots",
        "crura",
        "crustae",
        "cubicula",
        "culs de four",
        "culs de lampe",
        "culs de sac",
        "culs-de-four",
        "culs-de-lampe",
        "culs-de-sac",
        "cultelli",
        "cumuli",
        "cuniculi",
        "curiosi",
        "curiosos",
        "curricula",
        "curriculums",
        "cuspides",
        "cyanos",
        "cyathi",
        "cyclopes",
        "cyclopses",
        "cynocephali",
        "cyphellae",
        "cysticerci",
        "cystidia",
        "cystomata",
        "Czechs",
        "dace",
        "daces",
        "daises",
        "data",
        "debris",
        "decennia",
        "deer",
        "deliria",
        "deliriums",
        "demos",
        "denarii",
        "denkmaler",
        "denotata",
        "dentalia",
        "deposita",
        "depositums",
        "descripta",
        "desiderata",
        "designata",
        "desmans",
        "desmas",
        "desmata",
        "devoti",
        "devotos",
        "diabetes",
        "diastemata",
        "dice",
        "dichasia",
        "dicta",
        "dictums",
        "didymes",
        "dies",
        "differentiae",
        "digitalises",
        "dilettantes",
        "dilettanti",
        "diplococci",
        "diplomas",
        "diplomata",
        "diporpae",
        "dipsades",
        "directrices",
        "dittos",
        "diverticula",
        "divertimenti",
        "divertimentos",
        "djinn",
        "djinns",
        "does",
        "dogmas",
        "dogmata",
        "dolmans",
        "dolphinaria",
        "dolphinariums",
        "Dongolese",
        "Dracos",
        "dragomans",
        "dragomen",
        "dramas",
        "dreikanter",
        "dreikanters",
        "dumkas",
        "dumky",
        "duumviri",
        "duumvirs",
        "dynamos",
        "edemas",
        "edemata",
        "editiones principes",
        "editiones principes",
        "efreeti",
        "efreets",
        "eland",
        "elands",
        "elk",
        "elks",
        "ellipses",
        "elves",
        "emblememata",
        "embryomata",
        "embryos",
        "emporia",
        "emporiums",
        "enconia",
        "enconiums",
        "endotheliomata",
        "enemas",
        "enemata",
        "enigmas",
        "enigmata",
        "ententes cordiales",
        "entera",
        "entia rationis",
        "entia realia",
        "entrochi",
        "ephelides",
        "ephemerae",
        "ephemeras",
        "ephemerides",
        "ephemerises",
        "epicardia",
        "epidermises",
        "epididymides",
        "epididymises",
        "epilimnia",
        "epimera",
        "epiphenomena",
        "epitheliomata",
        "epyllia",
        "equinoctia",
        "equinoctiums",
        "equiseta",
        "equisetums",
        "erfs",
        "ergastula",
        "eroses",
        "erotes",
        "errata",
        "erven",
        "espanoles",
        "Esperantos",
        "espressos",
        "ethoses",
        "eucalypti",
        "eucalyptuses",
        "eunuchs",
        "euporista",
        "euros",
        "evirati",
        "exanthemata",
        "exempla",
        "exencephali",
        "exes",
        "explananda",
        "explicanda",
        "extispices",
        "extrema",
        "extremums",
        "eyases",
        "fabellae",
        "fabliaux",
        "facienda",
        "faeculae",
        "faits accomplis",
        "falces",
        "falsettos",
        "familiae",
        "famuli",
        "fanfoots",
        "farmans",
        "Faroese",
        "Faros",
        "fasciae",
        "fascias",
        "fasciculi",
        "faunae",
        "faunas",
        "favellae",
        "faveoli",
        "favissae",
        "feculae",
        "fedai",
        "fedais",
        "feet",
        "feiseanna",
        "felones",
        "felones de se",
        "felones-de-se",
        "felos de se",
        "felos-de-se",
        "felsenmeere",
        "femora",
        "femurs",
        "fenestrae",
        "fermatas",
        "fermate",
        "Ferrarese",
        "fess",
        "fiascos",
        "fibrae",
        "fibrillae",
        "fibromata",
        "fibulae",
        "fibulas",
        "fidei defensores",
        "figurantes",
        "figuranti",
        "filariae",
        "filarias",
        "Filipinos",
        "finger ends",
        "finger-ends",
        "fingers ends",
        "fingers-ends",
        "fioriture",
        "fish",
        "fizzes",
        "flabella",
        "flag staffs",
        "flag staves",
        "flag-staffs",
        "flag-staves",
        "flagella",
        "flamencos",
        "flatfoots",
        "flatuses",
        "flies",
        "flocci",
        "flocculi",
        "florae",
        "floras",
        "flounder",
        "flys",
        "foci",
        "focuses",
        "folles",
        "fomites",
        "Foochowese",
        "fora",
        "foramens",
        "foramina",
        "formulae",
        "formulas",
        "forums",
        "fossae",
        "fowl",
        "fowls",
        "fraena",
        "fraena",
        "franc archers",
        "franc-archers",
        "francs archers",
        "francs-archers",
        "frati",
        "frena",
        "fricandeaux",
        "frizzes",
        "froes",
        "frottole",
        "frusta",
        "frustula",
        "frustums",
        "fuci",
        "fulcra",
        "funambuli",
        "fundamenta divisionis",
        "funghi porchini",
        "fungi",
        "funguses",
        "furfures",
        "furiosos",
        "fuzzes",
        "Gabunese",
        "Galla",
        "galla",
        "Gallas",
        "gallas",
        "gallows",
        "gametangia",
        "ganglia",
        "ganglia",
        "ganglions",
        "ganglions",
        "gaonim",
        "gaons",
        "gastrocnemii",
        "geese",
        "geisha",
        "geishas",
        "geisteswissenschaften",
        "gemmae",
        "genae",
        "genera",
        "generalissimos",
        "Genevese",
        "genies",
        "genii",
        "genii",
        "geniuses",
        "Genoese",
        "gentes",
        "Germans",
        "germaria",
        "Gestapos",
        "ghettos",
        "gigolos",
        "Gilbertese",
        "giunchi",
        "gizmos",
        "glacis",
        "glacises",
        "gladioli",
        "gladioluses",
        "glasses",
        "gliomata",
        "gliosarcomata",
        "glissandi",
        "glissandos",
        "globigerinae",
        "glochidia",
        "glomera",
        "glutaei",
        "glutaei",
        "glutei",
        "glutei",
        "gminy",
        "Goanese",
        "goes",
        "gonangia",
        "gonidia",
        "gonimia",
        "gorgoniae",
        "gorgonias",
        "gousblomme",
        "goyim",
        "goys",
        "graben",
        "grabens",
        "graffiti",
        "graffiti",
        "graffiti",
        "grani",
        "granite",
        "granulae",
        "gravamina",
        "Greensboros",
        "gringos",
        "grissini",
        "grottoes",
        "grottos",
        "grouse",
        "grouses",
        "Guaiaberos",
        "guanos",
        "guardias civiles",
        "gubernacula",
        "guglioes",
        "guglios",
        "Guianese",
        "gumbos",
        "gummas",
        "gummata",
        "gutti",
        "guys",
        "gymnasia",
        "gymnasiums",
        "gymnoti",
        "gyri",
        "gyros",
        "haddock",
        "haddocks",
        "haemangiomas",
        "haemangiomata",
        "haggis",
        "Hainanese",
        "hairdos",
        "hake",
        "hakes",
        "halibut",
        "halibuts",
        "halluces",
        "halteridia",
        "hamadrayads",
        "hamadryades",
        "hamuli",
        "hapax legomena",
        "hapax legomenons",
        "haptera",
        "Hararese",
        "Harlemese",
        "harmans",
        "haruspices",
        "haustella",
        "haustoria",
        "haustra",
        "Havanese",
        "headquarters",
        "Heavenese",
        "hedra",
        "hedrons",
        "heen",
        "hefte",
        "helia",
        "helices",
        "helions",
        "hemangeiomas",
        "hemangeiomata",
        "hemangiomas",
        "hemangiomata",
        "hemelytra",
        "hemerae",
        "hemi elytra",
        "hemi-elytra",
        "herniae",
        "hernias",
        "heroa",
        "heroes",
        "herpes",
        "herren",
        "herring",
        "herrings",
        "hertz",
        "hetaerae",
        "hetaerae",
        "hetairai",
        "hetairai",
        "hetmans",
        "hiatus",
        "hiatuses",
        "hijinks",
        "hinaki",
        "hippocampi",
        "hippopotami",
        "hippopotamuses",
        "hippos",
        "Hiroshimans",
        "hoes",
        "hoes",
        "holothuriae",
        "holothurias",
        "honoraria",
        "honorariums",
        "hoofs",
        "Hoosierese",
        "hooves",
        "hordeola",
        "hormogonia",
        "hoties",
        "Hottentotese",
        "hubrises",
        "humans",
        "humeri",
        "Hunanese",
        "hydrae",
        "hydras",
        "hydraulica",
        "hydriae",
        "hymenia",
        "hymnaria",
        "hyperbata",
        "hyperbolae",
        "hyperbolas",
        "hyphae",
        "hypna",
        "hypnums",
        "hypodermata",
        "hypolimnia",
        "ibises",
        "ichthyosauri",
        "Idahos",
        "idees fixes",
        "idola",
        "idola",
        "ignoramus",
        "ignoramuses",
        "ilia",
        "imagines",
        "imagos",
        "imbrices",
        "impetigos",
        "impetus",
        "impetuses",
        "improperia",
        "improvisatrici",
        "incubi",
        "incubuses",
        "indexes",
        "indices",
        "indicia",
        "indigenae",
        "individua",
        "individuums",
        "Indochinese",
        "indumenta",
        "indusia",
        "infernos",
        "infimae species",
        "infos",
        "inhalatoria",
        "innings",
        "inocula",
        "insulae",
        "intaglios",
        "interambulacra",
        "interaxes",
        "intercalare",
        "intercalaria",
        "intermaxillae",
        "intermedia",
        "intermezzos",
        "internodia",
        "interphenomena",
        "interradii",
        "interreges",
        "interregna",
        "interregnums",
        "interstitia",
        "interstitiums",
        "intertrigos",
        "intervalla",
        "intervallums",
        "intichiuma",
        "inuit",
        "inukshuit",
        "involucra",
        "ipse dixits",
        "Iquicos",
        "irides",
        "irises",
        "ischia",
        "isidia",
        "ispravniki",
        "ispravniks",
        "isthmi",
        "isthmuses",
        "iters",
        "itinera",
        "iueles",
        "ixodides",
        "jackanapes",
        "jacobus",
        "jacobuses",
        "jalapenos",
        "jambeaus",
        "jambeaux",
        "Japanese",
        "Javanese",
        "jazzes",
        "jerries",
        "Jerrys",
        "jeux",
        "joes",
        "joes",
        "Johnsonese",
        "judases",
        "judicata",
        "juga",
        "jumbos",
        "juntos",
        "Kakapos",
        "Kanarese",
        "kantharoi",
        "karakia",
        "karakias",
        "kare",
        "karrenfelder",
        "karrenfelds",
        "kars",
        "kernoi",
        "kibbutzes",
        "kibbutzim",
        "kilos",
        "kimonos",
        "kine",
        "Kinkimavos",
        "kioko",
        "kiokos",
        "Kiplingese",
        "kletterschuhe",
        "knives",
        "knoppern",
        "knoppers",
        "kobo",
        "Kokakos",
        "konditorei",
        "konditoreien",
        "Kongoese",
        "Kongolese",
        "Kosovos",
        "kouroi",
        "kovshi",
        "kuvaszok",
        "kylikes",
        "kylixes",
        "labra",
        "laciniae",
        "lactobacilli",
        "lacunae",
        "lacunaria",
        "lacunars",
        "lacunas",
        "laiki",
        "lamellae",
        "laminae",
        "Lapithae",
        "lapithae",
        "Lapiths",
        "lapiths",
        "Lapponese",
        "lares",
        "larnakes",
        "lars",
        "larynges",
        "latexes",
        "latices",
        "leaves",
        "leaves",
        "Lebanese",
        "lebensformen",
        "leges humanae",
        "legionellae",
        "legomena",
        "legumens",
        "legumina",
        "lei",
        "leishmaniae",
        "leishmanias",
        "lemans",
        "lemmas",
        "lemmata",
        "lemnisci",
        "lemures",
        "lemurs",
        "lenses",
        "lentigines",
        "lentisci",
        "Leonese",
        "lepromas",
        "lepromata",
        "leprosaria",
        "lepta",
        "leptomonas",
        "leptospirae",
        "Lesothos",
        "liberos",
        "libidos",
        "libretti",
        "librettos",
        "lice",
        "lidos",
        "lieder",
        "lieus",
        "lieutenant generals",
        "lieux",
        "ligamenta",
        "Lilos",
        "limaces",
        "Limans",
        "limbos",
        "limites",
        "limos",
        "limuli",
        "linctuses",
        "line outs",
        "line-outs",
        "lineae",
        "linenos",
        "lines out",
        "lines-out",
        "lingos",
        "lingulae",
        "linos",
        "lipomata",
        "lis",
        "lisses",
        "listerellae",
        "listerellas",
        "listeria",
        "listerias",
        "lithodomi",
        "lithophyta",
        "livedos",
        "lives",
        "lixivia",
        "loa",
        "loas",
        "loaves",
        "lobuli",
        "lochi",
        "loci",
        "locos",
        "loculi",
        "loggias",
        "loggie",
        "logia",
        "logodaedale",
        "logodaedali",
        "logos",
        "lomata",
        "lomenta",
        "Londonese",
        "lora",
        "lord lieutenants",
        "lord-lieutenants",
        "lords lieutenant",
        "lords-lieutenant",
        "Lorrainese",
        "louis",
        "lowlifes",
        "lox",
        "loxes",
        "Lucchese",
        "lumbagos",
        "lumbrici",
        "lumens",
        "lumina",
        "lustra",
        "lustrums",
        "lux",
        "lymphangiomata",
        "lymphomas",
        "lymphomata",
        "Lyonese",
        "lyssae",
        "maare",
        "maars",
        "macaci",
        "Macanese",
        "macaronies",
        "Macassarese",
        "machos",
        "mackerel",
        "mackerels",
        "macros",
        "maculae",
        "maculas",
        "Madurese",
        "maecenases",
        "maecenates",
        "maestri",
        "maestros",
        "mafiose",
        "mafiosi",
        "mafiosos",
        "magi",
        "magili",
        "magmas",
        "magmata",
        "magna opera",
        "magnetos",
        "magnificos",
        "magnum opuses",
        "major generals",
        "Majuros",
        "makuta",
        "mala in se",
        "Malabarese",
        "Malabos",
        "malagmata",
        "mallei",
        "malleoli",
        "Maltese",
        "man milliners",
        "man-milliners",
        "mangoes",
        "mangos",
        "manifestos",
        "manteaus",
        "manteaux",
        "mantellette",
        "mantises",
        "manubria",
        "manubriums",
        "Maputos",
        "maquereaux",
        "Maracaibos",
        "maremme",
        "mares",
        "maria",
        "maries",
        "marquises",
        "Marys",
        "maths",
        "matinees musicales",
        "matins",
        "matres lectionis",
        "matzahs",
        "matzot",
        "mausolea",
        "mausoleums",
        "maxillae",
        "maxima",
        "maximums",
        "measles",
        "meatus",
        "meatuses",
        "media",
        "mediastina",
        "mediatrices",
        "medicoes",
        "medicos",
        "mediums",
        "medulloblastomas",
        "medulloblastomata",
        "medusae",
        "medusas",
        "megalosauri",
        "megatheria",
        "melanomas",
        "melanomata",
        "melastomae",
        "melastomas",
        "melicerides",
        "melismas",
        "melismata",
        "mementoes",
        "mementos",
        "memoranda",
        "memorandums",
        "memos",
        "men",
        "men children",
        "men midwives",
        "men milliners",
        "men servants",
        "men-children",
        "men-midwives",
        "men-milliners",
        "men-servants",
        "menages a quatre",
        "menages a trois",
        "menchildren",
        "meningiomas",
        "meningiomata",
        "menisci",
        "menservants",
        "menus",
        "meretrices",
        "merides",
        "meshumadim",
        "meshummadim",
        "mesothelia",
        "mesotheliomas",
        "mesotheliomata",
        "messe di voce",
        "messeigneurs",
        "Messinese",
        "metae",
        "metalimnia",
        "metapleura",
        "metatarsi",
        "metropolises",
        "metros",
        "mews",
        "Mexicos",
        "mezuzoth",
        "mezzo rilievos",
        "mezzo-rilievos",
        "miasmas",
        "miasmata",
        "mice",
        "micetraps",
        "microbia",
        "microcephali",
        "micrococci",
        "microfiche",
        "microfiches",
        "micronuclei",
        "micros",
        "Milanese",
        "Milanos",
        "milieus",
        "milieux",
        "milieux interieurs",
        "miliolae",
        "milites gloriosi",
        "millennia",
        "millenniums",
        "mimosae",
        "mimosas",
        "minima",
        "minimums",
        "minnelieder",
        "minutiae",
        "minutias",
        "minyanim",
        "miracidia",
        "mithraea",
        "mitochondria",
        "mixolimnia",
        "moakses",
        "modelletti",
        "modelli",
        "modellos",
        "Modenese",
        "moderni",
        "modi",
        "modii",
        "moduli",
        "moduluses",
        "moduses",
        "moes",
        "moes",
        "molimina",
        "momenta",
        "momentums",
        "Monacos",
        "monades",
        "mondi",
        "mongooses",
        "monies",
        "monimolimnia",
        "monochasia",
        "monorchides",
        "monos",
        "monosyllaba",
        "monotae",
        "monoxyla",
        "monsiegneurs",
        "monsignori",
        "monsignori",
        "monsignors",
        "monstres sacres",
        "Montenegros",
        "montes",
        "moose",
        "moratoria",
        "moratoriums",
        "morceaux",
        "Moroccos",
        "morosi",
        "mortadellas",
        "mortadelle",
        "mortaria",
        "moscardini",
        "motoscafi",
        "mottoes",
        "mottos",
        "mousetraps",
        "mouths",
        "mucrones",
        "mucros",
        "mukim",
        "mukims",
        "multigravidae",
        "multigravidas",
        "mumps",
        "municipia",
        "Muqdishos",
        "Muranese",
        "murexes",
        "murices",
        "musae",
        "musas",
        "musees imaginaires",
        "musiques concretes",
        "mustachios",
        "muzzes",
        "myae",
        "myas",
        "mycoplasmas",
        "mycoplasmata",
        "mycorhizae",
        "mycorhizas",
        "mycorrhizae",
        "mycorrhizas",
        "myelomas",
        "myelomata",
        "myos",
        "mythoi",
        "myxomata",
        "nachtlokale",
        "nagaikas",
        "nagaiki",
        "Nakayamans",
        "Nankingese",
        "nasuti",
        "naumachiae",
        "naumachias",
        "nauplii",
        "nautili",
        "nautiluses",
        "Navarrese",
        "naye paise",
        "nebenkerne",
        "nebulae",
        "nebulas",
        "nectocalyces",
        "nemathecia",
        "Nenets",
        "Nentsi",
        "nentsi",
        "nentsy",
        "Nepalese",
        "nephridia",
        "neritae",
        "neritas",
        "neumas",
        "neumata",
        "neurinomas",
        "neurinomata",
        "neuromata",
        "neurulae",
        "neutrinos",
        "news",
        "nexus",
        "nexuses",
        "ngwee",
        "Niasese",
        "Nicobarese",
        "nidi",
        "niduses",
        "nielli",
        "niellos",
        "nimbi",
        "nimbuses",
        "Ningbos",
        "Nipponese",
        "nockerln",
        "noctilucae",
        "noda",
        "nodi",
        "noemata",
        "nomismata",
        "nonentia",
        "Normans",
        "noumena",
        "nouveaux arrives",
        "nouveaux pauvres",
        "nouveaux riches",
        "nouvelle pauvre",
        "nouvelle riche",
        "novae",
        "novas",
        "novi homines",
        "noxae",
        "nses",
        "nubeculae",
        "nuclei",
        "nuclei",
        "nucleoli",
        "nucleolonemas",
        "nucleolonemata",
        "nucleoluses",
        "nucleuses",
        "numina",
        "nuntii",
        "nymphae",
        "nymphaea",
        "nymphaea",
        "nymphea",
        "nymphea",
        "oaths",
        "obeli",
        "oboli",
        "occipita",
        "occiputs",
        "oceanaria",
        "ocelli",
        "octavos",
        "octohedra",
        "octohedrons",
        "octopi",
        "octopodes",
        "octopuses",
        "oculi",
        "odea",
        "oedemas",
        "oedemata",
        "offspring",
        "oglys",
        "Oklahomans",
        "olfactoria",
        "omenta",
        "ommatidia",
        "onagers",
        "onagri",
        "opera magna",
        "opercula",
        "ophiophagi",
        "optima",
        "optimums",
        "opuscula",
        "opuses",
        "oratrices",
        "oreganos",
        "organa",
        "Orinocos",
        "Orlandos",
        "orthocerata",
        "oscula",
        "Oslos",
        "osmateria",
        "osmeteria",
        "ossicula",
        "osteoclastomas",
        "osteoclastomata",
        "osteomata",
        "ostia",
        "otomi",
        "Otomi",
        "otomies",
        "Otomies",
        "otos",
        "ottomans",
        "ours",
        "ourselves",
        "ova",
        "ovaria",
        "ovoli",
        "ovula",
        "oxen",
        "oxybapha",
        "oxymora",
        "oxymorons",
        "oxyurides",
        "paha",
        "paisas",
        "paise",
        "pajamas",
        "palae",
        "paleae",
        "pali",
        "pallia",
        "palpebrae",
        "palpi",
        "Panamans",
        "Pangasinanes",
        "pangasinanes",
        "Pangasinans",
        "pangasinans",
        "panini",
        "panorpae",
        "pantos",
        "pants",
        "pants",
        "paparrazi",
        "papillae",
        "papillomata",
        "papulae",
        "papyri",
        "papyruses",
        "parabolae",
        "parabolani",
        "parabolas",
        "paradores",
        "paradors",
        "paraganglia",
        "paragangliomas",
        "paragangliomata",
        "paraglossae",
        "Paramaribos",
        "paranuclei",
        "parapleura",
        "parapleura",
        "parapsides",
        "paraselenae",
        "parcs fermes",
        "Parduscos",
        "parenchymata",
        "parerga",
        "parhelia",
        "parhelions",
        "parietes",
        "parisa",
        "Parmese",
        "parnassim",
        "parvenus",
        "pasteurellae",
        "pasteurellas",
        "pastorales",
        "pastorali",
        "patagia",
        "paterae",
        "pathoses",
        "paths",
        "paxillae",
        "peciae",
        "pecias",
        "pectens",
        "pectines",
        "pectora",
        "pedalos",
        "pedes",
        "pedia",
        "pedicellariae",
        "pediluvia",
        "Pekingese",
        "peltae",
        "pelves",
        "pelvises",
        "pence",
        "pendula",
        "pendulums",
        "penes",
        "pengo",
        "pengoes",
        "penicilli",
        "peninsulae",
        "peninsulas",
        "penises",
        "pennia",
        "pennies",
        "pensieri",
        "people",
        "percepta",
        "peridia",
        "perikarya",
        "perithecia",
        "perniones",
        "peronia",
        "perradii",
        "personae",
        "personas",
        "persons",
        "phalanges",
        "phalangia",
        "phalanxes",
        "phalli",
        "phalloi",
        "phalluses",
        "pharmakoi",
        "phenomena",
        "phlegmasiae",
        "phocae",
        "phocas",
        "pholades",
        "photos",
        "phototaxes",
        "phragmata",
        "phrenes",
        "phyla",
        "phylae",
        "phyllobranchiae",
        "phylums",
        "phymata",
        "phyogemmaria",
        "piani",
        "pianos",
        "pickerel",
        "pickerels",
        "Piedmontese",
        "pieds a terre",
        "pieds noirs",
        "pietre",
        "pifferari",
        "pike",
        "pikes",
        "pilei",
        "pili",
        "pilleis",
        "pimentos",
        "pina coladas",
        "pinaces",
        "pinas coladas",
        "pincers",
        "pincers",
        "pineta",
        "pinetums",
        "pingoes",
        "pingos",
        "pinnae",
        "pinnas",
        "pinones",
        "pinons",
        "pintos",
        "pipkraker",
        "pipkrakes",
        "pirrites",
        "piscinae",
        "piscinas",
        "pistillidia",
        "Pistoiese",
        "pithoi",
        "pizzas",
        "pizze",
        "placeboes",
        "placebos",
        "placita",
        "planctus",
        "plankton",
        "planulae",
        "plasmalemmae",
        "plasmalemmas",
        "plasmodia",
        "plasmolytica",
        "plasmomata",
        "plateaus",
        "plateaus",
        "plateaux",
        "plateaux",
        "platypodes",
        "platypuses",
        "plecos",
        "plectra",
        "plenaria",
        "plesiosauri",
        "plether",
        "plethra",
        "pleura",
        "pleura",
        "pleura",
        "plexus",
        "plexuses",
        "plicae",
        "pliers",
        "ploshchadki",
        "pluralia tantum",
        "plutei",
        "Plutos",
        "pneumothoraces",
        "pneumothoraxes",
        "pobladores",
        "pocula",
        "poderi",
        "podetia",
        "podia",
        "podia",
        "podiums",
        "poes",
        "poes",
        "pogos",
        "poise",
        "poises",
        "polises",
        "politbureaus",
        "politbureaux",
        "politicoes",
        "politicos",
        "pollices",
        "pollinaria",
        "pollinia",
        "Polonese",
        "polos",
        "polythecia",
        "pommes de terre",
        "ponchos",
        "pontifexes",
        "pontifices",
        "porcini",
        "poria",
        "porrones",
        "porrons",
        "porticoes",
        "porticos",
        "portiforia",
        "portmanteaus",
        "portmanteaus",
        "portmanteaux",
        "portmanteaux",
        "Porto Novos",
        "Porto-Novos",
        "Portos",
        "portraits parles",
        "ports de bras",
        "Portuguese",
        "pos",
        "postnati",
        "postpubes",
        "postulata",
        "potatoes",
        "potestates",
        "pox",
        "praecognita",
        "pragmas",
        "pragmata",
        "precis",
        "precognita",
        "premiers danseurs",
        "prepennae",
        "prima ballerinas",
        "prima donnas",
        "prime ballerine",
        "prime donne",
        "primigravidae",
        "primordia",
        "principia",
        "proaves",
        "proboscides",
        "proboscises",
        "proceedings",
        "procoeliae",
        "prodromi",
        "proferentes",
        "profluvia",
        "proglottides",
        "programmata",
        "progymnasia",
        "progymnasmata",
        "prokarya",
        "prolabia",
        "prolegomena",
        "promeropes",
        "propleura",
        "propodia",
        "propositi",
        "propria",
        "propyla",
        "propylaea",
        "propylons",
        "prorae",
        "pros",
        "prosae",
        "proscenia",
        "proscollae",
        "prosecutrices",
        "prosencephala",
        "proseuchae",
        "prosodiencephala",
        "prosopia",
        "prospectus",
        "prospectuses",
        "prosulae",
        "protarsi",
        "prothalli",
        "prothallia",
        "protococci",
        "protomae",
        "protomas",
        "protonemata",
        "prototypa",
        "prototypons",
        "protypa",
        "provisoes",
        "provisos",
        "prytan",
        "prytanes",
        "psammomata",
        "pseudopodia",
        "pseudostomata",
        "psychos",
        "psydracia",
        "pteromata",
        "pteropi",
        "pterylae",
        "pueblos",
        "puirt a beul",
        "puirt-a-beul",
        "puli",
        "pulli",
        "pulmonaria",
        "puls",
        "pulsella",
        "pulveratrices",
        "puncta",
        "punti blanchi",
        "puntos blancos",
        "pupae",
        "purlieus",
        "purlieux",
        "Purum",
        "purum",
        "Purums",
        "purums",
        "putti",
        "puttonys",
        "pycnia",
        "pycnides",
        "pycnidia",
        "pyjamas",
        "pylae",
        "pyralides",
        "pyramidia",
        "pyramidions",
        "pyrexiae",
        "pyritae",
        "pyrophori",
        "pyxidia",
        "quadratrices",
        "quaesita",
        "quanta",
        "quantums",
        "quartos",
        "quartzes",
        "quid",
        "quinarii",
        "quinquennia",
        "Quitos",
        "rabies",
        "rad",
        "radialia",
        "radices",
        "radii",
        "radiuses",
        "radixes",
        "rads",
        "ragazze",
        "ragazzi",
        "raggare",
        "raggares",
        "rami",
        "ramuli",
        "ranunculi",
        "ranunculuses",
        "rara avises",
        "rarae aves",
        "razzes",
        "recti",
        "rediae",
        "reductiones",
        "referenda",
        "referendums",
        "refugia",
        "regidores",
        "regidors",
        "regmata",
        "reguli",
        "reiche",
        "rejoneadores",
        "rejones",
        "relata",
        "rem",
        "remexes",
        "remiges",
        "remou",
        "remous",
        "rems",
        "repla",
        "representamens",
        "representamina",
        "res",
        "residua",
        "residuums",
        "responsa",
        "retia",
        "retinacula",
        "retinulae",
        "rezidentsii",
        "rezidenty",
        "rhinoceros",
        "rhinoceroses",
        "rhinophymas",
        "rhinophymata",
        "rhinos",
        "rhizomas",
        "rhizomata",
        "rhododendra",
        "rhododendrons",
        "rhombohedra",
        "rhombohedrons",
        "rhomboidei",
        "rhopalia",
        "rhynchodaea",
        "rhythmi",
        "ri",
        "ricercari",
        "ricercars",
        "ricercate",
        "ricordi",
        "rideaus",
        "rideaux",
        "rilievos",
        "rimmonim",
        "rimonim",
        "rioni",
        "risottos",
        "ritardandi",
        "ritardandos",
        "rites de passage",
        "rococos",
        "roe",
        "roes",
        "Roma",
        "Romagnese",
        "Romanese",
        "Romanies",
        "Romans",
        "romanzen",
        "roms",
        "rond de jambes",
        "rondeaus",
        "rondeaux",
        "rondos",
        "ronds de jambes",
        "rostra",
        "rostrums",
        "rotulae",
        "routes nationales",
        "rubashkas",
        "rubashki",
        "rugae",
        "ruses de guerre",
        "ryper",
        "sabertooths",
        "sacculi",
        "sacella",
        "sachverhalte",
        "sacra",
        "Sacramentos",
        "sacraria",
        "sacrums",
        "saddos",
        "saffi",
        "saga",
        "sagos",
        "salitas",
        "salite",
        "salivaria",
        "salmon",
        "salpae",
        "salpas",
        "salvos",
        "samboes",
        "sambos",
        "samurai",
        "sanatoria",
        "sanatoriums",
        "sancta sanctorum",
        "sandr",
        "sandrs",
        "Sangirese",
        "Santiagos",
        "Sapporos",
        "Sarajevos",
        "Sarawakese",
        "sarcinae",
        "sarcomas",
        "sarcomata",
        "sarcophagi",
        "sarissae",
        "sassafrases",
        "satellites",
        "saxicavae",
        "sbirri",
        "scaleni",
        "scandala magnatum",
        "scapi",
        "scapulae",
        "scapulas",
        "scarabaei",
        "scari",
        "scazons",
        "scazontes",
        "sceattas",
        "schemas",
        "schemata",
        "scherzandos",
        "scherzos",
        "schismata",
        "schistosomula",
        "schizostylis",
        "scholia",
        "scioli",
        "scirrhi",
        "scirrhusses",
        "scissors",
        "scoleces",
        "scolopidia",
        "scombri",
        "scoriae",
        "scorias",
        "scotomas",
        "scotomata",
        "scriptoria",
        "scriptoriums",
        "scudi",
        "scungilli",
        "scuole",
        "scuta",
        "scutella",
        "scutula",
        "scyphi",
        "seaquaria",
        "secantes",
        "secreta",
        "secundagravidae",
        "secundagravidas",
        "secundigravidae",
        "secundigravidas",
        "secundiparae",
        "secundiparas",
        "sedes",
        "sedilia",
        "seecatchie",
        "seed",
        "seeds",
        "Selmans",
        "semas",
        "semata",
        "seminia",
        "semunciae",
        "senarii",
        "Senegalese",
        "senes",
        "sensa",
        "sensedata",
        "sensilla",
        "sensoriola",
        "sententiae",
        "separatrices",
        "sephardim",
        "sephardin",
        "septa",
        "septaria",
        "septemviri",
        "septenarii",
        "sequelae",
        "sequestra",
        "sera",
        "seraphim",
        "seraphs",
        "sericteria",
        "series",
        "serir",
        "serirs",
        "serpigines",
        "serpigoes",
        "serpulae",
        "serrae",
        "sertulariae",
        "sertularias",
        "serums",
        "sestertia",
        "sestieri",
        "set offs",
        "set outs",
        "set tos",
        "set-offs",
        "set-outs",
        "set-tos",
        "setae",
        "sets off",
        "sets out",
        "sets to",
        "sets-off",
        "sets-out",
        "sets-to",
        "sezessionen",
        "sforzati",
        "sforzatos",
        "sgraffiati",
        "shad",
        "shads",
        "shamans",
        "shauries",
        "shauris",
        "Shavese",
        "shawabtis",
        "shawabtiu",
        "Shawanese",
        "shears",
        "shears",
        "sheep",
        "shelves",
        "shifta",
        "shiftas",
        "shochetim",
        "shomrim",
        "shorts",
        "shorts",
        "Siamese",
        "siemens",
        "Sienese",
        "sigli",
        "sigloi",
        "signa",
        "Sikkimese",
        "silbadores",
        "silbadors",
        "sileni",
        "silices",
        "siliquae",
        "silos",
        "Siluri",
        "simiae",
        "simplexes",
        "simplices",
        "simpula",
        "simulacra",
        "simulacrums",
        "sinfonias",
        "sinfonie",
        "Singhalese",
        "Sinhalese",
        "sinus",
        "sinuses",
        "siphunculi",
        "sipunculi",
        "siroccos",
        "sistra",
        "sistrums",
        "situlae",
        "situlas",
        "sizzes",
        "skis",
        "snekkjur",
        "snipe",
        "snipes",
        "snoozes",
        "soes",
        "Sogdianese",
        "solaria",
        "soldi",
        "solenia",
        "soles",
        "solfeggi",
        "solfeggios",
        "soli",
        "solidi",
        "solidos",
        "solos",
        "solstitia",
        "solvi",
        "somas",
        "somata",
        "somatenes",
        "sombreros",
        "some",
        "Sonamans",
        "soprani",
        "sopranos",
        "soralia",
        "soredia",
        "sori",
        "soshi",
        "sotches",
        "sotchs",
        "souvlakia",
        "souvlakis",
        "spadices",
        "spadixes",
        "Spaetlesen",
        "spari",
        "spasmi",
        "spathae",
        "species",
        "spectra",
        "spectrums",
        "specula",
        "speculums",
        "spermaria",
        "spermata",
        "spermathecae",
        "spermatia",
        "spermatoa",
        "spermogonia",
        "sphaerideum",
        "sphaeridia",
        "sphagna",
        "sphagnums",
        "spheges",
        "sphinges",
        "sphinxes",
        "spicula",
        "spiracula",
        "spirilla",
        "spondyli",
        "sporodochia",
        "sputa",
        "squadre",
        "squadristi",
        "squadrists",
        "squali",
        "squamae",
        "squillae",
        "stabilimenta",
        "staccatos",
        "stadia",
        "stadiums",
        "stalactitae",
        "stalactites",
        "stamen",
        "stamina",
        "staminidia",
        "staphylococci",
        "star fish",
        "star fishes",
        "star-fish",
        "star-fishes",
        "starfish",
        "starfishes",
        "starosti",
        "starovers",
        "starovery",
        "startsy",
        "startzy",
        "stasima",
        "stasimons",
        "staterae",
        "statuae",
        "statuas",
        "status",
        "statuses",
        "stelae",
        "stelas",
        "stellae",
        "stemmata",
        "stephania",
        "stephanions",
        "sterigmata",
        "sterna",
        "sternebrae",
        "sternos",
        "sternums",
        "stichidia",
        "stichoi",
        "stigmariae",
        "stigmas",
        "stigmata",
        "stilettoes",
        "stillicidia",
        "stimuli",
        "stipites",
        "stipulae",
        "stipulas",
        "stirpes",
        "stoai",
        "stoas",
        "stolones",
        "stomachs",
        "stomas",
        "stomata",
        "stomatia",
        "stomia",
        "stomodaea",
        "stomodea",
        "storeys",
        "stornelli",
        "strambotti",
        "strata",
        "strategi",
        "strategoi",
        "stratums",
        "streptococci",
        "streptothrices",
        "striae",
        "striata",
        "strigae",
        "striolae",
        "strobilae",
        "strobili",
        "stromata",
        "stromodaea",
        "stromodea",
        "strumae",
        "stryddae",
        "stuccos",
        "studia generali",
        "styli",
        "stylopodia",
        "stylos",
        "styluses",
        "subbotniki",
        "subbotniks",
        "subsellia",
        "subsidia",
        "substrata",
        "substratums",
        "succi",
        "succineae",
        "succineas",
        "succubi",
        "succubuses",
        "Sudanese",
        "suffrutices",
        "suggesta",
        "suggestiones falsi",
        "suggestums",
        "sulci",
        "sum totals",
        "sum-totals",
        "summa bona",
        "summa genera",
        "summae",
        "sumos",
        "sums total",
        "sums-total",
        "Sundanese",
        "supercilia",
        "superficies",
        "supernovae",
        "supernovas",
        "superstrata",
        "supposita",
        "supracleithra",
        "suprascapulae",
        "surculi",
        "surimonos",
        "sustentacula",
        "Swahilese",
        "swine",
        "swines",
        "switchfoots",
        "syllabaria",
        "syllabi",
        "syllabuses",
        "symplasmata",
        "sympodia",
        "symposia",
        "symposiums",
        "synaesthesiae",
        "synangia",
        "synapticulae",
        "synapticulas",
        "synaxaria",
        "synaxaria",
        "synaxes",
        "syncelli",
        "syncytia",
        "syndendria",
        "synechiae",
        "synedria",
        "synedria",
        "synesthesiae",
        "syntagmas",
        "syntagmata",
        "syntaxes",
        "synthroni",
        "synusiae",
        "syphilomata",
        "syringes",
        "syringes",
        "syrinxes",
        "syrphi",
        "syrtes",
        "tabellae",
        "tableaus",
        "tableaus",
        "tableaux",
        "tableaux",
        "tablina",
        "tabulae",
        "Tacomans",
        "taeniae",
        "taenias",
        "tagmata",
        "Taikos",
        "taleae",
        "tali",
        "talismans",
        "talouses",
        "tangoes",
        "tangos",
        "tarantate",
        "tarantati",
        "tarsi",
        "taxa",
        "taxes",
        "tazze",
        "teal",
        "teals",
        "technos",
        "teeth",
        "tegmenta",
        "tegmina",
        "tegulae",
        "telamones",
        "telia",
        "temblores",
        "tempi",
        "tempietti",
        "tempos",
        "tenacula",
        "tenderfoots",
        "Tenggerese",
        "teniae",
        "tenias",
        "tenorini",
        "tentacula",
        "tentamina",
        "tenues",
        "tepidaria",
        "teratomata",
        "terebella",
        "terebratulae",
        "terebratulas",
        "teredines",
        "teredos",
        "terga",
        "termini",
        "terminuses",
        "termites",
        "terpen",
        "terps",
        "terrae filii",
        "terraria",
        "terrariums",
        "terrazzos",
        "terremare",
        "territoria",
        "terzetti",
        "tessellae",
        "tessellas",
        "tesserae",
        "testes",
        "testes",
        "testes",
        "testudos",
        "tetanother",
        "tetanothra",
        "tete a tetes",
        "tete-a-tetes",
        "tetracola",
        "tetragrammata",
        "tetrahedra",
        "tetrahedrons",
        "tetrapleura",
        "tetrapleurons",
        "tetrasporangia",
        "thalami",
        "thalamoi",
        "thanatoria",
        "thaumaturgi",
        "thebe",
        "thecae",
        "theirs",
        "thelyca",
        "them",
        "themata",
        "themselves",
        "themselves",
        "theologoumena",
        "thesauri",
        "thesauruses",
        "these",
        "they",
        "thieves",
        "thoes",
        "tholi",
        "tholoi",
        "thoraces",
        "thoraxes",
        "those",
        "thrasoes",
        "thrasones",
        "thymi",
        "thymiateria",
        "thyridia",
        "thyrsi",
        "tibiae",
        "Timorese",
        "timpanos",
        "tintinnabula",
        "tipulae",
        "Tirolese",
        "tiros",
        "tobaccos",
        "Tocharese",
        "toes",
        "toes",
        "Togos",
        "Tokyos",
        "tolkachi",
        "tomatoes",
        "tombaroli",
        "tomia",
        "tondi",
        "tongs",
        "tongs",
        "Tonkinese",
        "tonneaus",
        "tonneaus",
        "tonneaux",
        "tonneaux",
        "topazes",
        "topoi",
        "toreros",
        "tori",
        "toriles",
        "Torinese",
        "Torinos",
        "torma",
        "tormas",
        "Tornesi",
        "torni",
        "Torontos",
        "torsos",
        "tortillas espanolas",
        "tortrices",
        "torulae",
        "toruli",
        "toruses",
        "tours de force",
        "toxica",
        "toxii",
        "toxoplasmata",
        "trabeae",
        "trabeculae",
        "tracheae",
        "tractatrices",
        "tractella",
        "tractrices",
        "tragi",
        "trapezia",
        "trapezii",
        "trapeziums",
        "trapezohedra",
        "trapezohedrons",
        "trattorias",
        "trattorie",
        "traumas",
        "traumata",
        "trellises",
        "tremolos",
        "treponemata",
        "trichidia",
        "trichinae",
        "trichine",
        "trichomata",
        "triclinia",
        "trientes",
        "triforia",
        "trilbys",
        "tripla",
        "triradii",
        "triumviri",
        "triumvirs",
        "trochi",
        "trochuses",
        "trockenbeerenauslesen",
        "tropaeola",
        "tropaeolums",
        "troparia",
        "tropides",
        "trousers",
        "trousseaus",
        "trousseaus",
        "trousseaux",
        "trousseaux",
        "trout",
        "trulli",
        "trumeaux",
        "tsuba",
        "tsubas",
        "tsubo",
        "tsubos",
        "tubercula",
        "tuberculomas",
        "tuberculomata",
        "tuberes",
        "tubuli",
        "tumuli",
        "tuna",
        "turbot",
        "turbots",
        "turfs",
        "turrones",
        "turrons",
        "turves",
        "tympana",
        "typos",
        "Tyrolese",
        "tyros",
        "udarniki",
        "ulpanim",
        "ultimata",
        "ultimatums",
        "umbilici",
        "umbilicuses",
        "umbones",
        "umbos",
        "umbrae",
        "umbras",
        "umwelten",
        "unci",
        "unciae",
        "uncini",
        "ungues",
        "uniones",
        "unios",
        "uomini",
        "uomini universali",
        "uraei",
        "uredia",
        "uredinia",
        "uredosori",
        "uri",
        "urodaea",
        "urodea",
        "uruses",
        "us",
        "usneae",
        "usneas",
        "ustilagines",
        "uteri",
        "uteruses",
        "utriculariae",
        "uvae",
        "vaalpens",
        "vaalpensen",
        "vacua",
        "vacuums",
        "vagi",
        "vaginae",
        "vaginas",
        "vaginulae",
        "valleculae",
        "valute",
        "valuten",
        "valvulae",
        "vaporetti",
        "vaporettos",
        "vaqueros",
        "varellaes",
        "varely",
        "variae lectiones",
        "varices",
        "vasa",
        "vascula",
        "vasculitides",
        "vasculitises",
        "vasculums",
        "vedutas",
        "vedute",
        "veg",
        "veges",
        "vehicula",
        "vela",
        "velamina",
        "velaria",
        "velums",
        "venae",
        "veneres",
        "venuses",
        "vermicellos",
        "vermiculi",
        "Vermontese",
        "Veronese",
        "verrucae",
        "vers libres",
        "versiculi",
        "versos",
        "vertebrae",
        "vertexes",
        "vertices",
        "verticilli",
        "vesiculae",
        "vestigia",
        "vetturini",
        "viali",
        "viatica",
        "vibices",
        "vibracula",
        "vibratos",
        "vibriones",
        "vibrios",
        "Viennese",
        "Vietnamese",
        "vilas",
        "vile",
        "villanelle",
        "villi",
        "villini",
        "vincula",
        "violette",
        "violoncellos",
        "vires",
        "virgae",
        "Virgos",
        "viri",
        "virii",
        "virtuosi",
        "virtuosos",
        "viruses",
        "viscera",
        "vitellaria",
        "vittae",
        "vivaria",
        "vivariums",
        "vlakten",
        "vlaktes",
        "voeux",
        "volcanelli",
        "volcanoes",
        "volcanos",
        "vomicae",
        "vomicas",
        "vomitoria",
        "vomitoriums",
        "voorbokke",
        "vorspiele",
        "vorstellungen",
        "vortexes",
        "vortices",
        "wadies",
        "wadies",
        "wadis",
        "wadys",
        "waldoes",
        "waldos",
        "waltzes",
        "wanderjahre",
        "wandervogel",
        "washers up",
        "washers-up",
        "we",
        "weirdos",
        "Wenchowese",
        "wharfs",
        "wharves",
        "what",
        "whatever",
        "whatsoever",
        "white staves",
        "whiting",
        "Whitmanese",
        "who",
        "whoever",
        "whom",
        "whomever",
        "whomsoever",
        "whose",
        "whosesoever",
        "whosever",
        "whosoever",
        "wildebeest",
        "wildebeests",
        "wives",
        "wolves",
        "women children",
        "women servants",
        "women-children",
        "women-servants",
        "womenchildren",
        "wreaths",
        "xanthomas",
        "xanthomata",
        "xiphiplastra",
        "xiphopagi",
        "xiphoplastra",
        "xoana",
        "xysti",
        "Yakimans",
        "Yamoussoukros",
        "yarramans",
        "yarramen",
        "Yengeese",
        "yeses",
        "yo yos",
        "yo-yos",
        "yoes",
        "Yokohamans",
        "you",
        "you",
        "yours",
        "yourselves",
        "Yumans",
        "Yunnanese",
        "yuon",
        "zadrugas",
        "zadruge",
        "zeitgebers",
        "zemirot",
        "zemiroth",
        "zeppoli",
        "zeros",
        "Zibos",
        "zingani",
        "zite",
        "zitelle",
        "ziti",
        "zizzes",
        "zloty",
        "zlotys",
        "zoa",
        "zoaeae",
        "zoaria",
        "zoeae",
        "zoeas",
        "zooeae",
        "zooecia",
        "zoophori",
        "zoosporangia",
        "zophori",
        "zucche",
        "zucchini",
        "zucchinis",
        "zuppe",
        "zuzim",
        "zuzzes",
        "zyga",
        "zygantra",
        "zygomas",
        "zygomata",
    ]
    .iter()
    .cloned()
    .collect()
});

/// Returns true or false indicating whether a noun is plural.
pub fn is_plural<A: AsRef<str>>(word: A) -> bool {
    let word = word.as_ref();
    #[cfg(feature = "debug")]
    println!("is_plural({})", word);

    if IS_PLURAL.contains(word) {
        #[cfg(feature = "debug")]
        println!("  found '{}' in IS_PLURAL", word);
        return true;
    }
    let lc_word = word.to_lowercase();
    if IS_PLURAL.contains(&*lc_word) {
        #[cfg(feature = "debug")]
        println!("  found lc '{}' in IS_PLURAL", word);
        return true;
    }
    let tc_word = if word.len() > 1 {
        Some(to_titlecase(word))
    } else {
        None
    };
    if let Some(tc_word) = &tc_word {
        if IS_PLURAL.contains(tc_word.as_str()) {
            #[cfg(feature = "debug")]
            println!("  found tc '{}' in IS_PLURAL", word);
            return true;
        }
    }

    if IS_SINGULAR.contains(word) {
        #[cfg(feature = "debug")]
        println!("  found '{}' in IS_SINGULAR", word);
        return false;
    }
    if IS_SINGULAR.contains(&*lc_word) {
        #[cfg(feature = "debug")]
        println!("  found lc '{}' in IS_SINGULAR", word);
        return false;
    }
    if let Some(tc_word) = &tc_word {
        if IS_SINGULAR.contains(tc_word.as_str()) {
            #[cfg(feature = "debug")]
            println!("  found tc '{}' in IS_SINGULAR", word);
            return true;
        }
    }

    for r in PLURAL_RECOGNIZERS.iter().filter(|r| !r.is_nonindicative) {
        if let Some(idx) = r.recursive_capture_idx {
            if let Some(caps) = r.regex.captures(word) {
                if let Some(part) = caps.get(idx) {
                    #[cfg(feature = "debug")]
                    println!(
                        "  word '{}' matched recursive logic for recognizer regex {:?}, returning is_plural({})",
                        word, r.regex, part.as_str(),
                    );
                    return is_plural(part.as_str());
                }
            }
        } else if r.regex.is_match(word) {
            #[cfg(feature = "debug")]
            println!(
                "  word '{}' matched plural recognizer regex {:?}",
                word, r.regex,
            );
            return true;
        }
    }

    #[cfg(feature = "debug")]
    println!("  checking if word '{}' ends with 's' or 'S'", word);
    word.ends_with(&['s', 'S'][..])
}

static IS_SINGULAR: Lazy<HashSet<&'static str>> = Lazy::new(|| {
    [
        " ox",
        "-ox",
        "[^ns]sis",
        "[aeo]lf",
        "abacus",
        "aboiteau",
        "abortorium",
        "abortus",
        "abscissa",
        "abstractum",
        "acarus",
        "Achinese",
        "acicula",
        "acinus",
        "acroama",
        "acropolis",
        "actinia",
        "aculeus",
        "addendum",
        "adieu",
        "adjutant general",
        "adminiculum",
        "ado",
        "adviso",
        "adytum",
        "aecidium",
        "aegis",
        "aelf",
        "aficionado",
        "afreet",
        "afrit",
        "agape",
        "agend",
        "agendum",
        "agendum",
        "agent provocateur",
        "aggro",
        "agon",
        "agora",
        "agrogorod",
        "aide de camp",
        "aide-de-camp",
        "ala",
        "alan",
        "albergo",
        "albino",
        "ale wife",
        "ale-wife",
        "Alfurese",
        "alga",
        "alguacil",
        "alias",
        "allargando",
        "allegro",
        "alluvium",
        "alto",
        "alto relievo",
        "alto-relievo",
        "altorelievo",
        "alula",
        "alumna",
        "alumnus",
        "alveolus",
        "ambo",
        "Amboinese",
        "ambulacrum",
        "ambuscado",
        "amentum",
        "Americanese",
        "amicus curiae",
        "ammo",
        "amoeba",
        "amoretto",
        "amorino",
        "Amoyese",
        "amphipneust",
        "amphora",
        "anacoluthon",
        "anathema",
        "ancona",
        "Andamanese",
        "angioma",
        "Angolese",
        "angustia",
        "anlage",
        "Annamese",
        "anta",
        "Antananarivo",
        "antefix",
        "antenna",
        "anthemion",
        "anthodium",
        "anti serum",
        "anti-serum",
        "antiserum",
        "antrum",
        "apex",
        "aphelion",
        "aphis",
        "apothecium",
        "apparatchik",
        "apparatus",
        "appendix",
        "appressorium",
        "apsis",
        "apterium",
        "aptychus",
        "aquarium",
        "Aragonese",
        "Arakanese",
        "arango",
        "arboretum",
        "arcanum",
        "archegonium",
        "archipelago",
        "arcosolium",
        "areola",
        "arf",
        "argumentum",
        "arista",
        "armadillo",
        "arrha",
        "asbestos",
        "ascidium",
        "Asherah",
        "Assamese",
        "asterias",
        "astrocytoma",
        "asylum",
        "asyndeton",
        "ataman",
        "Atlas",
        "atlas",
        "atman",
        "aureus",
        "aurora",
        "auslese",
        "Auslese",
        "auspex",
        "auto",
        "auto de fe",
        "auto-de-fe",
        "autobahn",
        "autochthon",
        "autostrada",
        "avicularium",
        "Avignonese",
        "aviso",
        "avocado",
        "ax",
        "axe",
        "axilla",
        "axis",
        "axon",
        "axopodium",
        "Azerbaijanese",
        "baal",
        "bacillus",
        "bacterium",
        "Bahaman",
        "bajocco",
        "Balinese",
        "ballabile",
        "ballata",
        "ballerina",
        "ballista",
        "Bamako",
        "bandeau",
        "bandeau",
        "bandit",
        "Barquisimeto",
        "barrico",
        "base",
        "basilica",
        "basis",
        "bass",
        "basso",
        "bateau",
        "bateau",
        "bath",
        "bathos",
        "batz",
        "beau",
        "beau",
        "beau geste",
        "bechuana",
        "beef",
        "beerenauslese",
        "bel esprit",
        "bel homme",
        "bel-esprit",
        "belle epoque",
        "bema",
        "Bengalese",
        "Bernese",
        "bersagliere",
        "bhikshu",
        "Bhutanese",
        "bias",
        "bierstube",
        "bifolium",
        "bijou",
        "bilbo",
        "bimbo",
        "bingo",
        "Biro",
        "biscotto",
        "bison",
        "blastema",
        "blemya",
        "blin",
        "blitz",
        "blouse",
        "blue",
        "blues",
        "bodegon",
        "bolero",
        "Bolognese",
        "bolus",
        "Bolzano",
        "bon mot",
        "bon vivant",
        "bona fides",
        "bongo",
        "bordereau",
        "Borghese",
        "Bostonese",
        "Boto",
        "bozzetto",
        "braccio",
        "brachiopod",
        "branchiopod",
        "bratwurst",
        "bravo",
        "break away",
        "break-away",
        "breakaway",
        "bream",
        "breech",
        "breeches",
        "bregma",
        "brigadier general",
        "britches",
        "bronchitis",
        "bronchus",
        "brother",
        "brother german",
        "brother german",
        "brother-german",
        "brother-german",
        "bruschetta",
        "bubo",
        "buffalo",
        "Buginese",
        "bulimus",
        "bulla",
        "bureau",
        "bureau",
        "Burman",
        "Burmese",
        "burro",
        "bursa",
        "bursch",
        "bursitis",
        "busto",
        "buzz",
        "bylina",
        "cabaletta",
        "cactus",
        "caddis",
        "caduceus",
        "caecum",
        "caffe macchiato",
        "caffe ristretto",
        "caiman",
        "Cairo",
        "Calabrese",
        "calamistrum",
        "calathus",
        "calix",
        "callus",
        "calypso",
        "calzone",
        "Camaldolese",
        "camera obscura",
        "canaliculus",
        "candelabrum",
        "cannabis",
        "cantharus",
        "canto",
        "Cantonese",
        "cantus",
        "canvas",
        "canzonetta",
        "capataz",
        "capo",
        "cappuccino",
        "carabiniere",
        "carcinoma",
        "cardo",
        "cardophagus",
        "carex",
        "cargador",
        "caribou",
        "Carlylese",
        "carmen",
        "carp",
        "carte de visite",
        "carte-de-visite",
        "caryatid",
        "caryopsis",
        "casino",
        "Cassinese",
        "cassone",
        "castrato",
        "castrum",
        "casus belli",
        "cathisma",
        "caudex",
        "caulis",
        "cavea",
        "cayman",
        "cecidium",
        "Celanese",
        "celia",
        "cello",
        "cementoma",
        "centesimo",
        "centumvir",
        "cercus",
        "ceriman",
        "Ceylonese",
        "chaeta",
        "chaos",
        "chapeau",
        "chapeau",
        "chapplis",
        "charisma",
        "chassis",
        "chateau",
        "chateau",
        "cherub",
        "chervonetz",
        "cheval",
        "cheval de bataille",
        "cheval-de-bataille",
        "Chicago",
        "child",
        "Chimango",
        "Chinese",
        "chintz",
        "chitarrone",
        "chlamydia",
        "choana",
        "chorda",
        "chorus",
        "chou",
        "chromidium",
        "chromonema",
        "chrysalis",
        "cicatrix",
        "cilantro",
        "cimex",
        "cinclis",
        "cistophorus",
        "cladus",
        "claustrum",
        "clausula",
        "clavula",
        "cleithrum",
        "clepsydra",
        "clipper",
        "clippers",
        "clippers",
        "clitoris",
        "clostridium",
        "co",
        "coagulum",
        "coccidium",
        "cochito",
        "coco",
        "cod",
        "codex",
        "coe",
        "coe",
        "coelia",
        "cognoscente",
        "coitus",
        "collegium",
        "collegium musicum",
        "Colombo",
        "Colorado",
        "columbarium",
        "columna",
        "coma",
        "comatula",
        "commando",
        "compendium",
        "competent",
        "concertino",
        "concerto grosso",
        "concetto",
        "condo",
        "condottiere",
        "conductus",
        "coney",
        "conferva",
        "confluvium",
        "congius",
        "Congoese",
        "Congolese",
        "conidium",
        "conoscente",
        "consortium",
        "contadina",
        "contadino",
        "contagium",
        "contango",
        "contrafactum",
        "contralto",
        "contretemps",
        "conversazione",
        "convolvulus",
        "cony",
        "cony",
        "corgi",
        "corgy",
        "cornetto",
        "corno",
        "cornu",
        "corona",
        "corps",
        "corps",
        "corpus",
        "corpus vile",
        "corpusculum",
        "corrigendum",
        "cortex",
        "cosmos",
        "costa",
        "coup d'etat",
        "court martial",
        "court martial",
        "court-martial",
        "cow",
        "coxendix",
        "coz",
        "craft",
        "crafts child",
        "crafts-child",
        "cranium",
        "craspedon",
        "craspedum",
        "crazia",
        "credo",
        "cremaster",
        "crescendo",
        "cri de coeur",
        "crista",
        "criterion",
        "crowfoot",
        "crus",
        "crusta",
        "cubiculum",
        "cul de four",
        "cul de lampe",
        "cul de sac",
        "cul-de-four",
        "cul-de-lampe",
        "cul-de-sac",
        "cultellus",
        "cumulus",
        "cuniculus",
        "curioso",
        "curriculum",
        "cuspis",
        "cyano",
        "cyathus",
        "cyclops",
        "cynocephalus",
        "cyphella",
        "cysticercus",
        "cystidium",
        "cystoma",
        "Czech",
        "dace",
        "dais",
        "datum",
        "debris",
        "decennium",
        "deer",
        "delirium",
        "demo",
        "denarius",
        "denkmal",
        "denotatum",
        "dentalium",
        "depositum",
        "descriptum",
        "desideratum",
        "designatum",
        "desma",
        "desman",
        "devoto",
        "diabetes",
        "diastema",
        "dichasium",
        "dictum",
        "didymis",
        "die",
        "differentia",
        "digitalis",
        "dilettante",
        "diplococcus",
        "diploma",
        "diporpa",
        "dipsas",
        "directrix",
        "ditto",
        "diverticulum",
        "divertimento",
        "djinn",
        "do",
        "doe",
        "dogma",
        "dolman",
        "dolphinarium",
        "Dongolese",
        "Draco",
        "dragoman",
        "drama",
        "dreikanter",
        "dumka",
        "duumvir",
        "dynamo",
        "edema",
        "editio princeps",
        "editio princeps",
        "efreet",
        "eland",
        "elf",
        "elk",
        "ellipse",
        "ellipsis",
        "emblema",
        "embryo",
        "embryoma",
        "emporium",
        "enconium",
        "endothelioma",
        "enema",
        "enigma",
        "ens rationis",
        "ens reale",
        "entente cordiale",
        "enteron",
        "entrochus",
        "ephelis",
        "ephemera",
        "ephemeris",
        "epicardium",
        "epidermis",
        "epididymis",
        "epilimnion",
        "epimeron",
        "epiphenomenon",
        "epithelioma",
        "epyllion",
        "equinoctium",
        "equisetum",
        "erf",
        "ergastulum",
        "eros",
        "erratum",
        "espanol",
        "Esperanto",
        "espresso",
        "ethos",
        "eucalyptus",
        "eunuch",
        "euporiston",
        "euro",
        "evirato",
        "ex",
        "exanthema",
        "exemplum",
        "exencephalus",
        "explanandum",
        "explicandum",
        "extispex",
        "extremum",
        "eyas",
        "fabella",
        "fabliau",
        "faciendum",
        "faecula",
        "fait accompli",
        "falsetto",
        "falx",
        "familia",
        "famulus",
        "fanfoot",
        "farman",
        "Faro",
        "Faroese",
        "fascia",
        "fasciculus",
        "fauna",
        "favella",
        "faveolus",
        "favissa",
        "fecula",
        "fedai",
        "feis",
        "felo",
        "felo de se",
        "felo-de-se",
        "felsenmeer",
        "femur",
        "fenestra",
        "fermata",
        "Ferrarese",
        "fiasco",
        "fibra",
        "fibrilla",
        "fibroma",
        "fibula",
        "fidei defensor",
        "figurante",
        "filaria",
        "Filipino",
        "finger end",
        "finger-end",
        "fioritura",
        "fish",
        "fizz",
        "flabellum",
        "flag staff",
        "flag-staff",
        "flagellum",
        "flamenco",
        "flatfoot",
        "flatus",
        "flocculus",
        "floccus",
        "flora",
        "flounder",
        "fly",
        "focus",
        "follis",
        "fomes",
        "Foochowese",
        "foot",
        "foramen",
        "formula",
        "forum",
        "fossa",
        "fowl",
        "fraenum",
        "franc archer",
        "franc-archer",
        "frate",
        "frenum",
        "fricandeau",
        "frizz",
        "fro",
        "froe",
        "frottola",
        "frustulum",
        "frustum",
        "fucus",
        "fulcrum",
        "funambulus",
        "fundamentum divisionis",
        "fungo porcino",
        "fungus",
        "furfur",
        "furioso",
        "fuzz",
        "Gabunese",
        "Galla",
        "galla",
        "gallows",
        "gametangium",
        "ganglion",
        "ganglion",
        "gaon",
        "gastrocnemius",
        "geisha",
        "geisteswissenschaft",
        "gemma",
        "gena",
        "generalissimo",
        "Genevese",
        "genie",
        "genius",
        "Genoese",
        "gens",
        "genus",
        "German",
        "germarium",
        "Gestapo",
        "ghetto",
        "gigolo",
        "Gilbertese",
        "giuncus",
        "gizmo",
        "glacis",
        "gladiolus",
        "glass",
        "glasses",
        "glioma",
        "gliosarcoma",
        "glissando",
        "globigerina",
        "glochidium",
        "glomus",
        "glutaeus",
        "gluteus",
        "gmina",
        "go",
        "Goanese",
        "gonangium",
        "gonidium",
        "gonimium",
        "goose",
        "gorgonia",
        "gousblom",
        "goy",
        "graben",
        "graffiti",
        "graffiti",
        "graffito",
        "graffito",
        "graffito",
        "granita",
        "grano",
        "granula",
        "gravamen",
        "Greensboro",
        "gringo",
        "grissino",
        "grotto",
        "grouse",
        "Guaiabero",
        "guano",
        "guardia civil",
        "gubernaculum",
        "guglio",
        "Guianese",
        "gumbo",
        "gumma",
        "guttus",
        "guy",
        "gymnasium",
        "gymnotus",
        "gyro",
        "gyrus",
        "haddock",
        "haemangioma",
        "haggis",
        "Hainanese",
        "hairdo",
        "hake",
        "halibut",
        "hallux",
        "halteridium",
        "hamadryad",
        "hamulus",
        "hapax legomenon",
        "hapteron",
        "Hararese",
        "Harlemese",
        "harman",
        "haruspex",
        "haustellum",
        "haustorium",
        "haustrum",
        "Havanese",
        "he",
        "headquarters",
        "Heavenese",
        "hedron",
        "heft",
        "helion",
        "helix",
        "hemangeioma",
        "hemangioma",
        "hemelytrum",
        "hemera",
        "hemi elytrum",
        "hemi-elytrum",
        "her",
        "hernia",
        "hero",
        "heroon",
        "heroum",
        "herpes",
        "herr",
        "herring",
        "hers",
        "herself",
        "hertz",
        "hetaera",
        "hetaira",
        "hetman",
        "hiatus",
        "hijinks",
        "him",
        "himself",
        "hinaki",
        "hippo",
        "hippocampus",
        "hippopotamus",
        "Hiroshiman",
        "his",
        "ho",
        "hoe",
        "hoe",
        "holothuria",
        "honorarium",
        "hoof",
        "Hoosierese",
        "hordeolum",
        "hormogonium",
        "hoti",
        "Hottentotese",
        "hsien",
        "hubris",
        "human",
        "humerus",
        "Hunanese",
        "hydra",
        "hydraulicon",
        "hydria",
        "hymenium",
        "hymnarium",
        "hyperbaton",
        "hyperbola",
        "hypha",
        "hypnum",
        "hypoderma",
        "hypolimnion",
        "I",
        "ibis",
        "ichthyosaurus",
        "Idaho",
        "idee fixe",
        "idolon",
        "idolum",
        "ignoramus",
        "ilium",
        "imago",
        "imbrex",
        "impetigo",
        "impetus",
        "improperium",
        "improvisatrice",
        "incubus",
        "index",
        "indicium",
        "indigena",
        "individuum",
        "Indochinese",
        "indumentum",
        "indusium",
        "inferno",
        "infima species",
        "info",
        "inhalatorium",
        "innings",
        "inoculum",
        "insula",
        "intaglio",
        "interambulacrum",
        "interaxis",
        "intercalarium",
        "interleaf",
        "intermaxilla",
        "intermedium",
        "intermezzo",
        "internodium",
        "interphenomenon",
        "interradius",
        "interregnum",
        "interrex",
        "interstitium",
        "intertrigo",
        "intervallum",
        "intichiuma",
        "inuk",
        "inukshuk",
        "involucrum",
        "ipse dixit",
        "Iquico",
        "iris",
        "ischium",
        "isidium",
        "ispravnik",
        "isthmus",
        "it",
        "it",
        "iter",
        "its",
        "itself",
        "ixodid",
        "jackanapes",
        "jacobus",
        "jalapeno",
        "jambeau",
        "Japanese",
        "Javanese",
        "jazz",
        "jerry",
        "Jerry",
        "jeu",
        "jo",
        "joe",
        "joe",
        "Johnsonese",
        "judas",
        "judicatum",
        "juelet",
        "jugum",
        "jumbo",
        "junto",
        "Kakapo",
        "Kanarese",
        "kantharos",
        "kar",
        "karakia",
        "karrenfeld",
        "kernos",
        "kibbutz",
        "kilo",
        "kimono",
        "Kinkimavo",
        "kioko",
        "Kiplingese",
        "kletterschuh",
        "knife",
        "knopper",
        "kobo",
        "Kokako",
        "konditorei",
        "Kongoese",
        "Kongolese",
        "Kosovo",
        "kouros",
        "kovsh",
        "kuvasz",
        "kylix",
        "labrum",
        "lacinia",
        "lactobacillus",
        "lacuna",
        "lacunar",
        "laika",
        "lamella",
        "lamina",
        "Lapith",
        "lapith",
        "Lapponese",
        "lar",
        "larnax",
        "larynx",
        "latex",
        "leaf",
        "Lebanese",
        "lebensform",
        "legionella",
        "legomenon",
        "legumen",
        "leishmania",
        "leman",
        "lemma",
        "lemniscus",
        "lemur",
        "lens",
        "lentigo",
        "lentiscus",
        "Leonese",
        "leproma",
        "leprosarium",
        "leptomonas",
        "lepton",
        "leptospira",
        "Lesotho",
        "leu",
        "lex humana",
        "libero",
        "libido",
        "libretto",
        "lido",
        "lied",
        "lieu",
        "lieutenant general",
        "life",
        "ligamentum",
        "likuta",
        "Lilo",
        "Liman",
        "limax",
        "limbo",
        "limes",
        "limo",
        "limulus",
        "linctus",
        "line out",
        "line-out",
        "linea",
        "lineno",
        "lingo",
        "lingula",
        "lino",
        "lipoma",
        "lis",
        "listerella",
        "listeria",
        "lithodomus",
        "lithophyton",
        "livedo",
        "lixivium",
        "loa",
        "loaf",
        "lobulus",
        "lochus",
        "loco",
        "loculus",
        "locus",
        "loggia",
        "logion",
        "logo",
        "logodaedalus",
        "loma",
        "lomentum",
        "Londonese",
        "lord lieutenant",
        "lord-lieutenant",
        "Lorrainese",
        "lorum",
        "louis",
        "louse",
        "lowlife",
        "lox",
        "Lucchese",
        "lumbago",
        "lumbricus",
        "lumen",
        "lustrum",
        "lux",
        "lymphangioma",
        "lymphoma",
        "Lyonese",
        "lyssa",
        "maar",
        "macacus",
        "Macanese",
        "macaroni",
        "Macassarese",
        "macho",
        "mackerel",
        "macro",
        "macula",
        "Madurese",
        "maecenas",
        "maestro",
        "mafiosa",
        "mafioso",
        "mafioso",
        "magilus",
        "magma",
        "magneto",
        "magnifico",
        "magnum opus",
        "magus",
        "major general",
        "Majuro",
        "Malabarese",
        "Malabo",
        "malagma",
        "malleolus",
        "malleus",
        "Maltese",
        "malum in se",
        "man",
        "man child",
        "man midwife",
        "man milliner",
        "man servant",
        "man-child",
        "man-midwife",
        "man-milliner",
        "man-servant",
        "manchild",
        "mango",
        "manifesto",
        "manservant",
        "manteau",
        "mantelletta",
        "mantis",
        "manubrium",
        "Maputo",
        "maquereau",
        "Maracaibo",
        "mare",
        "maremma",
        "marquis",
        "mary",
        "Mary",
        "mater lectionis",
        "math",
        "matin",
        "matinee musicale",
        "matzah",
        "mausoleum",
        "maxilla",
        "maximum",
        "me",
        "measles",
        "meatus",
        "mediastinum",
        "mediatrix",
        "medico",
        "medium",
        "medulloblastoma",
        "medusa",
        "megalosaurus",
        "megatherium",
        "melanoma",
        "melastoma",
        "meliceris",
        "melisma",
        "memento",
        "memo",
        "memorandum",
        "menage a quatre",
        "menage a trois",
        "meningioma",
        "meniscus",
        "menu",
        "meretrix",
        "meris",
        "meshumad",
        "meshummad",
        "mesothelioma",
        "mesothelium",
        "messa di voce",
        "Messinese",
        "meta",
        "metalimnion",
        "metapleuron",
        "metatarsus",
        "metro",
        "metropolis",
        "mew",
        "mews",
        "Mexico",
        "mezuza",
        "mezuzah",
        "mezzo rilievo",
        "mezzo-rilievo",
        "miasma",
        "micro",
        "microbion",
        "microcephalus",
        "micrococcus",
        "microfiche",
        "micronucleus",
        "Milanese",
        "Milano",
        "miles gloriosus",
        "milieu",
        "milieu interieur",
        "miliola",
        "millennium",
        "mimosa",
        "mine",
        "minimum",
        "minnelied",
        "minutia",
        "minyan",
        "miracidium",
        "mithraeum",
        "mitochondrion",
        "mixolimnion",
        "mo",
        "moaks",
        "modelletto",
        "modello",
        "Modenese",
        "modernus",
        "modius",
        "modulus",
        "modus",
        "moe",
        "moe",
        "molimen",
        "momentum",
        "Monaco",
        "monas",
        "mondo",
        "money",
        "mongoose",
        "monimolimnion",
        "mono",
        "monochasium",
        "monorchis",
        "monosyllabon",
        "monota",
        "monoxylon",
        "mons",
        "monseigneur",
        "monsignor",
        "monsignore",
        "monstre sacre",
        "Montenegro",
        "moose",
        "moratorium",
        "morceau",
        "Morocco",
        "moroso",
        "mortadella",
        "mortarium",
        "moscardino",
        "motoscafo",
        "motto",
        "mouse",
        "mousetrap",
        "mouth",
        "mucro",
        "mukim",
        "multigravida",
        "mumps",
        "municipium",
        "Muqdisho",
        "Muranese",
        "murex",
        "musa",
        "musee imaginaire",
        "musique concrete",
        "mustachio",
        "muzz",
        "mya",
        "mycoplasma",
        "mycorhiza",
        "mycorrhiza",
        "myeloma",
        "myo",
        "myself",
        "mythos",
        "myxoma",
        "nachtlokal",
        "nagaika",
        "Nakayaman",
        "Nankingese",
        "nasutus",
        "naumachia",
        "nauplius",
        "nautilus",
        "Navarrese",
        "naya paisa",
        "nebenkern",
        "nebula",
        "nectocalyx",
        "nemathecium",
        "Nenets",
        "nenets",
        "Nepalese",
        "nephridium",
        "nerita",
        "neuma",
        "neurinoma",
        "neuroma",
        "neurula",
        "neutrino",
        "news",
        "nexus",
        "ngwee",
        "Niasese",
        "Nicobarese",
        "nidus",
        "niello",
        "nimbus",
        "Ningbo",
        "Nipponese",
        "nockerl",
        "noctiluca",
        "nodum",
        "nodus",
        "noema",
        "nomisma",
        "non ens",
        "non-ens",
        "Norman",
        "noumenon",
        "nouveau pauvre",
        "nouveau riche",
        "nouvel arrive",
        "nova",
        "novus homo",
        "noxa",
        "nse",
        "nubecula",
        "nucleolonema",
        "nucleolus",
        "nucleus",
        "numen",
        "nuntius",
        "nympha",
        "nymphaeum",
        "nympheum",
        "oath",
        "obelus",
        "obolus",
        "occiput",
        "oceanarium",
        "ocellus",
        "octavo",
        "octohedron",
        "octopus",
        "oculus",
        "odeum",
        "oedema",
        "offspring",
        "ogle",
        "Oklahoman",
        "olfactorium",
        "omentum",
        "ommatidium",
        "onager",
        "one",
        "operculum",
        "ophiophagus",
        "optimum",
        "opus",
        "opus magnum",
        "opusculum",
        "oratrix",
        "oregano",
        "organon",
        "Orinoco",
        "Orlando",
        "orthoceras",
        "osculum",
        "Oslo",
        "osmaterium",
        "osmeterium",
        "ossiculum",
        "osteoclastoma",
        "osteoma",
        "ostium",
        "oto",
        "otomi",
        "Otomi",
        "ottoman",
        "ovarium",
        "ovolo",
        "ovulum",
        "ovum",
        "ox",
        "oxybaphon",
        "oxymoron",
        "oxyuris",
        "paha",
        "paisa",
        "pajamas",
        "pala",
        "palea",
        "pallium",
        "palpebra",
        "palpus",
        "palus",
        "Panaman",
        "Pangasinan",
        "pangasinan",
        "panino",
        "panorpa",
        "pant",
        "panto",
        "pants",
        "pants",
        "paparrazo",
        "papilla",
        "papilloma",
        "papula",
        "papyrus",
        "parabola",
        "parabolanus",
        "parador",
        "paraganglioma",
        "paraganglion",
        "paraglossa",
        "Paramaribo",
        "paranucleus",
        "parapleura",
        "parapleurum",
        "parapsis",
        "paraselene",
        "parc ferme",
        "Pardusco",
        "parenchyma",
        "parergon",
        "parhelion",
        "paries",
        "parison",
        "Parmese",
        "parnas",
        "parnass",
        "parvenu",
        "pasteurella",
        "pastorale",
        "patagium",
        "patera",
        "path",
        "pathos",
        "paxilla",
        "pecia",
        "pecten",
        "pectus",
        "pedalo",
        "pedicellaria",
        "pediluvium",
        "pedion",
        "Pekingese",
        "pelta",
        "pelvis",
        "pence",
        "pendulum",
        "pengo",
        "penicillus",
        "peninsula",
        "penis",
        "penni",
        "penny",
        "pensiero",
        "perceptum",
        "peridium",
        "perikaryon",
        "perithecium",
        "pernio",
        "peronium",
        "perradius",
        "person",
        "persona",
        "pes",
        "phalangium",
        "phalanx",
        "phallos",
        "phallus",
        "pharmakos",
        "phenomenon",
        "phlegmasia",
        "phoca",
        "pholas",
        "photo",
        "phototaxis",
        "phragma",
        "phren",
        "phyle",
        "phyllobranchia",
        "phylum",
        "phyma",
        "phyogemmarium",
        "piano",
        "pickerel",
        "pied a terre",
        "pied noir",
        "Piedmontese",
        "pietra",
        "pifferaro",
        "pike",
        "pileus",
        "pillie",
        "pilus",
        "pimento",
        "pina colada",
        "pinax",
        "pincer",
        "pincers",
        "pincers",
        "pinetum",
        "pingo",
        "pinna",
        "pinon",
        "pinto",
        "pipkrake",
        "piscina",
        "pistillidium",
        "Pistoiese",
        "pithos",
        "pizza",
        "placebo",
        "placitum",
        "planctus",
        "plankter",
        "planula",
        "plasmalemma",
        "plasmodium",
        "plasmolyticum",
        "plasmoma",
        "plateau",
        "plateau",
        "platypus",
        "pleco",
        "plectrum",
        "plenarium",
        "plesiosaurus",
        "plethron",
        "pleura",
        "pleuron",
        "pleurum",
        "plexus",
        "plica",
        "pliers",
        "ploshchadka",
        "plurale tantum",
        "pluteus",
        "Pluto",
        "pneumothorax",
        "po",
        "po",
        "poblador",
        "poculum",
        "podere",
        "podetium",
        "podion",
        "podium",
        "poe",
        "pogo",
        "poise",
        "polis",
        "politbureau",
        "politico",
        "pollex",
        "pollinarium",
        "pollinium",
        "polo",
        "Polonese",
        "polythecium",
        "pomme de terre",
        "poncho",
        "pontifex",
        "porcino",
        "porion",
        "porron",
        "port a beul",
        "port de bras",
        "port-a-beul",
        "portico",
        "portiforium",
        "portmanteau",
        "portmanteau",
        "Porto",
        "Porto Novo",
        "Porto-Novo",
        "portrait parle",
        "Portuguese",
        "postnatus",
        "postpubis",
        "postulatum",
        "potato",
        "potestas",
        "pox",
        "praecognitum",
        "pragma",
        "precis",
        "precognitum",
        "premier danseur",
        "prepenna",
        "prima ballerina",
        "prima donna",
        "primigravida",
        "primordium",
        "principium",
        "pro",
        "proavis",
        "proboscis",
        "proceedings",
        "procoelia",
        "prodromus",
        "proferens",
        "profluvium",
        "proglottis",
        "programma",
        "progymnasium",
        "progymnasma",
        "prokaryon",
        "prolabium",
        "prolegomenon",
        "promerops",
        "propleuron",
        "propodium",
        "propositus",
        "proprium",
        "propylaeum",
        "propylon",
        "prora",
        "prosa",
        "proscenium",
        "proscolla",
        "prosecutrix",
        "prosencephalon",
        "proseucha",
        "prosodiencephalon",
        "prosopium",
        "prospectus",
        "prosula",
        "protarsus",
        "prothallium",
        "prothallus",
        "protococcus",
        "protoma",
        "protonema",
        "prototypon",
        "protypon",
        "proviso",
        "prytanis",
        "psammoma",
        "pseudopodium",
        "pseudostoma",
        "psycho",
        "psydracium",
        "pteroma",
        "pteropus",
        "pteryla",
        "pueblo",
        "pul",
        "pullus",
        "pulmonarium",
        "pulsellum",
        "pulveratrix",
        "punctum",
        "punto blanco",
        "pupa",
        "purlieu",
        "Purum",
        "purum",
        "putto",
        "puttony",
        "pycnidium",
        "pycnis",
        "pycnium",
        "pyjamas",
        "pyla",
        "pyralis",
        "pyramidion",
        "pyrexia",
        "pyrites",
        "pyrophorus",
        "pyxidium",
        "quadratrix",
        "quaesitum",
        "quantum",
        "quarto",
        "quartz",
        "quid",
        "quinarius",
        "quinquennium",
        "Quito",
        "rabies",
        "rad",
        "radiale",
        "radius",
        "radix",
        "ragazza",
        "ragazzo",
        "raggare",
        "ramulus",
        "ramus",
        "ranunculus",
        "rara avis",
        "razz",
        "rectus",
        "redia",
        "reductio",
        "referendum",
        "refugium",
        "regidor",
        "regma",
        "regulus",
        "reich",
        "rejon",
        "rejoneador",
        "relatum",
        "rem",
        "remex",
        "remous",
        "replum",
        "representamen",
        "res",
        "residuum",
        "responsum",
        "rete",
        "retinaculum",
        "retinula",
        "rezident",
        "rezidentsia",
        "rhino",
        "rhinoceros",
        "rhinophyma",
        "rhizoma",
        "rhododendron",
        "rhombohedron",
        "rhomboideus",
        "rhopalium",
        "rhynchodaeum",
        "rhythmus",
        "ri",
        "ricercar",
        "ricercata",
        "ricordo",
        "rideau",
        "rilievo",
        "rimon",
        "rione",
        "risotto",
        "ritardando",
        "rite de passage",
        "rococo",
        "roe",
        "Rom",
        "rom",
        "Romagnese",
        "Roman",
        "Romanese",
        "Romany",
        "romanze",
        "rond de jambe",
        "rondeau",
        "rondo",
        "rostrum",
        "rotula",
        "route nationale",
        "rubashka",
        "ruga",
        "ruse de guerre",
        "rype",
        "sabertooth",
        "sacculus",
        "sacellum",
        "sachverhalt",
        "Sacramento",
        "sacrarium",
        "sacrum",
        "saddo",
        "saffo",
        "sago",
        "sagum",
        "salita",
        "salivarium",
        "salmon",
        "salpa",
        "salvo",
        "sambo",
        "samurai",
        "sanatorium",
        "sanctum sanctorum",
        "sandr",
        "Sangirese",
        "Santiago",
        "Sapporo",
        "Sarajevo",
        "Sarawakese",
        "sarcina",
        "sarcoma",
        "sarcophagus",
        "sarissa",
        "sassafras",
        "satelles",
        "saxicava",
        "sbirro",
        "scalenus",
        "scandalum magnatum",
        "scapula",
        "scapus",
        "scarabaeus",
        "scarus",
        "scazon",
        "sceat",
        "schema",
        "scherzando",
        "scherzo",
        "schisma",
        "schistosomulum",
        "schizostylis",
        "scholium",
        "sciolus",
        "scirrhus",
        "scissors",
        "scolex",
        "scolopidium",
        "scomber",
        "scoria",
        "scotoma",
        "scriptorium",
        "scudo",
        "scungille",
        "scuola",
        "scutellum",
        "scutulum",
        "scutum",
        "scyphus",
        "seaquarium",
        "secans",
        "secretum",
        "secundagravida",
        "secundigravida",
        "secundipara",
        "sedes",
        "sedile",
        "seecatch",
        "seed",
        "Selman",
        "sema",
        "seminium",
        "semuncia",
        "senarius",
        "Senegalese",
        "senex",
        "sensedatum",
        "sensillum",
        "sensoriolum",
        "sensum",
        "sententia",
        "separatrix",
        "sephardi",
        "septarium",
        "septemvir",
        "septenarius",
        "septum",
        "sequela",
        "sequestrum",
        "seraph",
        "sericterium",
        "series",
        "serir",
        "serpigo",
        "serpula",
        "serra",
        "sertularia",
        "serum",
        "sestertium",
        "sestiere",
        "set off",
        "set out",
        "set to",
        "set-off",
        "set-out",
        "set-to",
        "seta",
        "sezession",
        "sforzato",
        "sgraffiato",
        "shad",
        "shaman",
        "shauri",
        "Shavese",
        "shawabti",
        "Shawanese",
        "she",
        "shear",
        "shears",
        "shears",
        "sheep",
        "shelf",
        "shifta",
        "shochet",
        "shomer",
        "short",
        "shorts",
        "shorts",
        "Siamese",
        "siemens",
        "Sienese",
        "siglos",
        "signum",
        "Sikkimese",
        "silbador",
        "silenus",
        "silex",
        "siliqua",
        "silo",
        "Silurus",
        "simia",
        "simplex",
        "simpulum",
        "simulacrum",
        "sinfonia",
        "Singhalese",
        "Sinhalese",
        "sinus",
        "siphunculus",
        "sipunculus",
        "sirocco",
        "sistrum",
        "situla",
        "sizz",
        "ski",
        "snekkja",
        "snipe",
        "snooze",
        "so",
        "soe",
        "Sogdianese",
        "sol",
        "solarium",
        "soldo",
        "solenium",
        "solfeggio",
        "solidus",
        "solo",
        "solstitium",
        "solvus",
        "soma",
        "somaten",
        "sombrero",
        "Sonaman",
        "soprano",
        "soralium",
        "soredium",
        "sorus",
        "soshi",
        "sotch",
        "souvlaki",
        "spadix",
        "Spaetlese",
        "sparus",
        "spasmus",
        "spatha",
        "species",
        "spectrum",
        "speculum",
        "sperma",
        "spermarium",
        "spermatheca",
        "spermatium",
        "spermatoon",
        "spermogonium",
        "sphaeridium",
        "sphagnum",
        "sphex",
        "sphinx",
        "spiculum",
        "spiraculum",
        "spirillum",
        "spondylus",
        "sporodochium",
        "sputum",
        "squadra",
        "squadrist",
        "squalus",
        "squama",
        "squilla",
        "stabilimentum",
        "staccato",
        "stadium",
        "stalactite",
        "stamen",
        "staminidium",
        "staphylococcus",
        "star fish",
        "star-fish",
        "starets",
        "staretz",
        "starfish",
        "starosta",
        "starover",
        "stasimon",
        "statera",
        "statua",
        "status",
        "stela",
        "stella",
        "stemma",
        "stephanion",
        "sterigma",
        "sternebra",
        "sterno",
        "sternum",
        "stichidium",
        "stichos",
        "stigma",
        "stigmaria",
        "stiletto",
        "stillicidium",
        "stimulus",
        "stipes",
        "stipula",
        "stirps",
        "stoa",
        "stolo",
        "stoma",
        "stomach",
        "stomatium",
        "stomion",
        "stomodaeum",
        "storey",
        "stornello",
        "strambotto",
        "strategos",
        "strategus",
        "stratum",
        "streptococcus",
        "streptothrix",
        "stria",
        "striatum",
        "striga",
        "striola",
        "strobila",
        "strobilus",
        "stroma",
        "stromodeum",
        "struma",
        "stryddag",
        "stucco",
        "studium generale",
        "stylo",
        "stylopodium",
        "stylus",
        "subbotnik",
        "subsellium",
        "subsidium",
        "substratum",
        "succinea",
        "succubus",
        "succus",
        "Sudanese",
        "suffrutex",
        "suggestio falsi",
        "suggestum",
        "sulcus",
        "sum total",
        "sum-total",
        "summa",
        "summum bonum",
        "summum genus",
        "sumo",
        "Sundanese",
        "supercilium",
        "superficies",
        "supernova",
        "superstratum",
        "suppositum",
        "supracleithrum",
        "suprascapula",
        "surculus",
        "surimono",
        "sustentaculum",
        "Swahilese",
        "swine",
        "switchfoot",
        "syllabarium",
        "syllabus",
        "symplasma",
        "sympodium",
        "symposium",
        "synaesthesia",
        "synangium",
        "synapticula",
        "synaxarion",
        "synaxarium",
        "synaxis",
        "syncellus",
        "syncytium",
        "syndendrium",
        "synechia",
        "synedrion",
        "synedrium",
        "synesthesia",
        "syntagma",
        "syntaxis",
        "synthronus",
        "synusia",
        "syphiloma",
        "syringe",
        "syrinx",
        "syrphus",
        "syrtis",
        "tabella",
        "tableau",
        "tableau",
        "tablinum",
        "tabula",
        "Tacoman",
        "taenia",
        "tagma",
        "Taiko",
        "talea",
        "talisman",
        "talouse",
        "talus",
        "tango",
        "tarantata",
        "tarantato",
        "tarsus",
        "taxis",
        "taxon",
        "tazza",
        "teal",
        "techno",
        "tegmen",
        "tegmentum",
        "tegula",
        "telamon",
        "telium",
        "temblor",
        "tempietto",
        "tempo",
        "tenaculum",
        "tenderfoot",
        "Tenggerese",
        "tenia",
        "tenorino",
        "tentaculum",
        "tentamen",
        "tenuis",
        "tepidarium",
        "teratoma",
        "terebellum",
        "terebratula",
        "teredo",
        "tergum",
        "termes",
        "terminus",
        "terp",
        "terrae filius",
        "terramara",
        "terrarium",
        "terrazzo",
        "territorium",
        "terzetto",
        "tessella",
        "tessera",
        "testes",
        "testes",
        "testis",
        "testis",
        "testudo",
        "tetanothrum",
        "tete a tete",
        "tete-a-tete",
        "tetracolon",
        "tetragrammaton",
        "tetrahedron",
        "tetrapleuron",
        "tetrasporangium",
        "thalamos",
        "thalamus",
        "thanatorium",
        "that",
        "thaumaturgus",
        "thebe",
        "theca",
        "theirs",
        "thelycum",
        "them",
        "thema",
        "themself",
        "themselves",
        "theologoumenon",
        "thesaurus",
        "they",
        "thief",
        "this",
        "tholos",
        "tholus",
        "thorax",
        "thos",
        "thraso",
        "thymiaterion",
        "thymus",
        "thyridium",
        "thyrsus",
        "tibia",
        "Timorese",
        "timpano",
        "tintinnabulum",
        "tipula",
        "tiro",
        "Tirolese",
        "to",
        "tobacco",
        "Tocharese",
        "toe",
        "toe",
        "Togo",
        "Tokyo",
        "tolkach",
        "tomato",
        "tombarolo",
        "tomium",
        "tondo",
        "tong",
        "tongs",
        "tongs",
        "Tonkinese",
        "tonneau",
        "tonneau",
        "tooth",
        "topaz",
        "topos",
        "torero",
        "toril",
        "Torinese",
        "Torino",
        "torma",
        "Tornese",
        "tornus",
        "Toronto",
        "torso",
        "tortilla espanola",
        "tortrix",
        "torula",
        "torulus",
        "torus",
        "tour de force",
        "toxicum",
        "toxius",
        "toxoplasma",
        "trabea",
        "trabecula",
        "trachea",
        "tractatrix",
        "tractellum",
        "tractrix",
        "tragus",
        "trapezium",
        "trapezius",
        "trapezohedron",
        "trattoria",
        "trauma",
        "trellis",
        "tremolo",
        "treponema",
        "trichidium",
        "trichina",
        "trichoma",
        "triclinium",
        "triens",
        "triforium",
        "trilby",
        "triplum",
        "triradius",
        "triumvir",
        "trochus",
        "trockenbeerenauslese",
        "tropaeolum",
        "troparion",
        "tropis",
        "trousers",
        "trousseau",
        "trousseau",
        "trout",
        "trullo",
        "trumeau",
        "tsuba",
        "tsubo",
        "tuber",
        "tuberculoma",
        "tuberculum",
        "tubulus",
        "tumulus",
        "tuna",
        "turbot",
        "turf",
        "turron",
        "tympanum",
        "typo",
        "tyro",
        "Tyrolese",
        "udarnik",
        "ulpan",
        "ultimatum",
        "umbilicus",
        "umbo",
        "umbra",
        "umwelt",
        "uncia",
        "uncinus",
        "uncus",
        "unguis",
        "unio",
        "uomo",
        "uomo universale",
        "uraeus",
        "uredinium",
        "uredium",
        "uredosorus",
        "urodaeum",
        "urodeum",
        "urus",
        "usnea",
        "ustilago",
        "uterus",
        "utricularia",
        "uva",
        "vaalpens",
        "vacuum",
        "vagina",
        "vaginula",
        "vagus",
        "vallecula",
        "valuta",
        "valvula",
        "vaporetto",
        "vaquero",
        "varella",
        "varia lectio",
        "varix",
        "vas",
        "vasculitis",
        "vasculum",
        "veduta",
        "veg",
        "vehiculum",
        "velamen",
        "velarium",
        "velum",
        "vena",
        "venus",
        "vermicello",
        "vermiculus",
        "Vermontese",
        "Veronese",
        "verruca",
        "vers libre",
        "versiculus",
        "verso",
        "vertebra",
        "vertex",
        "verticillus",
        "vesicula",
        "vestigium",
        "vetturino",
        "viale",
        "viaticum",
        "vibex",
        "vibraculum",
        "vibrato",
        "vibrio",
        "Viennese",
        "Vietnamese",
        "vila",
        "villanella",
        "villino",
        "villus",
        "vinculum",
        "violetta",
        "violoncello",
        "virga",
        "Virgo",
        "virtuoso",
        "virus",
        "vis",
        "viscus",
        "vitellarium",
        "vitta",
        "vivarium",
        "vlakte",
        "voeu",
        "volcanello",
        "volcano",
        "vomica",
        "vomitorium",
        "voorbok",
        "vorspiel",
        "vorstellung",
        "vortex",
        "wadi",
        "wady",
        "waldo",
        "waltz",
        "wanderjahr",
        "wandervogel",
        "washer up",
        "washer-up",
        "weirdo",
        "Wenchowese",
        "wharf",
        "what",
        "whatever",
        "whatsoever",
        "white staff",
        "whiting",
        "Whitmanese",
        "who",
        "whoever",
        "whom",
        "whomever",
        "whomsoever",
        "whose",
        "whosesoever",
        "whosever",
        "whosoever",
        "wife",
        "wildebeest",
        "wolf",
        "woman child",
        "woman servant",
        "woman-child",
        "woman-servant",
        "womanchild",
        "wreath",
        "xanthoma",
        "xiphiplastron",
        "xiphopagus",
        "xiphoplastron",
        "xoanon",
        "xystus",
        "Yakiman",
        "Yamoussoukro",
        "yarraman",
        "Yengeese",
        "yes",
        "yo",
        "yo yo",
        "yo-yo",
        "yoe",
        "Yokohaman",
        "you",
        "you",
        "yours",
        "yourself",
        "Yuman",
        "Yunnanese",
        "yuo",
        "zadruga",
        "zeitgeber",
        "zemirah",
        "zeppole",
        "zero",
        "Zibo",
        "zingano",
        "zita",
        "zitella",
        "zizz",
        "zloty",
        "zoaea",
        "zoarium",
        "zoea",
        "zooea",
        "zooecium",
        "zoon",
        "zoophorus",
        "zoosporangium",
        "zophorus",
        "zucca",
        "zucchini",
        "zuppa",
        "zuz",
        "zygantrum",
        "zygoma",
        "zygon",
    ]
    .iter()
    .cloned()
    .collect()
});

/// Returns true or false indicating whether a noun is singular.
pub fn is_singular<A: AsRef<str>>(word: A) -> bool {
    let word = word.as_ref();
    #[cfg(feature = "debug")]
    println!("is_singular({})", word);

    if IS_SINGULAR.contains(word) {
        #[cfg(feature = "debug")]
        println!("  found '{}' in IS_SINGULAR", word);
        return true;
    }
    let lc_word = word.to_lowercase();
    if IS_SINGULAR.contains(&*lc_word) {
        #[cfg(feature = "debug")]
        println!("  found lc '{}' in IS_SINGULAR", word);
        return true;
    }
    let tc_word = if word.len() > 1 {
        Some(to_titlecase(word))
    } else {
        None
    };
    if let Some(tc_word) = &tc_word {
        if IS_SINGULAR.contains(tc_word.as_str()) {
            #[cfg(feature = "debug")]
            println!("  found tc '{}' in IS_SINGULAR", word);
            return true;
        }
    }

    if IS_PLURAL.contains(word) {
        #[cfg(feature = "debug")]
        println!("  found '{}' in IS_PLURAL", word);
        return false;
    }
    if IS_PLURAL.contains(&*lc_word) {
        #[cfg(feature = "debug")]
        println!("  found lc '{}' in IS_PLURAL", word);
        return false;
    }
    if let Some(tc_word) = &tc_word {
        if IS_PLURAL.contains(tc_word.as_str()) {
            #[cfg(feature = "debug")]
            println!("  found tc '{}' in IS_PLURAL", word);
            return false;
        }
    }

    for r in SINGULAR_RECOGNIZERS.iter().filter(|r| !r.is_nonindicative) {
        if let Some(idx) = r.recursive_capture_idx {
            if let Some(caps) = r.regex.captures(word) {
                if let Some(part) = caps.get(idx) {
                    #[cfg(feature = "debug")]
                    println!(
                        "  word '{}' matched recursive logic for recognizer regex {:?}, returning is_singular({})",
                        word, r.regex, part.as_str(),
                    );
                    return is_singular(part.as_str());
                }
            }
        } else if r.regex.is_match(word) {
            #[cfg(feature = "debug")]
            println!(
                "  word '{}' matched singular recognizer regex {:?}",
                word, r.regex,
            );
            return true;
        }
    }

    #[cfg(feature = "debug")]
    println!("  returning !is_plural({})", word);
    !is_plural(word)
}

#[cfg(test)]
mod tests {
    use std::borrow::Cow;

    static CONVERSIONS_TEST_DATA: &str = r#"
# Singular         |  Modern Plural      |  Classical Plural  |  Classical Plural to Singular
# _______________  |  _________________  |  _________________ |  ____________
  afterlife        |                     |  afterlives        |              
  angiosarcoma     |  angiosarcomas      |  angiosarcomata    |              
  antihelix        |                     |  antihelices       |              
  archthief        |                     |  archthieves       |              
  aviatrix         |  aviatrixes         |  aviatrices        |              
  bacillus         |                     |  bacilli           |              
  bass             |  basses             |  bass              |              
  beau             |  beaus              |  beaux             |              
  bellsheep        |                     |  bellsheep         |              
  bema             |  bemas              |  bemata            |              
  biogas           |  biogases           |                    |              
  bookshelf        |                     |  bookshelves       |              
  brother          |  brothers           |  brethren          |              
  cart-ox          |                     |  cart-oxen         |              
  catfish          |                     |  catfish           |              
  child            |                     |  children          |              
  consul-general   |  consuls-general    |                    |              
  cow              |  cows               |  kine              |              
  curse            |  curses             |                    |              
  datum            |                     |  data              |              
  deer             |                     |  deer              |              
  djinn            |  djinns             |  djinn             |              
  edema            |  edemas             |  edemata           |              
  elf              |                     |  elves             |              
  endostoma        |  endostomas         |  endostomata       |              
  epiglottis       |  epiglottises       |                    |              
  epiphenomenon    |                     |  epiphenomena      |              
  fish             |                     |  fish              |              
  forehoof         |  forehoofs          |  forehooves        |              
  fowl             |  fowls              |  fowl              |              
  gas              |  gases              |                    |              
  genus            |                     |  genera            |              
  glottis          |  glottises          |                    |              
  half-elf         |                     |  half-elves        |              
  hearse           |  hearses            |                    |              
  hedron           |  hedrons            |  hedra             |              
  helion           |  helions            |  helia             |              
  helix            |                     |  helices           |              
  hoof             |  hoofs              |  hooves            |              
  horse            |  horses             |                    |              
  knife            |                     |  knives            |              
  knight-errant    |  knights-errant     |                    |              
  lactobacillus    |                     |  lactobacilli      |              
  leaf             |                     |  leaves            |              
  legomenon        |                     |  legomena          |              
  lemma            |  lemmas             |  lemmata           |              
  life             |                     |  lives             |              
  loaf             |                     |  loaves            |              
  lumen            |  lumens             |  lumina            |              
  lymphedema       |  lymphedemas        |  lymphedemata      |              
  midwife          |                     |  midwives          |              
  milieu           |  milieus            |  milieux           |              
  milk-cow         |  milk-cows          |  milk-kine         |              
  millilumen       |  millilumens        |  millilumina       |              
  mother-in-law    |  mothers-in-law     |                    |              
  nova             |  novas              |  novae             |              
  nucleus          |                     |  nuclei            |              
  null-datum       |                     |  null-data         |              
  oberwildebeest   |  oberwildebeests    |  oberwildebeest    |              
  parabema         |  parabemas          |  parabemata        |              
  paranucleus      |                     |  paranuclei        |              
  passer-by        |  passers-by         |                    |              
  penknife         |                     |  penknives         |              
  penumbra         |  penumbras          |  penumbrae         |              
  perihelion       |  perihelions        |  perihelia         |              
  person           |  people             |  persons           |              
  phalanx          |  phalanxes          |  phalanges         |              
  phenomenon       |                     |  phenomena         |              
  pikestaff        |  pikestaffs         |  pikestaves        |  pikestave   
  pikestave        |  pikestaves         |                    |              
  poise            |  poises             |  poise             |              
  polyhedron       |  polyhedrons        |  polyhedra         |              
  proboscis        |  proboscises        |  proboscides       |              
  prolegomenon     |                     |  prolegomena       |              
  pseudoproboscis  |  pseudoproboscises  |  pseudoproboscides |              
  quarterstaff     |  quarterstaffs      |  quarterstaves     |  quarterstave
  reindeer         |                     |  reindeer          |              
  salesperson      |  salespeople        |  salespersons      |              
  sarcolemma       |  sarcolemmas        |  sarcolemmata      |              
  sarcoma          |  sarcomas           |  sarcomata         |              
  sea-bass         |  sea-basses         |  sea-bass          |              
  sense            |  senses             |                    |              
  she-wolf         |                     |  she-wolves        |              
  sheep            |                     |  sheep             |              
  shelf            |                     |  shelves           |              
  son-of-a-gun     |  sons-of-guns       |                    |              
  sphinx           |  sphinxes           |  sphinges          |              
  staff            |  staffs             |  staves            |  stave       
  stave            |  staves             |  staves            |  stave       
  stepbrother      |  stepbrothers       |  stepbrethren      |              
  stepchild        |                     |  stepchildren      |              
  stoma            |  stomas             |  stomata           |              
  stratum          |  stratums           |  strata            |              
  subgenus         |                     |  subgenera         |              
  substratum       |  substratums        |  substrata         |              
  sugarloaf        |                     |  sugarloaves       |              
  supernova        |  supernovas         |  supernovae        |              
  syrynx           |  syrynxes           |  syrynges          |              
  tea-leaf         |                     |  tea-leaves        |              
  thief            |                     |  thieves           |              
  umbra            |  umbras             |  umbrae            |              
  veg              |  veges              |  veg               |              
  waterfowl        |  waterfowls         |  waterfowl         |              
  wife             |                     |  wives             |              
  wildebeest       |  wildebeests        |  wildebeest        |              
  wolf             |                     |  wolves            |              
"#;

    #[test]
    fn conversions() {
        for mut line in CONVERSIONS_TEST_DATA
            .lines()
            .filter(|l| !(l.is_empty() || l.contains('#')))
        {
            // An ambiguous word is one where the coversion from classical to
            // singular produces a different word than the original
            // singular. An example is staff (S) -> staves (CP) -> stave (S).
            let is_ambiguous = if line.starts_with('!') {
                line = line.strip_prefix("! ").unwrap();
                true
            } else {
                false
            };
            let inflections = line
                .split('|')
                .map(str::trim)
                .filter(|s| !s.is_empty())
                .collect::<Vec<&str>>();
            let singular = inflections[0];
            let mut modern_plural = inflections[1].to_string();
            let classical_plural = inflections.get(2);
            let singular_from_classical = inflections.get(3).unwrap_or(&singular);

            if modern_plural.is_empty() {
                if classical_plural.is_none() {
                    panic!("line does not have any plurals: [{}]", line);
                }
                modern_plural = classical_plural.unwrap().to_string();
            }
            let classical_plural = classical_plural
                .map(|cp| cp.to_string())
                .unwrap_or_else(|| modern_plural.clone());

            test_one_conversion(
                "singular",
                "modern plural",
                singular,
                &modern_plural,
                super::convert_to_modern_plural,
            );
            test_one_conversion(
                "modern plural",
                "modern plural",
                &modern_plural,
                &modern_plural,
                super::convert_to_modern_plural,
            );

            test_one_conversion(
                "singular",
                "classical plural",
                singular,
                &classical_plural,
                super::convert_to_classical_plural,
            );
            test_one_conversion(
                "classical plural",
                "classical plural",
                &classical_plural,
                &classical_plural,
                super::convert_to_classical_plural,
            );

            test_one_conversion(
                "singular",
                "singular",
                singular,
                singular,
                super::convert_to_singular,
            );
            test_one_conversion(
                "modern plural",
                "singular",
                &modern_plural,
                singular,
                super::convert_to_singular,
            );
            if !is_ambiguous {
                test_one_conversion(
                    "classical plural",
                    "singular",
                    &classical_plural,
                    singular_from_classical,
                    super::convert_to_singular,
                );
            }
        }
    }

    fn test_one_conversion<A, F>(from: &str, to: &str, word: A, expect: &str, conv: F)
    where
        A: AsRef<str>,
        F: Fn(&str) -> Cow<'_, str>,
    {
        let word = word.as_ref();
        assert_eq!(
            conv(word),
            expect,
            "from {from} convert_to_{to}({word}) = {expect}",
            from = from,
            to = to,
            word = word,
            expect = expect,
        );

        let word = word.to_uppercase();
        assert_eq!(
            conv(word.as_str()).to_lowercase(),
            expect.to_lowercase(),
            "from {from} convert_to_{to}({word}) = {expect}",
            from = from,
            to = to,
            word = word.as_str(),
            expect = expect,
        );

        let word = super::to_titlecase(&word);
        assert_eq!(
            conv(word.as_str()).to_lowercase(),
            expect.to_lowercase(),
            "from {from} convert_to_{to}({word}) = {expect}",
            from = from,
            to = to,
            word = word.as_str(),
            expect = expect,
        );
    }

    #[test]
    fn is_plural() {
        for word in super::IS_PLURAL.iter() {
            assert!(super::is_plural(word), "is_plural({}) is true", word);
        }
    }

    #[test]
    fn is_singular() {
        for word in super::IS_SINGULAR.iter() {
            assert!(super::is_singular(word), "is_singular({}) is true", word);
        }
    }
}
