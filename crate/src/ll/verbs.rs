// vim:set ro: -*- buffer-read-only:t -*-
// -*- mode: rust -*-
//
// This code is generated by the tools in the en-inflexion repo. PRs should
// edit the tools instead of editing this code.
//
// Anything used here must be in the Cargo.toml for the crate, not for the
// generator.

//! Low level functions and data for verbs.
use crate::util::to_titlecase;
use once_cell::sync::Lazy;
use regex::Regex;
use std::{
    borrow::Cow,
    collections::{HashMap, HashSet},
};

static PLURAL_OF: Lazy<HashMap<&'static str, &'static str>> = Lazy::new(|| {
    [
        ("abides", "abide"),
        ("aches", "ache"),
        ("am", "are"),
        ("are", "are"),
        ("arises", "arise"),
        ("asks", "ask"),
        ("avalanches", "avalanche"),
        ("awakes", "awake"),
        ("beats", "beat"),
        ("becomes", "become"),
        ("begets", "beget"),
        ("begins", "begin"),
        ("beholds", "behold"),
        ("bellyaches", "bellyache"),
        ("bends", "bend"),
        ("bets", "bet"),
        ("binds", "bind"),
        ("bites", "bite"),
        ("bleeds", "bleed"),
        ("blitzes", "blitz"),
        ("blows", "blow"),
        ("breaks", "break"),
        ("breeds", "breed"),
        ("brings", "bring"),
        ("builds", "build"),
        ("burns", "burn"),
        ("bursts", "burst"),
        ("busts", "bust"),
        ("caches", "cache"),
        ("can", "can"),
        ("catches", "catch"),
        ("changes", "change"),
        ("chooses", "choose"),
        ("claps", "clap"),
        ("clings", "cling"),
        ("comes", "come"),
        ("continues", "continue"),
        ("costs", "cost"),
        ("could", "could"),
        ("creches", "creche"),
        ("creeps", "creep"),
        ("dares", "dare"),
        ("deals", "deal"),
        ("dies", "die"),
        ("digs", "dig"),
        ("dives", "dive"),
        ("douches", "douche"),
        ("drags", "drag"),
        ("dreams", "dream"),
        ("drinks", "drink"),
        ("drives", "drive"),
        ("dwells", "dwell"),
        ("eats", "eat"),
        ("expects", "expect"),
        ("falls", "fall"),
        ("feels", "feel"),
        ("fights", "fight"),
        ("finds", "find"),
        ("flees", "flee"),
        ("flies", "fly"),
        ("flings", "fling"),
        ("follows", "follow"),
        ("forbids", "forbid"),
        ("foresees", "foresee"),
        ("foretells", "foretell"),
        ("forgets", "forget"),
        ("forgives", "forgive"),
        ("forsakes", "forsake"),
        ("gets", "get"),
        ("gilds", "gild"),
        ("gives", "give"),
        ("goes", "go"),
        ("grinds", "grind"),
        ("happens", "happen"),
        ("has", "have"),
        ("helps", "help"),
        ("hews", "hew"),
        ("hits", "hit"),
        ("holds", "hold"),
        ("hurts", "hurt"),
        ("inlays", "inlay"),
        ("insists", "insist"),
        ("interlays", "interlay"),
        ("irises", "iris"),
        ("is", "are"),
        ("keeps", "keep"),
        ("kills", "kill"),
        ("kneels", "kneel"),
        ("knits", "knit"),
        ("knows", "know"),
        ("lays", "lay"),
        ("leads", "lead"),
        ("leans", "lean"),
        ("leaps", "leap"),
        ("learns", "learn"),
        ("leaves", "leave"),
        ("lies", "lie"),
        ("likes", "like"),
        ("lives", "live"),
        ("looks", "look"),
        ("loses", "lose"),
        ("loves", "love"),
        ("may", "may"),
        ("means", "mean"),
        ("meets", "meet"),
        ("menus", "menu"),
        ("might", "might"),
        ("misleads", "mislead"),
        ("mistakes", "mistake"),
        ("misunderstands", "misunderstand"),
        ("moves", "move"),
        ("must", "must"),
        ("needs", "need"),
        ("niches", "niche"),
        ("ought", "ought"),
        ("overdraws", "overdraw"),
        ("overhears", "overhear"),
        ("overtakes", "overtake"),
        ("presets", "preset"),
        ("proves", "prove"),
        ("provides", "provide"),
        ("psyches", "psyche"),
        ("puts", "put"),
        ("quits", "quit"),
        ("quizzes", "quiz"),
        ("reaches", "reach"),
        ("remains", "remain"),
        ("remembers", "remember"),
        ("rends", "rend"),
        ("rides", "ride"),
        ("rids", "rid"),
        ("rings", "ring"),
        ("rises", "rise"),
        ("rives", "rive"),
        ("runs", "run"),
        ("saws", "saw"),
        ("seeks", "seek"),
        ("seems", "seem"),
        ("shakes", "shake"),
        ("shall", "shall"),
        ("shaves", "shave"),
        ("sheds", "shed"),
        ("shits", "shit"),
        ("shoes", "shoe"),
        ("should", "should"),
        ("shows", "show"),
        ("shrinks", "shrink"),
        ("sings", "sing"),
        ("sinks", "sink"),
        ("sits", "sit"),
        ("skis", "ski"),
        ("slays", "slay"),
        ("slides", "slide"),
        ("slinks", "slink"),
        ("slits", "slit"),
        ("smells", "smell"),
        ("smites", "smite"),
        ("sneaks", "sneak"),
        ("sows", "sow"),
        ("speaks", "speak"),
        ("speeds", "speed"),
        ("spends", "spend"),
        ("spits", "spit"),
        ("spoils", "spoil"),
        ("springs", "spring"),
        ("stands", "stand"),
        ("staves", "stave"),
        ("stays", "stay"),
        ("steals", "steal"),
        ("stings", "sting"),
        ("stinks", "stink"),
        ("stops", "stop"),
        ("strews", "strew"),
        ("strides", "stride"),
        ("strips", "strip"),
        ("strives", "strive"),
        ("sublets", "sublet"),
        ("sunburns", "sunburn"),
        ("swears", "swear"),
        ("sweats", "sweat"),
        ("sweeps", "sweep"),
        ("swells", "swell"),
        ("swims", "swim"),
        ("swings", "swing"),
        ("talks", "talk"),
        ("tears", "tear"),
        ("thrives", "thrive"),
        ("thrusts", "thrust"),
        ("treads", "tread"),
        ("undergoes", "undergo"),
        ("understands", "understand"),
        ("undertakes", "undertake"),
        ("upsets", "upset"),
        ("vexes", "vex"),
        ("waits", "wait"),
        ("wakes", "wake"),
        ("walks", "walk"),
        ("wants", "want"),
        ("was", "were"),
        ("watches", "watch"),
        ("wears", "wear"),
        ("weeps", "weep"),
        ("wends", "wend"),
        ("will", "will"),
        ("wins", "win"),
        ("withdraws", "withdraw"),
        ("withholds", "withhold"),
        ("withstands", "withstand"),
        ("would", "would"),
        ("wrings", "wring"),
    ]
    .iter()
    .cloned()
    .collect()
});

static SINGULAR_RECOGNIZER_REGEXES: Lazy<Vec<Regex>> = Lazy::new(|| {
    vec![
        Regex::new(r#"(?i)\A(.*)bears$"#).unwrap(),     // 0
        Regex::new(r#"(?i)\A(.*)bids$"#).unwrap(),      // 1
        Regex::new(r#"(?i)\A(.*)buys$"#).unwrap(),      // 2
        Regex::new(r#"(?i)\A(.*)casts$"#).unwrap(),     // 3
        Regex::new(r#"(?i)\A(.*)clads$"#).unwrap(),     // 4
        Regex::new(r#"(?i)\A(.*)cuts$"#).unwrap(),      // 5
        Regex::new(r#"(?i)\A(.*)does$"#).unwrap(),      // 6
        Regex::new(r#"(?i)\A(.*)draws$"#).unwrap(),     // 7
        Regex::new(r#"(?i)\A(.*)feeds$"#).unwrap(),     // 8
        Regex::new(r#"(?i)\A(.*)freezes$"#).unwrap(),   // 9
        Regex::new(r#"(?i)\A(.*)grows$"#).unwrap(),     // 10
        Regex::new(r#"(?i)\A(.*)hangs$"#).unwrap(),     // 11
        Regex::new(r#"(?i)\A(.*)shears$"#).unwrap(),    // 12
        Regex::new(r#"(?i)\A(.*)hears$"#).unwrap(),     // 13
        Regex::new(r#"(?i)\A(.*)hides$"#).unwrap(),     // 14
        Regex::new(r#"(?i)\A(.*)inputs$"#).unwrap(),    // 15
        Regex::new(r#"(?i)\A(.*)knits$"#).unwrap(),     // 16
        Regex::new(r#"(?i)\A(.*)lends$"#).unwrap(),     // 17
        Regex::new(r#"(?i)\A(.*)lets$"#).unwrap(),      // 18
        Regex::new(r#"(?i)\A(.*)lights$"#).unwrap(),    // 19
        Regex::new(r#"(?i)\A(.*)makes$"#).unwrap(),     // 20
        Regex::new(r#"(?i)\A(.*)mows$"#).unwrap(),      // 21
        Regex::new(r#"(?i)\A(.*)pays$"#).unwrap(),      // 22
        Regex::new(r#"(?i)\A(.*)reads$"#).unwrap(),     // 23
        Regex::new(r#"(?i)\A(.*)says$"#).unwrap(),      // 24
        Regex::new(r#"(?i)\A(.*)sees$"#).unwrap(),      // 25
        Regex::new(r#"(?i)\A(.*)sells$"#).unwrap(),     // 26
        Regex::new(r#"(?i)\A(.*)sends$"#).unwrap(),     // 27
        Regex::new(r#"(?i)\A(.*)sets$"#).unwrap(),      // 28
        Regex::new(r#"(?i)\A(.*)sews$"#).unwrap(),      // 29
        Regex::new(r#"(?i)\A(.*)shines$"#).unwrap(),    // 30
        Regex::new(r#"(?i)\A(.*)shoots$"#).unwrap(),    // 31
        Regex::new(r#"(?i)\A(.*)shuts$"#).unwrap(),     // 32
        Regex::new(r#"(?i)\A(.*)sleeps$"#).unwrap(),    // 33
        Regex::new(r#"(?i)\A(.*)slings$"#).unwrap(),    // 34
        Regex::new(r#"(?i)\A(.*)spins$"#).unwrap(),     // 35
        Regex::new(r#"(?i)\A(.*)splits$"#).unwrap(),    // 36
        Regex::new(r#"(?i)\A(.*)spreads$"#).unwrap(),   // 37
        Regex::new(r#"(?i)\A(.*)sticks$"#).unwrap(),    // 38
        Regex::new(r#"(?i)\A(.*)strikes$"#).unwrap(),   // 39
        Regex::new(r#"(?i)\A(.*)strings$"#).unwrap(),   // 40
        Regex::new(r#"(?i)\A(.*)takes$"#).unwrap(),     // 41
        Regex::new(r#"(?i)\A(.*)teaches$"#).unwrap(),   // 42
        Regex::new(r#"(?i)\A(.*)tells$"#).unwrap(),     // 43
        Regex::new(r#"(?i)\A(.*)thinks$"#).unwrap(),    // 44
        Regex::new(r#"(?i)\A(.*)throws$"#).unwrap(),    // 45
        Regex::new(r#"(?i)\A(.*)tries$"#).unwrap(),     // 46
        Regex::new(r#"(?i)\A(.*)weaves$"#).unwrap(),    // 47
        Regex::new(r#"(?i)\A(.*)weds$"#).unwrap(),      // 48
        Regex::new(r#"(?i)\A(.*)wets$"#).unwrap(),      // 49
        Regex::new(r#"(?i)\A(.*)winds$"#).unwrap(),     // 50
        Regex::new(r#"(?i)\A(.*)writes$"#).unwrap(),    // 51
        Regex::new(r#"(?i)\A(.*)adds$"#).unwrap(),      // 52
        Regex::new(r#"(?i)\A(.*)alights$"#).unwrap(),   // 53
        Regex::new(r#"(?i)\A(.*)allows$"#).unwrap(),    // 54
        Regex::new(r#"(?i)\A(.*)appears$"#).unwrap(),   // 55
        Regex::new(r#"(?i)\A(.*)believes$"#).unwrap(),  // 56
        Regex::new(r#"(?i)\A(.*)calls$"#).unwrap(),     // 57
        Regex::new(r#"(?i)\A(.*)clothes$"#).unwrap(),   // 58
        Regex::new(r#"(?i)\A(.*)considers$"#).unwrap(), // 59
        Regex::new(r#"(?i)\A(.*)creates$"#).unwrap(),   // 60
        Regex::new(r#"(?i)\A(.*)fits$"#).unwrap(),      // 61
        Regex::new(r#"(?i)\A(.*)includes$"#).unwrap(),  // 62
        Regex::new(r#"(?i)\A(.*)melts$"#).unwrap(),     // 63
        Regex::new(r#"(?i)\A(.*)offers$"#).unwrap(),    // 64
        Regex::new(r#"(?i)\A(.*)opens$"#).unwrap(),     // 65
        Regex::new(r#"(?i)\A(.*)plays$"#).unwrap(),     // 66
        Regex::new(r#"(?i)\A(.*)serves$"#).unwrap(),    // 67
        Regex::new(r#"(?i)\A(.*)smells$"#).unwrap(),    // 68
        Regex::new(r#"(?i)\A(.*)spells$"#).unwrap(),    // 69
        Regex::new(r#"(?i)\A(.*)spills$"#).unwrap(),    // 70
        Regex::new(r#"(?i)\A(.*)starts$"#).unwrap(),    // 71
        Regex::new(r#"(?i)\A(.*)turns$"#).unwrap(),     // 72
        Regex::new(r#"(?i)\A(.*)uses$"#).unwrap(),      // 73
        Regex::new(r#"(?i)\A(.*)works$"#).unwrap(),     // 74
        Regex::new(r#"(?i)\A(.+)n't$"#).unwrap(),       // 75
        Regex::new(r#"(?i)\A(.+[aeiou])ys$"#).unwrap(), // 76
        Regex::new(r#"(?i)\A(.+[aiy])nxes$"#).unwrap(), // 77
        Regex::new(r#"(?i)\A(.+)ceps$"#).unwrap(),      // 78
        Regex::new(r#"(?i)\A(.+[cs])hes$"#).unwrap(),   // 79
        Regex::new(r#"(?i)\A(.+)oes$"#).unwrap(),       // 80
        Regex::new(r#"(?i)\A(.+)ieus$"#).unwrap(),      // 81
        Regex::new(r#"(?i)\A(.+)eaus$"#).unwrap(),      // 82
        Regex::new(r#"(?i)\A(.+)sses$"#).unwrap(),      // 83
        Regex::new(r#"(?i)\A(.+)trixes$"#).unwrap(),    // 84
        Regex::new(r#"(?i)\A(.+)xes$"#).unwrap(),       // 85
        Regex::new(r#"(?i)\A(.+)zzes$"#).unwrap(),      // 86
        Regex::new(r#"(?i)\A(.+)zes$"#).unwrap(),       // 87
        Regex::new(r#"(?i)\A(.+)ues$"#).unwrap(),       // 88
        Regex::new(r#"(?i)\A(.+)is$"#).unwrap(),        // 89
        Regex::new(r#"(?i)\A(.+)ees$"#).unwrap(),       // 90
        Regex::new(r#"(?i)\A(.+)yes$"#).unwrap(),       // 91
        Regex::new(r#"(?i)\A(.+[au])es$"#).unwrap(),    // 92
        Regex::new(r#"(?i)\A(.+[^b])is$"#).unwrap(),    // 93
        Regex::new(r#"(?i)\A(.+)ies$"#).unwrap(),       // 94
        Regex::new(r#"(?i)\A(.+)ys$"#).unwrap(),        // 95
        Regex::new(r#"(?i)\A(.+[^e])es$"#).unwrap(),    // 96
        Regex::new(r#"(?i)\A(.+)ers$"#).unwrap(),       // 97
        Regex::new(r#"(?i)\A(.+[^s])s$"#).unwrap(),     // 98
    ]
});

/// Converts a verb to its modern plural form. Whenever possible, this
/// function returns static data or a reference to the string it was given,
/// rather than allocating a new `String`.
///
/// The case of the returned word will not necessarily match the case of the
/// original word, and when given shout case like "EAT" you may get odd casing
/// results like "EATs". You are encouraged to always pass words in their
/// poroper case, either lower case or title case as appropriate.
pub fn convert_to_plural(word: &str) -> Cow<'_, str> {
    #[cfg(feature = "debug")]
    println!("convert_to_plural({})", word);

    if word.is_empty() {
        #[cfg(feature = "debug")]
        println!("  word is empty");
        return Cow::Borrowed("");
    }

    if let Some(p) = PLURAL_OF.get(word) {
        #[cfg(feature = "debug")]
        println!("  found word '{}' in PLURAL_OF", word);
        return Cow::Borrowed(p);
    }
    if let Some(p) = PLURAL_OF.get(word.to_lowercase().as_str()) {
        #[cfg(feature = "debug")]
        println!("  found lc word '{}' in PLURAL_OF", word);
        return Cow::Borrowed(p);
    }
    if word.len() > 1 {
        let tc_word = to_titlecase(word);
        if let Some(p) = PLURAL_OF.get(tc_word.as_str()) {
            #[cfg(feature = "debug")]
            println!("  found tc word '{}' in PLURAL_OF", word);
            return Cow::Borrowed(p);
        }
    }

    // (?i)\A(.*)bears$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[0].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}bear"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 0) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[0], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)bids$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[1].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}bid"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 1) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[1], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)buys$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[2].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}buy"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 2) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[2], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)casts$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[3].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}cast"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 3) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[3], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)clads$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[4].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}clad"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 4) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[4], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)cuts$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[5].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}cut"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 5) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[5], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)does$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[6].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}do"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 6) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[6], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)draws$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[7].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}draw"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 7) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[7], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)feeds$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[8].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}feed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 8) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[8], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)freezes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[9].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}freeze"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 9) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[9], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)grows$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[10].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}grow"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 10) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[10], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)hangs$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[11].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}hang"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 11) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[11], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)shears$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[12].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}shear"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 12) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[12], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)hears$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[13].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}hear"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 13) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[13], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)hides$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[14].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}hide"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 14) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[14], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)inputs$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[15].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}input"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 15) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[15], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)knits$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[16].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}knit"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 16) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[16], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)lends$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[17].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}lend"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 17) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[17], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)lets$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[18].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}let"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 18) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[18], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)lights$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[19].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}light"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 19) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[19], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)makes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[20].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}make"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 20) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[20], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)mows$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[21].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}mow"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 21) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[21], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)pays$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[22].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}pay"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 22) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[22], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)reads$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[23].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}read"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 23) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[23], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)says$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[24].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}say"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 24) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[24], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)sees$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[25].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}see"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 25) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[25], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)sells$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[26].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}sell"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 26) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[26], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)sends$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[27].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}send"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 27) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[27], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)sets$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[28].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}set"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 28) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[28], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)sews$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[29].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}sew"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 29) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[29], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)shines$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[30].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}shine"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 30) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[30], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)shoots$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[31].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}shoot"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 31) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[31], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)shuts$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[32].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}shut"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 32) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[32], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)sleeps$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[33].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}sleep"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 33) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[33], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)slings$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[34].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}sling"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 34) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[34], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)spins$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[35].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}spin"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 35) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[35], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)splits$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[36].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}split"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 36) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[36], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)spreads$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[37].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}spread"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 37) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[37], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)sticks$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[38].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}stick"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 38) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[38], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)strikes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[39].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}strike"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 39) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[39], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)strings$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[40].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}string"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 40) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[40], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)takes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[41].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}take"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 41) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[41], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)teaches$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[42].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}teach"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 42) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[42], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)tells$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[43].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}tell"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 43) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[43], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)thinks$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[44].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}think"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 44) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[44], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)throws$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[45].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}throw"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 45) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[45], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)tries$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[46].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}try"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 46) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[46], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)weaves$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[47].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}weave"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 47) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[47], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)weds$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[48].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}wed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 48) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[48], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)wets$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[49].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}wet"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 49) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[49], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)winds$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[50].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}wind"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 50) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[50], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)writes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[51].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}write"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 51) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[51], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)adds$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[52].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}add"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 52) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[52], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)alights$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[53].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}alight"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 53) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[53], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)allows$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[54].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}allow"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 54) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[54], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)appears$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[55].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}appear"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 55) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[55], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)believes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[56].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}believe"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 56) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[56], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)calls$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[57].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}call"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 57) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[57], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)clothes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[58].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}clothe"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 58) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[58], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)considers$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[59].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}consider"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 59) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[59], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)creates$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[60].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}create"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 60) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[60], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)fits$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[61].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}fit"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 61) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[61], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)includes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[62].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}include"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 62) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[62], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)melts$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[63].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}melt"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 63) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[63], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)offers$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[64].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}offer"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 64) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[64], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)opens$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[65].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}open"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 65) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[65], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)plays$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[66].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}play"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 66) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[66], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)serves$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[67].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}serve"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 67) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[67], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)smells$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[68].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}smell"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 68) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[68], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)spells$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[69].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}spell"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 69) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[69], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)spills$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[70].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}spill"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 70) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[70], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)starts$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[71].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}start"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 71) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[71], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)turns$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[72].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}turn"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 72) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[72], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)uses$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[73].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}use"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 73) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[73], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)works$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[74].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}work"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 74) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[74], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)n't$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[75].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}n't"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 75) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[75], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+[aeiou])ys$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[76].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}y"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 76) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[76], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+[aiy])nxes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[77].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}nx"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 77) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[77], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)ceps$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[78].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ceps"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 78) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[78], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+[cs])hes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[79].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}h"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 79) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[79], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)oes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[80].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}oe"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 80) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[80], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)ieus$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[81].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ieu"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 81) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[81], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)eaus$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[82].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}eau"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 82) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[82], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)sses$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[83].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ss"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 83) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[83], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)trixes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[84].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}trix"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 84) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[84], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)xes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[85].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}x"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 85) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[85], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)zzes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[86].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}zz"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 86) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[86], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)zes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[87].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ze"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 87) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[87], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)ues$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[88].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ue"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 88) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[88], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)is$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[89].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}i"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 89) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[89], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)ees$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[90].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ee"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 90) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[90], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)yes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[91].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ye"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 91) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[91], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+[au])es$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[92].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}e"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 92) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[92], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+[^b])is$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[93].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}i"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 93) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[93], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)ies$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[94].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}y"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 94) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[94], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)ys$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[95].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}y"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 95) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[95], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+[^e])es$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[96].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}e"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 96) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[96], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)ers$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[97].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}er"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 97) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[97], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+[^s])s$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[98].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 98) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[98], new_word
        );
        return Cow::Owned(new_word);
    }

    if is_plural(word) {
        #[cfg(feature = "debug")]
        println!("  word '{}' is already plural", word);
        return Cow::Borrowed(word);
    }

    #[cfg(feature = "debug")]
    println!("  word '{}' does not have a conversion to plural", word);
    Cow::Borrowed("_")
}

static SINGULAR_OF: Lazy<HashMap<&'static str, &'static str>> = Lazy::new(|| {
    [
        ("abide", "abides"),
        ("ache", "aches"),
        ("are", "am"),
        ("arise", "arises"),
        ("ask", "asks"),
        ("avalanche", "avalanches"),
        ("awake", "awakes"),
        ("beat", "beats"),
        ("become", "becomes"),
        ("beget", "begets"),
        ("begin", "begins"),
        ("behold", "beholds"),
        ("bellyache", "bellyaches"),
        ("bend", "bends"),
        ("bet", "bets"),
        ("bind", "binds"),
        ("bite", "bites"),
        ("bleed", "bleeds"),
        ("blitz", "blitzes"),
        ("blow", "blows"),
        ("break", "breaks"),
        ("breed", "breeds"),
        ("bring", "brings"),
        ("build", "builds"),
        ("burn", "burns"),
        ("burst", "bursts"),
        ("bust", "busts"),
        ("cache", "caches"),
        ("can", "can"),
        ("catch", "catches"),
        ("change", "changes"),
        ("choose", "chooses"),
        ("clap", "claps"),
        ("cling", "clings"),
        ("come", "comes"),
        ("continue", "continues"),
        ("cost", "costs"),
        ("could", "could"),
        ("creche", "creches"),
        ("creep", "creeps"),
        ("dare", "dares"),
        ("deal", "deals"),
        ("die", "dies"),
        ("dig", "digs"),
        ("dive", "dives"),
        ("douche", "douches"),
        ("drag", "drags"),
        ("dream", "dreams"),
        ("drink", "drinks"),
        ("drive", "drives"),
        ("dwell", "dwells"),
        ("eat", "eats"),
        ("expect", "expects"),
        ("fall", "falls"),
        ("feel", "feels"),
        ("fight", "fights"),
        ("find", "finds"),
        ("flee", "flees"),
        ("fling", "flings"),
        ("fly", "flies"),
        ("follow", "follows"),
        ("forbid", "forbids"),
        ("foresee", "foresees"),
        ("foretell", "foretells"),
        ("forget", "forgets"),
        ("forgive", "forgives"),
        ("forsake", "forsakes"),
        ("get", "gets"),
        ("gild", "gilds"),
        ("give", "gives"),
        ("go", "goes"),
        ("grind", "grinds"),
        ("happen", "happens"),
        ("have", "has"),
        ("help", "helps"),
        ("hew", "hews"),
        ("hit", "hits"),
        ("hold", "holds"),
        ("hurt", "hurts"),
        ("inlay", "inlays"),
        ("insist", "insists"),
        ("interlay", "interlays"),
        ("iris", "irises"),
        ("keep", "keeps"),
        ("kill", "kills"),
        ("kneel", "kneels"),
        ("knit", "knits"),
        ("know", "knows"),
        ("lay", "lays"),
        ("lead", "leads"),
        ("lean", "leans"),
        ("leap", "leaps"),
        ("learn", "learns"),
        ("leave", "leaves"),
        ("lie", "lies"),
        ("like", "likes"),
        ("live", "lives"),
        ("look", "looks"),
        ("lose", "loses"),
        ("love", "loves"),
        ("may", "may"),
        ("mean", "means"),
        ("meet", "meets"),
        ("menu", "menus"),
        ("might", "might"),
        ("mislead", "misleads"),
        ("mistake", "mistakes"),
        ("misunderstand", "misunderstands"),
        ("move", "moves"),
        ("must", "must"),
        ("need", "needs"),
        ("niche", "niches"),
        ("ought", "ought"),
        ("overdraw", "overdraws"),
        ("overhear", "overhears"),
        ("overtake", "overtakes"),
        ("preset", "presets"),
        ("prove", "proves"),
        ("provide", "provides"),
        ("psyche", "psyches"),
        ("put", "puts"),
        ("quit", "quits"),
        ("quiz", "quizzes"),
        ("reach", "reaches"),
        ("remain", "remains"),
        ("remember", "remembers"),
        ("rend", "rends"),
        ("rid", "rids"),
        ("ride", "rides"),
        ("ring", "rings"),
        ("rise", "rises"),
        ("rive", "rives"),
        ("run", "runs"),
        ("saw", "saws"),
        ("seek", "seeks"),
        ("seem", "seems"),
        ("shake", "shakes"),
        ("shall", "shall"),
        ("shave", "shaves"),
        ("shed", "sheds"),
        ("shit", "shits"),
        ("shoe", "shoes"),
        ("should", "should"),
        ("show", "shows"),
        ("shrink", "shrinks"),
        ("sing", "sings"),
        ("sink", "sinks"),
        ("sit", "sits"),
        ("ski", "skis"),
        ("slay", "slays"),
        ("slide", "slides"),
        ("slink", "slinks"),
        ("slit", "slits"),
        ("smell", "smells"),
        ("smite", "smites"),
        ("sneak", "sneaks"),
        ("sow", "sows"),
        ("speak", "speaks"),
        ("speed", "speeds"),
        ("spend", "spends"),
        ("spit", "spits"),
        ("spoil", "spoils"),
        ("spring", "springs"),
        ("stand", "stands"),
        ("stave", "staves"),
        ("stay", "stays"),
        ("steal", "steals"),
        ("sting", "stings"),
        ("stink", "stinks"),
        ("stop", "stops"),
        ("strew", "strews"),
        ("stride", "strides"),
        ("strip", "strips"),
        ("strive", "strives"),
        ("sublet", "sublets"),
        ("sunburn", "sunburns"),
        ("swear", "swears"),
        ("sweat", "sweats"),
        ("sweep", "sweeps"),
        ("swell", "swells"),
        ("swim", "swims"),
        ("swing", "swings"),
        ("talk", "talks"),
        ("tear", "tears"),
        ("thrive", "thrives"),
        ("thrust", "thrusts"),
        ("tread", "treads"),
        ("undergo", "undergoes"),
        ("understand", "understands"),
        ("undertake", "undertakes"),
        ("upset", "upsets"),
        ("vex", "vexes"),
        ("wait", "waits"),
        ("wake", "wakes"),
        ("walk", "walks"),
        ("want", "wants"),
        ("watch", "watches"),
        ("wear", "wears"),
        ("weep", "weeps"),
        ("wend", "wends"),
        ("were", "was"),
        ("will", "will"),
        ("win", "wins"),
        ("withdraw", "withdraws"),
        ("withhold", "withholds"),
        ("withstand", "withstands"),
        ("would", "would"),
        ("wring", "wrings"),
    ]
    .iter()
    .cloned()
    .collect()
});

static PLURAL_RECOGNIZER_REGEXES: Lazy<Vec<Regex>> = Lazy::new(|| {
    vec![
        Regex::new(r#"(?i)\A(.*)bear$"#).unwrap(),     // 0
        Regex::new(r#"(?i)\A(.*)bid$"#).unwrap(),      // 1
        Regex::new(r#"(?i)\A(.*)buy$"#).unwrap(),      // 2
        Regex::new(r#"(?i)\A(.*)cast$"#).unwrap(),     // 3
        Regex::new(r#"(?i)\A(.*)clad$"#).unwrap(),     // 4
        Regex::new(r#"(?i)\A(.*)cut$"#).unwrap(),      // 5
        Regex::new(r#"(?i)\A(.*)do$"#).unwrap(),       // 6
        Regex::new(r#"(?i)\A(.*)draw$"#).unwrap(),     // 7
        Regex::new(r#"(?i)\A(.*)feed$"#).unwrap(),     // 8
        Regex::new(r#"(?i)\A(.*)freeze$"#).unwrap(),   // 9
        Regex::new(r#"(?i)\A(.*)grow$"#).unwrap(),     // 10
        Regex::new(r#"(?i)\A(.*)hang$"#).unwrap(),     // 11
        Regex::new(r#"(?i)\A(.*)shear$"#).unwrap(),    // 12
        Regex::new(r#"(?i)\A(.*)hear$"#).unwrap(),     // 13
        Regex::new(r#"(?i)\A(.*)hide$"#).unwrap(),     // 14
        Regex::new(r#"(?i)\A(.*)input$"#).unwrap(),    // 15
        Regex::new(r#"(?i)\A(.*)knit$"#).unwrap(),     // 16
        Regex::new(r#"(?i)\A(.*)lend$"#).unwrap(),     // 17
        Regex::new(r#"(?i)\A(.*)let$"#).unwrap(),      // 18
        Regex::new(r#"(?i)\A(.*)light$"#).unwrap(),    // 19
        Regex::new(r#"(?i)\A(.*)make$"#).unwrap(),     // 20
        Regex::new(r#"(?i)\A(.*)mow$"#).unwrap(),      // 21
        Regex::new(r#"(?i)\A(.*)pay$"#).unwrap(),      // 22
        Regex::new(r#"(?i)\A(.*)read$"#).unwrap(),     // 23
        Regex::new(r#"(?i)\A(.*)say$"#).unwrap(),      // 24
        Regex::new(r#"(?i)\A(.*)see$"#).unwrap(),      // 25
        Regex::new(r#"(?i)\A(.*)sell$"#).unwrap(),     // 26
        Regex::new(r#"(?i)\A(.*)send$"#).unwrap(),     // 27
        Regex::new(r#"(?i)\A(.*)set$"#).unwrap(),      // 28
        Regex::new(r#"(?i)\A(.*)sew$"#).unwrap(),      // 29
        Regex::new(r#"(?i)\A(.*)shine$"#).unwrap(),    // 30
        Regex::new(r#"(?i)\A(.*)shoot$"#).unwrap(),    // 31
        Regex::new(r#"(?i)\A(.*)shut$"#).unwrap(),     // 32
        Regex::new(r#"(?i)\A(.*)sleep$"#).unwrap(),    // 33
        Regex::new(r#"(?i)\A(.*)sling$"#).unwrap(),    // 34
        Regex::new(r#"(?i)\A(.*)spin$"#).unwrap(),     // 35
        Regex::new(r#"(?i)\A(.*)split$"#).unwrap(),    // 36
        Regex::new(r#"(?i)\A(.*)spread$"#).unwrap(),   // 37
        Regex::new(r#"(?i)\A(.*)stick$"#).unwrap(),    // 38
        Regex::new(r#"(?i)\A(.*)strike$"#).unwrap(),   // 39
        Regex::new(r#"(?i)\A(.*)string$"#).unwrap(),   // 40
        Regex::new(r#"(?i)\A(.*)take$"#).unwrap(),     // 41
        Regex::new(r#"(?i)\A(.*)teach$"#).unwrap(),    // 42
        Regex::new(r#"(?i)\A(.*)tell$"#).unwrap(),     // 43
        Regex::new(r#"(?i)\A(.*)think$"#).unwrap(),    // 44
        Regex::new(r#"(?i)\A(.*)throw$"#).unwrap(),    // 45
        Regex::new(r#"(?i)\A(.*)try$"#).unwrap(),      // 46
        Regex::new(r#"(?i)\A(.*)weave$"#).unwrap(),    // 47
        Regex::new(r#"(?i)\A(.*)wed$"#).unwrap(),      // 48
        Regex::new(r#"(?i)\A(.*)wet$"#).unwrap(),      // 49
        Regex::new(r#"(?i)\A(.*)wind$"#).unwrap(),     // 50
        Regex::new(r#"(?i)\A(.*)write$"#).unwrap(),    // 51
        Regex::new(r#"(?i)\A(.*)add$"#).unwrap(),      // 52
        Regex::new(r#"(?i)\A(.*)alight$"#).unwrap(),   // 53
        Regex::new(r#"(?i)\A(.*)allow$"#).unwrap(),    // 54
        Regex::new(r#"(?i)\A(.*)appear$"#).unwrap(),   // 55
        Regex::new(r#"(?i)\A(.*)believe$"#).unwrap(),  // 56
        Regex::new(r#"(?i)\A(.*)call$"#).unwrap(),     // 57
        Regex::new(r#"(?i)\A(.*)clothe$"#).unwrap(),   // 58
        Regex::new(r#"(?i)\A(.*)consider$"#).unwrap(), // 59
        Regex::new(r#"(?i)\A(.*)create$"#).unwrap(),   // 60
        Regex::new(r#"(?i)\A(.*)fit$"#).unwrap(),      // 61
        Regex::new(r#"(?i)\A(.*)include$"#).unwrap(),  // 62
        Regex::new(r#"(?i)\A(.*)melt$"#).unwrap(),     // 63
        Regex::new(r#"(?i)\A(.*)offer$"#).unwrap(),    // 64
        Regex::new(r#"(?i)\A(.*)open$"#).unwrap(),     // 65
        Regex::new(r#"(?i)\A(.*)play$"#).unwrap(),     // 66
        Regex::new(r#"(?i)\A(.*)serve$"#).unwrap(),    // 67
        Regex::new(r#"(?i)\A(.*)smell$"#).unwrap(),    // 68
        Regex::new(r#"(?i)\A(.*)spell$"#).unwrap(),    // 69
        Regex::new(r#"(?i)\A(.*)spill$"#).unwrap(),    // 70
        Regex::new(r#"(?i)\A(.*)start$"#).unwrap(),    // 71
        Regex::new(r#"(?i)\A(.*)turn$"#).unwrap(),     // 72
        Regex::new(r#"(?i)\A(.*)use$"#).unwrap(),      // 73
        Regex::new(r#"(?i)\A(.*)work$"#).unwrap(),     // 74
        Regex::new(r#"(?i)\A(.+)n't$"#).unwrap(),      // 75
        Regex::new(r#"(?i)\A(.+[aeiou])y$"#).unwrap(), // 76
        Regex::new(r#"(?i)\A(.+[aiy])nx$"#).unwrap(),  // 77
        Regex::new(r#"(?i)\A(.+)ceps$"#).unwrap(),     // 78
        Regex::new(r#"(?i)\A(.+[cs])h$"#).unwrap(),    // 79
        Regex::new(r#"(?i)\A(.+)oe$"#).unwrap(),       // 80
        Regex::new(r#"(?i)\A(.+)ieu$"#).unwrap(),      // 81
        Regex::new(r#"(?i)\A(.+)eau$"#).unwrap(),      // 82
        Regex::new(r#"(?i)\A(.+)ss$"#).unwrap(),       // 83
        Regex::new(r#"(?i)\A(.+)trix$"#).unwrap(),     // 84
        Regex::new(r#"(?i)\A(.+)x$"#).unwrap(),        // 85
        Regex::new(r#"(?i)\A(.+)zz$"#).unwrap(),       // 86
        Regex::new(r#"(?i)\A(.+)ze$"#).unwrap(),       // 87
        Regex::new(r#"(?i)\A(.+)ue$"#).unwrap(),       // 88
        Regex::new(r#"(?i)\A(.+)i$"#).unwrap(),        // 89
        Regex::new(r#"(?i)\A(.+)ee$"#).unwrap(),       // 90
        Regex::new(r#"(?i)\A(.+)ye$"#).unwrap(),       // 91
        Regex::new(r#"(?i)\A(.+[au])e$"#).unwrap(),    // 92
        Regex::new(r#"(?i)\A(.+[^b])i$"#).unwrap(),    // 93
        Regex::new(r#"(?i)\A(.+)y$"#).unwrap(),        // 94
        Regex::new(r#"(?i)\A(.+)y$"#).unwrap(),        // 95
        Regex::new(r#"(?i)\A(.+[^e])e$"#).unwrap(),    // 96
        Regex::new(r#"(?i)\A(.+)er$"#).unwrap(),       // 97
        Regex::new(r#"(?i)\A(.+[^s])$"#).unwrap(),     // 98
    ]
});

/// Converts a verb to its singular form. Whenever possible, this function
/// returns static data or a reference to the string it was given, rather than
/// allocating a new `String`.
///
/// The case of the returned word will not necessarily match the case of the
/// original word, and when given shout case like "EAT" you may get odd casing
/// results like "EATs". You are encouraged to always pass words in their
/// poroper case, either lower case or title case as appropriate.
pub fn convert_to_singular(word: &str) -> Cow<'_, str> {
    #[cfg(feature = "debug")]
    println!("convert_to_singular");

    if word.is_empty() {
        #[cfg(feature = "debug")]
        println!("  word is empty");
        return Cow::Borrowed("");
    }

    if let Some(s) = SINGULAR_OF.get(word) {
        #[cfg(feature = "debug")]
        println!("  found word '{}' in SINGULAR_OF", word);
        return Cow::Borrowed(s);
    }
    if let Some(s) = SINGULAR_OF.get(word.to_lowercase().as_str()) {
        #[cfg(feature = "debug")]
        println!("  found lc word '{}' in SINGULAR_OF", word);
        return Cow::Borrowed(s);
    }
    if word.len() > 1 {
        let tc_word = to_titlecase(word);
        if let Some(p) = SINGULAR_OF.get(tc_word.as_str()) {
            #[cfg(feature = "debug")]
            println!("  found tc word '{}' in SINGULAR_OF", word);
            return Cow::Borrowed(p);
        }
    }

    // (?i)\A(.*)bear$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[0].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}bears"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 0) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[0], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)bid$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[1].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}bids"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 1) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[1], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)buy$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[2].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}buys"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 2) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[2], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)cast$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[3].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}casts"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 3) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[3], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)clad$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[4].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}clads"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 4) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[4], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)cut$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[5].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}cuts"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 5) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[5], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)do$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[6].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}does"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 6) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[6], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)draw$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[7].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}draws"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 7) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[7], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)feed$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[8].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}feeds"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 8) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[8], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)freeze$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[9].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}freezes"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 9) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[9], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)grow$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[10].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}grows"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 10) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[10], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)hang$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[11].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}hangs"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 11) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[11], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)shear$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[12].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}shears"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 12) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[12], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)hear$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[13].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}hears"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 13) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[13], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)hide$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[14].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}hides"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 14) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[14], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)input$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[15].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}inputs"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 15) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[15], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)knit$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[16].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}knits"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 16) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[16], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)lend$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[17].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}lends"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 17) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[17], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)let$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[18].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}lets"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 18) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[18], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)light$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[19].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}lights"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 19) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[19], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)make$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[20].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}makes"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 20) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[20], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)mow$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[21].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}mows"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 21) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[21], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)pay$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[22].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}pays"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 22) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[22], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)read$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[23].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}reads"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 23) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[23], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)say$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[24].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}says"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 24) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[24], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)see$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[25].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}sees"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 25) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[25], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)sell$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[26].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}sells"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 26) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[26], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)send$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[27].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}sends"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 27) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[27], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)set$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[28].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}sets"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 28) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[28], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)sew$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[29].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}sews"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 29) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[29], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)shine$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[30].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}shines"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 30) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[30], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)shoot$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[31].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}shoots"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 31) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[31], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)shut$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[32].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}shuts"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 32) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[32], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)sleep$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[33].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}sleeps"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 33) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[33], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)sling$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[34].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}slings"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 34) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[34], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)spin$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[35].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}spins"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 35) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[35], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)split$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[36].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}splits"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 36) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[36], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)spread$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[37].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}spreads"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 37) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[37], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)stick$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[38].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}sticks"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 38) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[38], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)strike$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[39].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}strikes"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 39) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[39], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)string$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[40].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}strings"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 40) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[40], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)take$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[41].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}takes"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 41) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[41], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)teach$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[42].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}teaches"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 42) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[42], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)tell$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[43].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}tells"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 43) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[43], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)think$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[44].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}thinks"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 44) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[44], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)throw$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[45].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}throws"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 45) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[45], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)try$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[46].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}tries"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 46) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[46], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)weave$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[47].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}weaves"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 47) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[47], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)wed$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[48].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}weds"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 48) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[48], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)wet$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[49].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}wets"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 49) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[49], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)wind$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[50].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}winds"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 50) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[50], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)write$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[51].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}writes"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 51) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[51], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)add$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[52].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}adds"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 52) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[52], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)alight$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[53].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}alights"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 53) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[53], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)allow$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[54].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}allows"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 54) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[54], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)appear$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[55].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}appears"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 55) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[55], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)believe$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[56].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}believes"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 56) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[56], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)call$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[57].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}calls"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 57) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[57], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)clothe$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[58].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}clothes"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 58) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[58], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)consider$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[59].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}considers"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 59) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[59], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)create$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[60].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}creates"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 60) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[60], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)fit$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[61].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}fits"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 61) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[61], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)include$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[62].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}includes"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 62) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[62], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)melt$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[63].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}melts"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 63) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[63], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)offer$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[64].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}offers"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 64) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[64], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)open$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[65].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}opens"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 65) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[65], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)play$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[66].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}plays"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 66) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[66], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)serve$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[67].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}serves"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 67) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[67], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)smell$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[68].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}smells"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 68) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[68], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)spell$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[69].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}spells"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 69) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[69], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)spill$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[70].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}spills"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 70) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[70], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)start$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[71].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}starts"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 71) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[71], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)turn$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[72].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}turns"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 72) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[72], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)use$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[73].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}uses"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 73) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[73], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.*)work$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[74].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}works"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 74) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[74], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)n't$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[75].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}n't"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 75) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[75], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+[aeiou])y$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[76].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ys"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 76) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[76], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+[aiy])nx$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[77].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}nxes"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 77) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[77], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)ceps$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[78].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ceps"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 78) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[78], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+[cs])h$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[79].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}hes"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 79) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[79], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)oe$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[80].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}oes"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 80) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[80], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)ieu$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[81].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ieus"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 81) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[81], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)eau$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[82].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}eaus"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 82) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[82], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)ss$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[83].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}sses"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 83) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[83], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)trix$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[84].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}trixes"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 84) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[84], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)x$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[85].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}xes"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 85) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[85], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)zz$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[86].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}zzes"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 86) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[86], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)ze$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[87].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}zes"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 87) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[87], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)ue$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[88].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ues"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 88) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[88], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)i$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[89].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}is"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 89) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[89], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)ee$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[90].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ees"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 90) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[90], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)ye$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[91].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}yes"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 91) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[91], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+[au])e$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[92].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}es"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 92) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[92], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+[^b])i$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[93].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}is"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 93) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[93], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)y$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[94].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ies"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 94) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[94], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)y$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[95].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ys"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 95) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[95], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+[^e])e$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[96].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}es"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 96) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[96], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+)er$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[97].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ers"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 97) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[97], new_word
        );
        return Cow::Owned(new_word);
    }
    // (?i)\A(.+[^s])$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[98].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}s"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 98) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[98], new_word
        );
        return Cow::Owned(new_word);
    }

    if is_singular(word) {
        #[cfg(feature = "debug")]
        println!("  word '{}' is already singular", word);
        return Cow::Borrowed(word);
    }

    #[cfg(feature = "debug")]
    println!("  word '{}' does not have a conversion to singular", word);
    Cow::Borrowed(word)
}

static PAST_OF: Lazy<HashMap<&'static str, &'static str>> = Lazy::new(|| {
    [
        ("abide", "abided"),
        ("abided", "abided"),
        ("abides", "abided"),
        ("abiding", "abided"),
        ("ache", "ached"),
        ("ached", "ached"),
        ("aches", "ached"),
        ("aching", "ached"),
        ("am", "was"),
        ("are", "were"),
        ("arise", "arose"),
        ("arisen", "arose"),
        ("arises", "arose"),
        ("arising", "arose"),
        ("ask", "asked"),
        ("asked", "asked"),
        ("asking", "asked"),
        ("asks", "asked"),
        ("avalanche", "avalanched"),
        ("avalanched", "avalanched"),
        ("avalanches", "avalanched"),
        ("avalanching", "avalanched"),
        ("awake", "awoke"),
        ("awakening", "awoke"),
        ("awakes", "awoke"),
        ("awoken", "awoke"),
        ("beat", "beat"),
        ("beaten", "beat"),
        ("beating", "beat"),
        ("beats", "beat"),
        ("become", "became"),
        ("becomes", "became"),
        ("becoming", "became"),
        ("been", "was"),
        ("beget", "begot"),
        ("begets", "begot"),
        ("begetting", "begot"),
        ("begin", "began"),
        ("beginning", "began"),
        ("begins", "began"),
        ("begotten", "begot"),
        ("begun", "began"),
        ("beheld", "beheld"),
        ("behold", "beheld"),
        ("beholding", "beheld"),
        ("beholds", "beheld"),
        ("being", "was"),
        ("bellyache", "bellyached"),
        ("bellyached", "bellyached"),
        ("bellyaches", "bellyached"),
        ("bellyaching", "bellyached"),
        ("bend", "bent"),
        ("bending", "bent"),
        ("bends", "bent"),
        ("bent", "bent"),
        ("bet", "bet"),
        ("bets", "bet"),
        ("betting", "bet"),
        ("bind", "bound"),
        ("binding", "bound"),
        ("binds", "bound"),
        ("bite", "bit"),
        ("bites", "bit"),
        ("biting", "bit"),
        ("bitten", "bit"),
        ("bled", "bled"),
        ("bleed", "bled"),
        ("bleeding", "bled"),
        ("bleeds", "bled"),
        ("blitz", "blitzed"),
        ("blitzed", "blitzed"),
        ("blitzes", "blitzed"),
        ("blitzing", "blitzed"),
        ("blow", "blew"),
        ("blowing", "blew"),
        ("blown", "blew"),
        ("blows", "blew"),
        ("bound", "bound"),
        ("break", "broke"),
        ("breaking", "broke"),
        ("breaks", "broke"),
        ("bred", "bred"),
        ("breed", "bred"),
        ("breeding", "bred"),
        ("breeds", "bred"),
        ("bring", "brought"),
        ("bringing", "brought"),
        ("brings", "brought"),
        ("broken", "broke"),
        ("brought", "brought"),
        ("build", "built"),
        ("building", "built"),
        ("builds", "built"),
        ("built", "built"),
        ("burn", "burnt"),
        ("burning", "burnt"),
        ("burns", "burnt"),
        ("burnt", "burnt"),
        ("burst", "burst"),
        ("bursting", "burst"),
        ("bursts", "burst"),
        ("bust", "bust"),
        ("busting", "bust"),
        ("busts", "bust"),
        ("cache", "cached"),
        ("cached", "cached"),
        ("caches", "cached"),
        ("caching", "cached"),
        ("can", "could"),
        ("catch", "caught"),
        ("catches", "caught"),
        ("catching", "caught"),
        ("caught", "caught"),
        ("change", "changed"),
        ("changed", "changed"),
        ("changes", "changed"),
        ("changing", "changed"),
        ("choose", "chose"),
        ("chooses", "chose"),
        ("choosing", "chose"),
        ("chosen", "chose"),
        ("clap", "clapped"),
        ("clapped", "clapped"),
        ("clapping", "clapped"),
        ("claps", "clapped"),
        ("cling", "clung"),
        ("clinging", "clung"),
        ("clings", "clung"),
        ("clung", "clung"),
        ("come", "came"),
        ("comes", "came"),
        ("coming", "came"),
        ("continue", "continued"),
        ("continued", "continued"),
        ("continues", "continued"),
        ("continuing", "continued"),
        ("cost", "cost"),
        ("costing", "cost"),
        ("costs", "cost"),
        ("creche", "creched"),
        ("creched", "creched"),
        ("creches", "creched"),
        ("creching", "creched"),
        ("creep", "crept"),
        ("creeping", "crept"),
        ("creeps", "crept"),
        ("crept", "crept"),
        ("dare", "dared"),
        ("dared", "dared"),
        ("dares", "dared"),
        ("daring", "dared"),
        ("deal", "dealt"),
        ("dealing", "dealt"),
        ("deals", "dealt"),
        ("dealt", "dealt"),
        ("die", "died"),
        ("died", "died"),
        ("dies", "died"),
        ("dig", "dug"),
        ("digging", "dug"),
        ("digs", "dug"),
        ("dive", "dived"),
        ("dived", "dived"),
        ("dives", "dived"),
        ("diving", "dived"),
        ("douche", "douched"),
        ("douched", "douched"),
        ("douches", "douched"),
        ("douching", "douched"),
        ("drag", "dragged"),
        ("dragged", "dragged"),
        ("dragging", "dragged"),
        ("drags", "dragged"),
        ("dream", "dreamed"),
        ("dreamed", "dreamed"),
        ("dreaming", "dreamed"),
        ("dreams", "dreamed"),
        ("drink", "drank"),
        ("drinking", "drank"),
        ("drinks", "drank"),
        ("drive", "drove"),
        ("driven", "drove"),
        ("drives", "drove"),
        ("driving", "drove"),
        ("drunk", "drank"),
        ("dug", "dug"),
        ("dwell", "dwelt"),
        ("dwelling", "dwelt"),
        ("dwells", "dwelt"),
        ("dwelt", "dwelt"),
        ("dying", "died"),
        ("eat", "ate"),
        ("eaten", "ate"),
        ("eating", "ate"),
        ("eats", "ate"),
        ("expect", "expected"),
        ("expected", "expected"),
        ("expecting", "expected"),
        ("expects", "expected"),
        ("fall", "fell"),
        ("fallen", "fell"),
        ("falling", "fell"),
        ("falls", "fell"),
        ("feel", "felt"),
        ("feeling", "felt"),
        ("feels", "felt"),
        ("felt", "felt"),
        ("fight", "fought"),
        ("fighting", "fought"),
        ("fights", "fought"),
        ("find", "found"),
        ("finding", "found"),
        ("finds", "found"),
        ("fled", "fled"),
        ("flee", "fled"),
        ("fleeing", "fled"),
        ("flees", "fled"),
        ("flies", "flew"),
        ("fling", "flung"),
        ("flinging", "flung"),
        ("flings", "flung"),
        ("flown", "flew"),
        ("flung", "flung"),
        ("fly", "flew"),
        ("flying", "flew"),
        ("follow", "followed"),
        ("followed", "followed"),
        ("following", "followed"),
        ("follows", "followed"),
        ("forbid", "forbade"),
        ("forbidden", "forbade"),
        ("forbidding", "forbade"),
        ("forbids", "forbade"),
        ("foresee", "foresaw"),
        ("foreseeing", "foresaw"),
        ("foreseen", "foresaw"),
        ("foresees", "foresaw"),
        ("foretell", "foretold"),
        ("foretelling", "foretold"),
        ("foretells", "foretold"),
        ("foretold", "foretold"),
        ("forget", "forgot"),
        ("forgets", "forgot"),
        ("forgetting", "forgot"),
        ("forgive", "forgave"),
        ("forgiven", "forgave"),
        ("forgives", "forgave"),
        ("forgiving", "forgave"),
        ("forgotten", "forgot"),
        ("forsake", "forsook"),
        ("forsaken", "forsook"),
        ("forsakes", "forsook"),
        ("forsaking", "forsook"),
        ("fought", "fought"),
        ("found", "found"),
        ("get", "got"),
        ("gets", "got"),
        ("getting", "got"),
        ("gild", "gilded"),
        ("gilded", "gilded"),
        ("gilding", "gilded"),
        ("gilds", "gilded"),
        ("give", "gave"),
        ("given", "gave"),
        ("gives", "gave"),
        ("giving", "gave"),
        ("go", "went"),
        ("goes", "went"),
        ("going", "went"),
        ("gone", "went"),
        ("gotten", "got"),
        ("grind", "ground"),
        ("grinding", "ground"),
        ("grinds", "ground"),
        ("ground", "ground"),
        ("had", "had"),
        ("happen", "happened"),
        ("happened", "happened"),
        ("happening", "happened"),
        ("happens", "happened"),
        ("has", "had"),
        ("have", "had"),
        ("having", "had"),
        ("held", "held"),
        ("help", "helped"),
        ("helped", "helped"),
        ("helping", "helped"),
        ("helps", "helped"),
        ("hew", "hewed"),
        ("hewing", "hewed"),
        ("hewn", "hewed"),
        ("hews", "hewed"),
        ("hit", "hit"),
        ("hits", "hit"),
        ("hitting", "hit"),
        ("hold", "held"),
        ("holding", "held"),
        ("holds", "held"),
        ("hurt", "hurt"),
        ("hurting", "hurt"),
        ("hurts", "hurt"),
        ("inlaid", "inlaid"),
        ("inlay", "inlaid"),
        ("inlaying", "inlaid"),
        ("inlays", "inlaid"),
        ("insist", "insisted"),
        ("insisted", "insisted"),
        ("insisting", "insisted"),
        ("insists", "insisted"),
        ("interlaid", "interlaid"),
        ("interlay", "interlaid"),
        ("interlaying", "interlaid"),
        ("interlays", "interlaid"),
        ("iris", "irised"),
        ("irised", "irised"),
        ("irises", "irised"),
        ("irising", "irised"),
        ("is", "was"),
        ("keep", "kept"),
        ("keeping", "kept"),
        ("keeps", "kept"),
        ("kept", "kept"),
        ("kill", "killed"),
        ("killed", "killed"),
        ("killing", "killed"),
        ("kills", "killed"),
        ("kneel", "knelt"),
        ("kneeling", "knelt"),
        ("kneels", "knelt"),
        ("knelt", "knelt"),
        ("knit", "knitted"),
        ("knits", "knitted"),
        ("knitted", "knitted"),
        ("knitting", "knitted"),
        ("know", "knew"),
        ("knowing", "knew"),
        ("known", "knew"),
        ("knows", "knew"),
        ("laid", "laid"),
        ("lain", "lay"),
        ("lay", "laid"),
        ("laying", "laid"),
        ("lays", "laid"),
        ("lead", "led"),
        ("leading", "led"),
        ("leads", "led"),
        ("lean", "leaned"),
        ("leaned", "leaned"),
        ("leaning", "leaned"),
        ("leans", "leaned"),
        ("leap", "leapt"),
        ("leaping", "leapt"),
        ("leaps", "leapt"),
        ("leapt", "leapt"),
        ("learn", "learned"),
        ("learned", "learned"),
        ("learning", "learned"),
        ("learns", "learned"),
        ("leave", "left"),
        ("leaves", "left"),
        ("leaving", "left"),
        ("led", "led"),
        ("left", "left"),
        ("lie", "lay"),
        ("lies", "lay"),
        ("like", "liked"),
        ("liked", "liked"),
        ("likes", "liked"),
        ("liking", "liked"),
        ("live", "lived"),
        ("lived", "lived"),
        ("lives", "lived"),
        ("living", "lived"),
        ("look", "looked"),
        ("looked", "looked"),
        ("looking", "looked"),
        ("looks", "looked"),
        ("lose", "lost"),
        ("loses", "lost"),
        ("losing", "lost"),
        ("lost", "lost"),
        ("love", "loved"),
        ("loved", "loved"),
        ("loves", "loved"),
        ("loving", "loved"),
        ("lying", "lay"),
        ("may", "might"),
        ("mean", "meant"),
        ("meaning", "meant"),
        ("means", "meant"),
        ("meant", "meant"),
        ("meet", "met"),
        ("meeting", "met"),
        ("meets", "met"),
        ("menu", "menued"),
        ("menued", "menued"),
        ("menuing", "menued"),
        ("menus", "menued"),
        ("met", "met"),
        ("mislead", "misled"),
        ("misleading", "misled"),
        ("misleads", "misled"),
        ("misled", "misled"),
        ("mistake", "mistook"),
        ("mistaken", "mistook"),
        ("mistakes", "mistook"),
        ("mistaking", "mistook"),
        ("misunderstand", "misunderstood"),
        ("misunderstanding", "misunderstood"),
        ("misunderstands", "misunderstood"),
        ("misunderstood", "misunderstood"),
        ("move", "moved"),
        ("moved", "moved"),
        ("moves", "moved"),
        ("moving", "moved"),
        ("need", "needed"),
        ("needed", "needed"),
        ("needing", "needed"),
        ("needs", "needed"),
        ("niche", "niched"),
        ("niched", "niched"),
        ("nicheing", "niched"),
        ("niches", "niched"),
        ("overdraw", "overdrew"),
        ("overdrawing", "overdrew"),
        ("overdrawn", "overdrew"),
        ("overdraws", "overdrew"),
        ("overhear", "overheard"),
        ("overheard", "overheard"),
        ("overhearing", "overheard"),
        ("overhears", "overheard"),
        ("overtake", "overtook"),
        ("overtaken", "overtook"),
        ("overtakes", "overtook"),
        ("overtaking", "overtook"),
        ("preset", "preset"),
        ("presets", "preset"),
        ("presetting", "preset"),
        ("prove", "proved"),
        ("proved", "proved"),
        ("proven", "proved"),
        ("proves", "proved"),
        ("provide", "provided"),
        ("provided", "provided"),
        ("provides", "provided"),
        ("providing", "provided"),
        ("proving", "proved"),
        ("psyche", "psyched"),
        ("psyched", "psyched"),
        ("psyches", "psyched"),
        ("psyching", "psyched"),
        ("put", "put"),
        ("puts", "put"),
        ("putting", "put"),
        ("quit", "quit"),
        ("quits", "quit"),
        ("quitting", "quit"),
        ("quiz", "quizzed"),
        ("quizzed", "quizzed"),
        ("quizzes", "quizzed"),
        ("quizzing", "quizzed"),
        ("reach", "reached"),
        ("reached", "reached"),
        ("reaches", "reached"),
        ("reaching", "reached"),
        ("remain", "remained"),
        ("remained", "remained"),
        ("remaining", "remained"),
        ("remains", "remained"),
        ("remember", "remembered"),
        ("remembered", "remembered"),
        ("remembering", "remembered"),
        ("remembers", "remembered"),
        ("rend", "rent"),
        ("rending", "rent"),
        ("rends", "rent"),
        ("rent", "rent"),
        ("rid", "rid"),
        ("ridden", "rode"),
        ("ridding", "rid"),
        ("ride", "rode"),
        ("rides", "rode"),
        ("riding", "rode"),
        ("rids", "rid"),
        ("ring", "rang"),
        ("ringing", "rang"),
        ("rings", "rang"),
        ("rise", "rose"),
        ("risen", "rose"),
        ("rises", "rose"),
        ("rising", "rose"),
        ("rive", "rived"),
        ("riven", "rived"),
        ("rives", "rived"),
        ("riving", "rived"),
        ("run", "ran"),
        ("rung", "rang"),
        ("running", "ran"),
        ("runs", "ran"),
        ("sat", "sat"),
        ("saw", "sawed"),
        ("sawing", "sawed"),
        ("sawn", "sawed"),
        ("saws", "sawed"),
        ("seek", "sought"),
        ("seeking", "sought"),
        ("seeks", "sought"),
        ("seem", "seemed"),
        ("seemed", "seemed"),
        ("seeming", "seemed"),
        ("seems", "seemed"),
        ("shake", "shook"),
        ("shaken", "shook"),
        ("shakes", "shook"),
        ("shaking", "shook"),
        ("shall", "should"),
        ("shave", "shaved"),
        ("shaved", "shaved"),
        ("shaves", "shaved"),
        ("shaving", "shaved"),
        ("shed", "shed"),
        ("shedding", "shed"),
        ("sheds", "shed"),
        ("shit", "shat"),
        ("shits", "shat"),
        ("shitted", "shat"),
        ("shitting", "shat"),
        ("shod", "shod"),
        ("shoe", "shod"),
        ("shoeing", "shod"),
        ("shoes", "shod"),
        ("show", "showed"),
        ("showing", "showed"),
        ("shown", "showed"),
        ("shows", "showed"),
        ("shrink", "shrank"),
        ("shrinking", "shrank"),
        ("shrinks", "shrank"),
        ("shrunk", "shrank"),
        ("sing", "sang"),
        ("singing", "sang"),
        ("sings", "sang"),
        ("sink", "sank"),
        ("sinking", "sank"),
        ("sinks", "sank"),
        ("sit", "sat"),
        ("sits", "sat"),
        ("sitting", "sat"),
        ("ski", "skied"),
        ("skied", "skied"),
        ("skiing", "skied"),
        ("skis", "skied"),
        ("slain", "slew"),
        ("slay", "slew"),
        ("slaying", "slew"),
        ("slays", "slew"),
        ("slid", "slid"),
        ("slide", "slid"),
        ("slides", "slid"),
        ("sliding", "slid"),
        ("slink", "slunk"),
        ("slinking", "slunk"),
        ("slinks", "slunk"),
        ("slit", "slit"),
        ("slits", "slit"),
        ("slitting", "slit"),
        ("slunk", "slunk"),
        ("smell", "smelled"),
        ("smelled", "smelled"),
        ("smelling", "smelled"),
        ("smells", "smelled"),
        ("smite", "smote"),
        ("smites", "smote"),
        ("smiting", "smote"),
        ("smitten", "smote"),
        ("sneak", "sneaked"),
        ("sneaked", "sneaked"),
        ("sneaking", "sneaked"),
        ("sneaks", "sneaked"),
        ("sought", "sought"),
        ("sow", "sowed"),
        ("sowing", "sowed"),
        ("sown", "sowed"),
        ("sows", "sowed"),
        ("spat", "spat"),
        ("speak", "spoke"),
        ("speaking", "spoke"),
        ("speaks", "spoke"),
        ("sped", "sped"),
        ("speed", "sped"),
        ("speeding", "sped"),
        ("speeds", "sped"),
        ("spend", "spent"),
        ("spending", "spent"),
        ("spends", "spent"),
        ("spent", "spent"),
        ("spit", "spat"),
        ("spits", "spat"),
        ("spitting", "spat"),
        ("spoil", "spoilt"),
        ("spoiled", "spoilt"),
        ("spoiling", "spoilt"),
        ("spoils", "spoilt"),
        ("spoken", "spoke"),
        ("spring", "sprang"),
        ("springing", "sprang"),
        ("springs", "sprang"),
        ("sprung", "sprang"),
        ("stand", "stood"),
        ("standing", "stood"),
        ("stands", "stood"),
        ("stave", "staved"),
        ("staved", "staved"),
        ("staves", "staved"),
        ("staving", "staved"),
        ("stay", "stayed"),
        ("stayed", "stayed"),
        ("staying", "stayed"),
        ("stays", "stayed"),
        ("steal", "stole"),
        ("stealing", "stole"),
        ("steals", "stole"),
        ("sting", "stung"),
        ("stinging", "stung"),
        ("stings", "stung"),
        ("stink", "stank"),
        ("stinking", "stank"),
        ("stinks", "stank"),
        ("stolen", "stole"),
        ("stood", "stood"),
        ("stop", "stopped"),
        ("stopped", "stopped"),
        ("stopping", "stopped"),
        ("stops", "stopped"),
        ("strew", "strewed"),
        ("strewing", "strewed"),
        ("strewn", "strewed"),
        ("strews", "strewed"),
        ("stride", "strode"),
        ("strides", "strode"),
        ("striding", "strode"),
        ("strip", "stripped"),
        ("stripped", "stripped"),
        ("stripping", "stripped"),
        ("strips", "stripped"),
        ("strive", "strove"),
        ("strived", "strove"),
        ("strives", "strove"),
        ("striving", "strove"),
        ("strode", "strode"),
        ("stung", "stung"),
        ("stunk", "stank"),
        ("sublet", "sublet"),
        ("sublets", "sublet"),
        ("subletting", "sublet"),
        ("sunburn", "sunburned"),
        ("sunburned", "sunburned"),
        ("sunburning", "sunburned"),
        ("sunburns", "sunburned"),
        ("sung", "sang"),
        ("sunk", "sank"),
        ("swear", "swore"),
        ("swearing", "swore"),
        ("swears", "swore"),
        ("sweat", "sweat"),
        ("sweated", "sweat"),
        ("sweating", "sweat"),
        ("sweats", "sweat"),
        ("sweep", "swept"),
        ("sweeping", "swept"),
        ("sweeps", "swept"),
        ("swell", "swelled"),
        ("swelling", "swelled"),
        ("swells", "swelled"),
        ("swept", "swept"),
        ("swim", "swam"),
        ("swimming", "swam"),
        ("swims", "swam"),
        ("swing", "swung"),
        ("swinging", "swung"),
        ("swings", "swung"),
        ("swollen", "swelled"),
        ("sworn", "swore"),
        ("swum", "swam"),
        ("swung", "swung"),
        ("talk", "talked"),
        ("talked", "talked"),
        ("talking", "talked"),
        ("talks", "talked"),
        ("tear", "tore"),
        ("tearing", "tore"),
        ("tears", "tore"),
        ("thrive", "thrived"),
        ("thrived", "thrived"),
        ("thrives", "thrived"),
        ("thriving", "thrived"),
        ("thrust", "thrust"),
        ("thrusting", "thrust"),
        ("thrusts", "thrust"),
        ("torn", "tore"),
        ("tread", "trod"),
        ("treading", "trod"),
        ("treads", "trod"),
        ("trodden", "trod"),
        ("undergo", "underwent"),
        ("undergoes", "underwent"),
        ("undergoing", "underwent"),
        ("undergone", "underwent"),
        ("understand", "understood"),
        ("understanding", "understood"),
        ("understands", "understood"),
        ("understood", "understood"),
        ("undertake", "undertook"),
        ("undertaken", "undertook"),
        ("undertakes", "undertook"),
        ("undertaking", "undertook"),
        ("upset", "upset"),
        ("upsets", "upset"),
        ("upsetting", "upset"),
        ("vex", "vexed"),
        ("vexed", "vexed"),
        ("vexes", "vexed"),
        ("vexing", "vexed"),
        ("wait", "waited"),
        ("waited", "waited"),
        ("waiting", "waited"),
        ("waits", "waited"),
        ("wake", "woke"),
        ("wakes", "woke"),
        ("waking", "woke"),
        ("walk", "walked"),
        ("walked", "walked"),
        ("walking", "walked"),
        ("walks", "walked"),
        ("want", "wanted"),
        ("wanted", "wanted"),
        ("wanting", "wanted"),
        ("wants", "wanted"),
        ("was", "was"),
        ("watch", "watched"),
        ("watched", "watched"),
        ("watches", "watched"),
        ("watching", "watched"),
        ("wear", "wore"),
        ("wearing", "wore"),
        ("wears", "wore"),
        ("weep", "wept"),
        ("weeping", "wept"),
        ("weeps", "wept"),
        ("wend", "wended"),
        ("wended", "wended"),
        ("wending", "wended"),
        ("wends", "wended"),
        ("wept", "wept"),
        ("were", "were"),
        ("will", "would"),
        ("win", "won"),
        ("winning", "won"),
        ("wins", "won"),
        ("withdraw", "withdrew"),
        ("withdrawing", "withdrew"),
        ("withdrawn", "withdrew"),
        ("withdraws", "withdrew"),
        ("withheld", "withheld"),
        ("withhold", "withheld"),
        ("withholding", "withheld"),
        ("withholds", "withheld"),
        ("withstand", "withstood"),
        ("withstanding", "withstood"),
        ("withstands", "withstood"),
        ("withstood", "withstood"),
        ("woken", "woke"),
        ("won", "won"),
        ("worn", "wore"),
        ("wring", "wrung"),
        ("wringing", "wrung"),
        ("wrings", "wrung"),
        ("wrung", "wrung"),
    ]
    .iter()
    .cloned()
    .collect()
});

static PAST_RECOGNIZER_REGEXES: Lazy<Vec<Regex>> = Lazy::new(|| {
    vec![
        Regex::new(r#"(?i)\A(.*)bore$"#).unwrap(),       // 0
        Regex::new(r#"(?i)\A(.*)bade$"#).unwrap(),       // 1
        Regex::new(r#"(?i)\A(.*)bought$"#).unwrap(),     // 2
        Regex::new(r#"(?i)\A(.*)cast$"#).unwrap(),       // 3
        Regex::new(r#"(?i)\A(.*)clad$"#).unwrap(),       // 4
        Regex::new(r#"(?i)\A(.*)cut$"#).unwrap(),        // 5
        Regex::new(r#"(?i)\A(.*)did$"#).unwrap(),        // 6
        Regex::new(r#"(?i)\A(.*)drew$"#).unwrap(),       // 7
        Regex::new(r#"(?i)\A(.*)fed$"#).unwrap(),        // 8
        Regex::new(r#"(?i)\A(.*)froze$"#).unwrap(),      // 9
        Regex::new(r#"(?i)\A(.*)grew$"#).unwrap(),       // 10
        Regex::new(r#"(?i)\A(.*)hung$"#).unwrap(),       // 11
        Regex::new(r#"(?i)\A(.*)sheared$"#).unwrap(),    // 12
        Regex::new(r#"(?i)\A(.*)heard$"#).unwrap(),      // 13
        Regex::new(r#"(?i)\A(.*)hid$"#).unwrap(),        // 14
        Regex::new(r#"(?i)\A(.*)input$"#).unwrap(),      // 15
        Regex::new(r#"(?i)\A(.*)knitted$"#).unwrap(),    // 16
        Regex::new(r#"(?i)\A(.*)lent$"#).unwrap(),       // 17
        Regex::new(r#"(?i)\A(.*)let$"#).unwrap(),        // 18
        Regex::new(r#"(?i)\A(.*)lit$"#).unwrap(),        // 19
        Regex::new(r#"(?i)\A(.*)made$"#).unwrap(),       // 20
        Regex::new(r#"(?i)\A(.*)mowed$"#).unwrap(),      // 21
        Regex::new(r#"(?i)\A(.*)paid$"#).unwrap(),       // 22
        Regex::new(r#"(?i)\A(.*)read$"#).unwrap(),       // 23
        Regex::new(r#"(?i)\A(.*)said$"#).unwrap(),       // 24
        Regex::new(r#"(?i)\A(.*)saw$"#).unwrap(),        // 25
        Regex::new(r#"(?i)\A(.*)sold$"#).unwrap(),       // 26
        Regex::new(r#"(?i)\A(.*)sent$"#).unwrap(),       // 27
        Regex::new(r#"(?i)\A(.*)set$"#).unwrap(),        // 28
        Regex::new(r#"(?i)\A(.*)sewed$"#).unwrap(),      // 29
        Regex::new(r#"(?i)\A(.*)shone$"#).unwrap(),      // 30
        Regex::new(r#"(?i)\A(.*)shot$"#).unwrap(),       // 31
        Regex::new(r#"(?i)\A(.*)shut$"#).unwrap(),       // 32
        Regex::new(r#"(?i)\A(.*)slept$"#).unwrap(),      // 33
        Regex::new(r#"(?i)\A(.*)slung$"#).unwrap(),      // 34
        Regex::new(r#"(?i)\A(.*)spun$"#).unwrap(),       // 35
        Regex::new(r#"(?i)\A(.*)split$"#).unwrap(),      // 36
        Regex::new(r#"(?i)\A(.*)spread$"#).unwrap(),     // 37
        Regex::new(r#"(?i)\A(.*)stuck$"#).unwrap(),      // 38
        Regex::new(r#"(?i)\A(.*)struck$"#).unwrap(),     // 39
        Regex::new(r#"(?i)\A(.*)strung$"#).unwrap(),     // 40
        Regex::new(r#"(?i)\A(.*)took$"#).unwrap(),       // 41
        Regex::new(r#"(?i)\A(.*)taught$"#).unwrap(),     // 42
        Regex::new(r#"(?i)\A(.*)told$"#).unwrap(),       // 43
        Regex::new(r#"(?i)\A(.*)thought$"#).unwrap(),    // 44
        Regex::new(r#"(?i)\A(.*)threw$"#).unwrap(),      // 45
        Regex::new(r#"(?i)\A(.*)tried$"#).unwrap(),      // 46
        Regex::new(r#"(?i)\A(.*)wove$"#).unwrap(),       // 47
        Regex::new(r#"(?i)\A(.*)wed$"#).unwrap(),        // 48
        Regex::new(r#"(?i)\A(.*)wet$"#).unwrap(),        // 49
        Regex::new(r#"(?i)\A(.*)wound$"#).unwrap(),      // 50
        Regex::new(r#"(?i)\A(.*)wrote$"#).unwrap(),      // 51
        Regex::new(r#"(?i)\A(.*)added$"#).unwrap(),      // 52
        Regex::new(r#"(?i)\A(.*)alighted$"#).unwrap(),   // 53
        Regex::new(r#"(?i)\A(.*)allowed$"#).unwrap(),    // 54
        Regex::new(r#"(?i)\A(.*)appeared$"#).unwrap(),   // 55
        Regex::new(r#"(?i)\A(.*)believed$"#).unwrap(),   // 56
        Regex::new(r#"(?i)\A(.*)called$"#).unwrap(),     // 57
        Regex::new(r#"(?i)\A(.*)clothed$"#).unwrap(),    // 58
        Regex::new(r#"(?i)\A(.*)considered$"#).unwrap(), // 59
        Regex::new(r#"(?i)\A(.*)created$"#).unwrap(),    // 60
        Regex::new(r#"(?i)\A(.*)fitted$"#).unwrap(),     // 61
        Regex::new(r#"(?i)\A(.*)included$"#).unwrap(),   // 62
        Regex::new(r#"(?i)\A(.*)melted$"#).unwrap(),     // 63
        Regex::new(r#"(?i)\A(.*)offered$"#).unwrap(),    // 64
        Regex::new(r#"(?i)\A(.*)opened$"#).unwrap(),     // 65
        Regex::new(r#"(?i)\A(.*)played$"#).unwrap(),     // 66
        Regex::new(r#"(?i)\A(.*)served$"#).unwrap(),     // 67
        Regex::new(r#"(?i)\A(.*)smelled$"#).unwrap(),    // 68
        Regex::new(r#"(?i)\A(.*)spelled$"#).unwrap(),    // 69
        Regex::new(r#"(?i)\A(.*)spilled$"#).unwrap(),    // 70
        Regex::new(r#"(?i)\A(.*)started$"#).unwrap(),    // 71
        Regex::new(r#"(?i)\A(.*)turned$"#).unwrap(),     // 72
        Regex::new(r#"(?i)\A(.*)used$"#).unwrap(),       // 73
        Regex::new(r#"(?i)\A(.*)worked$"#).unwrap(),     // 74
        Regex::new(r#"(?i)\A(.+)n't$"#).unwrap(),        // 75
        Regex::new(r#"(?i)\A(.+[aeiou])yed$"#).unwrap(), // 76
        Regex::new(r#"(?i)\A(.+[aiy])nxed$"#).unwrap(),  // 77
        Regex::new(r#"(?i)\A(.+)cepsed$"#).unwrap(),     // 78
        Regex::new(r#"(?i)\A(.+[cs])hed$"#).unwrap(),    // 79
        Regex::new(r#"(?i)\A(.+)oed$"#).unwrap(),        // 80
        Regex::new(r#"(?i)\A(.+)ieued$"#).unwrap(),      // 81
        Regex::new(r#"(?i)\A(.+)eaued$"#).unwrap(),      // 82
        Regex::new(r#"(?i)\A(.+)ssed$"#).unwrap(),       // 83
        Regex::new(r#"(?i)\A(.+)trixed$"#).unwrap(),     // 84
        Regex::new(r#"(?i)\A(.+)xed$"#).unwrap(),        // 85
        Regex::new(r#"(?i)\A(.+)zzed$"#).unwrap(),       // 86
        Regex::new(r#"(?i)\A(.+)zed$"#).unwrap(),        // 87
        Regex::new(r#"(?i)\A(.+)ued$"#).unwrap(),        // 88
        Regex::new(r#"(?i)\A(.+)ied$"#).unwrap(),        // 89
        Regex::new(r#"(?i)\A(.+)eed$"#).unwrap(),        // 90
        Regex::new(r#"(?i)\A(.+)yed$"#).unwrap(),        // 91
        Regex::new(r#"(?i)\A(.+[au])ed$"#).unwrap(),     // 92
        Regex::new(r#"(?i)\A(.+[^b])ied$"#).unwrap(),    // 93
        Regex::new(r#"(?i)\A(.+)ied$"#).unwrap(),        // 94
        Regex::new(r#"(?i)\A(.+)yed$"#).unwrap(),        // 95
        Regex::new(r#"(?i)\A(.+[^e])ed$"#).unwrap(),     // 96
        Regex::new(r#"(?i)\A(.+)ered$"#).unwrap(),       // 97
    ]
});

/// Converts a verb to its past form, like "ate", "ran", "or
/// "walked". Whenever possible, this function returns static data or a
/// reference to the string it was given, rather than allocating a new
/// `String`.
///
/// The case of the returned word will not necessarily match the case of the
/// original word, and when given shout case like "WALK" you may get odd
/// casing results like "WALKed". You are encouraged to always pass words in
/// their poroper case, either lower case or title case as appropriate.
pub fn convert_to_past(word: &str) -> Cow<'_, str> {
    #[cfg(feature = "debug")]
    println!("convert_to_past({})", word);

    if word.is_empty() {
        #[cfg(feature = "debug")]
        println!("  word is empty");
        return Cow::Borrowed("");
    }

    if let Some(past) = maybe_convert_to_past(word) {
        #[cfg(feature = "debug")]
        println!("  word '{}' converted to past as '{}'", word, past);
        return past;
    }

    let root = convert_to_plural(word);
    #[cfg(feature = "debug")]
    println!(
        "  trying root (plural) of word '{}', which is '{}'",
        word, root
    );
    if let Some(past) = maybe_convert_to_past(&root) {
        #[cfg(feature = "debug")]
        println!("  plural word '{}' converted to past as '{}'", root, past);
        // Since convert_to_plural may have returned a Cow::Borrowed using
        // &root, we can't just return a Cow::Borrowed which borrows that
        // data, as `root` is about to go out of scope.
        return Cow::Owned(past.into_owned());
    }

    #[cfg(feature = "debug")]
    println!(
        "  appending 'ed' to truncated word '{}'",
        truncate(root.as_ref())
    );
    Cow::Owned(format!("{}ed", truncate(root.as_ref())))
}

fn maybe_convert_to_past(word: &str) -> Option<Cow<'_, str>> {
    if let Some(p) = PAST_OF.get(word) {
        #[cfg(feature = "debug")]
        println!("  found word '{}' in PAST_OF", word);
        return Some(Cow::Borrowed(p));
    }
    if let Some(p) = PAST_OF.get(word.to_lowercase().as_str()) {
        #[cfg(feature = "debug")]
        println!("  found lc word '{}' in PAST_OF", word);
        return Some(Cow::Borrowed(p));
    }
    if word.len() > 1 {
        let tc_word = to_titlecase(word);
        if let Some(p) = PAST_OF.get(tc_word.as_str()) {
            #[cfg(feature = "debug")]
            println!("  found tc word '{}' in PAST_OF", word);
            return Some(Cow::Borrowed(p));
        }
    }

    // (?i)\A(.*)bears$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[0].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}bore"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 0) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[0], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)bear$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[0].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}bore"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 0) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[0], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)bids$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[1].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}bade"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 1) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[1], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)bid$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[1].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}bade"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 1) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[1], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)buys$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[2].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}bought"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 2) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[2], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)buy$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[2].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}bought"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 2) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[2], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)casts$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[3].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}cast"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 3) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[3], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)cast$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[3].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}cast"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 3) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[3], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)clads$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[4].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}clad"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 4) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[4], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)clad$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[4].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}clad"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 4) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[4], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)cuts$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[5].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}cut"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 5) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[5], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)cut$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[5].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}cut"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 5) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[5], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)does$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[6].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}did"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 6) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[6], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)do$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[6].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}did"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 6) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[6], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)draws$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[7].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}drew"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 7) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[7], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)draw$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[7].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}drew"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 7) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[7], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)feeds$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[8].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}fed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 8) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[8], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)feed$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[8].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}fed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 8) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[8], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)freezes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[9].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}froze"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 9) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[9], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)freeze$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[9].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}froze"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 9) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[9], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)grows$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[10].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}grew"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 10) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[10], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)grow$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[10].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}grew"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 10) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[10], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)hangs$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[11].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}hung"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 11) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[11], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)hang$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[11].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}hung"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 11) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[11], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)shears$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[12].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}sheared"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 12) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[12], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)shear$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[12].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}sheared"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 12) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[12], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)hears$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[13].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}heard"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 13) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[13], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)hear$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[13].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}heard"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 13) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[13], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)hides$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[14].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}hid"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 14) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[14], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)hide$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[14].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}hid"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 14) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[14], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)inputs$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[15].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}input"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 15) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[15], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)input$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[15].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}input"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 15) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[15], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)knits$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[16].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}knitted"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 16) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[16], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)knit$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[16].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}knitted"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 16) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[16], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)lends$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[17].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}lent"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 17) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[17], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)lend$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[17].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}lent"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 17) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[17], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)lets$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[18].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}let"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 18) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[18], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)let$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[18].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}let"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 18) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[18], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)lights$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[19].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}lit"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 19) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[19], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)light$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[19].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}lit"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 19) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[19], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)makes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[20].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}made"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 20) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[20], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)make$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[20].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}made"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 20) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[20], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)mows$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[21].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}mowed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 21) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[21], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)mow$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[21].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}mowed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 21) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[21], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)pays$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[22].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}paid"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 22) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[22], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)pay$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[22].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}paid"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 22) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[22], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)reads$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[23].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}read"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 23) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[23], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)read$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[23].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}read"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 23) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[23], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)says$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[24].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}said"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 24) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[24], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)say$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[24].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}said"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 24) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[24], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)sees$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[25].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}saw"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 25) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[25], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)see$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[25].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}saw"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 25) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[25], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)sells$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[26].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}sold"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 26) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[26], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)sell$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[26].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}sold"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 26) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[26], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)sends$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[27].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}sent"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 27) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[27], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)send$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[27].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}sent"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 27) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[27], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)sets$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[28].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}set"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 28) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[28], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)set$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[28].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}set"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 28) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[28], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)sews$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[29].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}sewed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 29) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[29], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)sew$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[29].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}sewed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 29) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[29], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)shines$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[30].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}shone"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 30) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[30], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)shine$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[30].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}shone"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 30) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[30], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)shoots$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[31].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}shot"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 31) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[31], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)shoot$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[31].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}shot"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 31) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[31], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)shuts$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[32].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}shut"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 32) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[32], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)shut$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[32].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}shut"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 32) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[32], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)sleeps$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[33].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}slept"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 33) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[33], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)sleep$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[33].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}slept"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 33) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[33], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)slings$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[34].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}slung"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 34) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[34], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)sling$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[34].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}slung"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 34) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[34], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)spins$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[35].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}spun"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 35) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[35], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)spin$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[35].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}spun"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 35) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[35], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)splits$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[36].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}split"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 36) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[36], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)split$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[36].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}split"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 36) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[36], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)spreads$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[37].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}spread"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 37) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[37], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)spread$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[37].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}spread"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 37) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[37], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)sticks$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[38].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}stuck"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 38) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[38], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)stick$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[38].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}stuck"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 38) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[38], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)strikes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[39].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}struck"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 39) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[39], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)strike$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[39].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}struck"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 39) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[39], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)strings$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[40].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}strung"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 40) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[40], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)string$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[40].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}strung"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 40) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[40], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)takes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[41].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}took"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 41) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[41], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)take$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[41].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}took"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 41) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[41], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)teaches$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[42].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}taught"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 42) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[42], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)teach$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[42].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}taught"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 42) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[42], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)tells$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[43].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}told"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 43) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[43], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)tell$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[43].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}told"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 43) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[43], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)thinks$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[44].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}thought"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 44) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[44], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)think$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[44].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}thought"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 44) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[44], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)throws$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[45].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}threw"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 45) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[45], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)throw$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[45].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}threw"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 45) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[45], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)tries$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[46].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}tried"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 46) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[46], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)try$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[46].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}tried"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 46) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[46], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)weaves$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[47].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}wove"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 47) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[47], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)weave$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[47].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}wove"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 47) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[47], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)weds$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[48].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}wed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 48) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[48], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)wed$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[48].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}wed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 48) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[48], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)wets$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[49].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}wet"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 49) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[49], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)wet$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[49].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}wet"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 49) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[49], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)winds$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[50].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}wound"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 50) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[50], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)wind$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[50].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}wound"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 50) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[50], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)writes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[51].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}wrote"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 51) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[51], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)write$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[51].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}wrote"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 51) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[51], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)adds$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[52].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}added"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 52) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[52], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)add$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[52].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}added"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 52) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[52], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)alights$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[53].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}alighted"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 53) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[53], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)alight$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[53].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}alighted"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 53) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[53], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)allows$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[54].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}allowed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 54) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[54], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)allow$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[54].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}allowed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 54) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[54], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)appears$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[55].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}appeared"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 55) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[55], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)appear$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[55].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}appeared"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 55) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[55], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)believes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[56].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}believed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 56) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[56], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)believe$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[56].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}believed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 56) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[56], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)calls$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[57].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}called"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 57) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[57], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)call$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[57].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}called"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 57) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[57], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)clothes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[58].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}clothed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 58) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[58], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)clothe$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[58].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}clothed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 58) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[58], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)considers$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[59].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}considered"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 59) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[59], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)consider$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[59].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}considered"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 59) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[59], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)creates$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[60].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}created"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 60) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[60], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)create$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[60].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}created"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 60) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[60], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)fits$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[61].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}fitted"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 61) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[61], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)fit$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[61].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}fitted"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 61) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[61], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)includes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[62].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}included"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 62) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[62], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)include$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[62].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}included"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 62) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[62], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)melts$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[63].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}melted"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 63) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[63], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)melt$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[63].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}melted"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 63) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[63], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)offers$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[64].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}offered"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 64) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[64], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)offer$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[64].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}offered"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 64) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[64], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)opens$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[65].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}opened"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 65) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[65], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)open$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[65].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}opened"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 65) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[65], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)plays$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[66].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}played"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 66) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[66], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)play$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[66].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}played"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 66) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[66], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)serves$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[67].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}served"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 67) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[67], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)serve$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[67].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}served"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 67) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[67], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)smells$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[68].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}smelled"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 68) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[68], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)smell$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[68].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}smelled"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 68) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[68], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)spells$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[69].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}spelled"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 69) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[69], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)spell$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[69].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}spelled"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 69) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[69], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)spills$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[70].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}spilled"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 70) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[70], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)spill$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[70].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}spilled"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 70) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[70], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)starts$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[71].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}started"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 71) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[71], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)start$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[71].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}started"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 71) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[71], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)turns$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[72].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}turned"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 72) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[72], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)turn$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[72].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}turned"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 72) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[72], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)uses$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[73].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}used"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 73) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[73], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)use$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[73].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}used"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 73) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[73], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)works$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[74].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}worked"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 74) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[74], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)work$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[74].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}worked"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 74) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[74], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)n't$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[75].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}n't"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 75) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[75], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)n't$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[75].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}n't"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 75) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[75], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+[aeiou])ys$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[76].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}yed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 76) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[76], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+[aeiou])y$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[76].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}yed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 76) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[76], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+[aiy])nxes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[77].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}nxed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 77) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[77], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+[aiy])nx$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[77].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}nxed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 77) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[77], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)ceps$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[78].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}cepsed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 78) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[78], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)ceps$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[78].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}cepsed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 78) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[78], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+[cs])hes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[79].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}hed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 79) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[79], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+[cs])h$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[79].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}hed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 79) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[79], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)oes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[80].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}oed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 80) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[80], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)oe$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[80].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}oed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 80) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[80], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)ieus$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[81].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ieued"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 81) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[81], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)ieu$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[81].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ieued"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 81) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[81], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)eaus$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[82].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}eaued"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 82) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[82], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)eau$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[82].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}eaued"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 82) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[82], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)sses$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[83].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ssed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 83) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[83], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)ss$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[83].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ssed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 83) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[83], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)trixes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[84].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}trixed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 84) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[84], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)trix$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[84].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}trixed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 84) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[84], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)xes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[85].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}xed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 85) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[85], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)x$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[85].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}xed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 85) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[85], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)zzes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[86].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}zzed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 86) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[86], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)zz$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[86].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}zzed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 86) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[86], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)zes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[87].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}zed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 87) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[87], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)ze$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[87].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}zed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 87) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[87], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)ues$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[88].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ued"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 88) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[88], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)ue$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[88].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ued"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 88) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[88], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)is$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[89].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ied"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 89) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[89], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)i$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[89].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ied"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 89) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[89], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)ees$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[90].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}eed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 90) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[90], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)ee$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[90].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}eed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 90) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[90], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)yes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[91].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}yed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 91) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[91], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)ye$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[91].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}yed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 91) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[91], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+[au])es$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[92].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 92) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[92], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+[au])e$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[92].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 92) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[92], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+[^b])is$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[93].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ied"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 93) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[93], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+[^b])i$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[93].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ied"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 93) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[93], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)ies$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[94].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ied"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 94) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[94], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)y$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[94].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ied"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 94) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[94], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)ys$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[95].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}yed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 95) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[95], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)y$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[95].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}yed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 95) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[95], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+[^e])es$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[96].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 96) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[96], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+[^e])e$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[96].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 96) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[96], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)ers$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[97].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ered"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 97) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[97], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)er$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[97].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ered"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 97) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[97], new_word
        );
        return Some(Cow::Owned(new_word));
    }

    if is_past(word) {
        #[cfg(feature = "debug")]
        println!("  word '{}' is already past", word);
        return Some(Cow::Borrowed(word));
    }

    #[cfg(feature = "debug")]
    println!(
        "  word '{}' does not have a custom conversion to past",
        word
    );
    None
}

static PRESENT_PARTICIPLE_OF: Lazy<HashMap<&'static str, &'static str>> = Lazy::new(|| {
    [
        ("abide", "abiding"),
        ("abided", "abiding"),
        ("abides", "abiding"),
        ("ache", "aching"),
        ("ached", "aching"),
        ("aches", "aching"),
        ("am", "being"),
        ("are", "being"),
        ("arise", "arising"),
        ("arisen", "arising"),
        ("arises", "arising"),
        ("arose", "arising"),
        ("ask", "asking"),
        ("asked", "asking"),
        ("asks", "asking"),
        ("ate", "eating"),
        ("avalanche", "avalanching"),
        ("avalanched", "avalanching"),
        ("avalanches", "avalanching"),
        ("awake", "awakening"),
        ("awakes", "awakening"),
        ("awoke", "awakening"),
        ("awoken", "awakening"),
        ("beat", "beating"),
        ("beaten", "beating"),
        ("beats", "beating"),
        ("became", "becoming"),
        ("become", "becoming"),
        ("becomes", "becoming"),
        ("been", "being"),
        ("began", "beginning"),
        ("beget", "begetting"),
        ("begets", "begetting"),
        ("begin", "beginning"),
        ("begins", "beginning"),
        ("begot", "begetting"),
        ("begotten", "begetting"),
        ("begun", "beginning"),
        ("beheld", "beholding"),
        ("behold", "beholding"),
        ("beholds", "beholding"),
        ("bellyache", "bellyaching"),
        ("bellyached", "bellyaching"),
        ("bellyaches", "bellyaching"),
        ("bend", "bending"),
        ("bends", "bending"),
        ("bent", "bending"),
        ("bet", "betting"),
        ("bets", "betting"),
        ("bind", "binding"),
        ("binds", "binding"),
        ("bit", "biting"),
        ("bite", "biting"),
        ("bites", "biting"),
        ("bitten", "biting"),
        ("bled", "bleeding"),
        ("bleed", "bleeding"),
        ("bleeds", "bleeding"),
        ("blew", "blowing"),
        ("blitz", "blitzing"),
        ("blitzed", "blitzing"),
        ("blitzes", "blitzing"),
        ("blow", "blowing"),
        ("blown", "blowing"),
        ("blows", "blowing"),
        ("bound", "binding"),
        ("break", "breaking"),
        ("breaks", "breaking"),
        ("bred", "breeding"),
        ("breed", "breeding"),
        ("breeds", "breeding"),
        ("bring", "bringing"),
        ("brings", "bringing"),
        ("broke", "breaking"),
        ("broken", "breaking"),
        ("brought", "bringing"),
        ("build", "building"),
        ("builds", "building"),
        ("built", "building"),
        ("burn", "burning"),
        ("burns", "burning"),
        ("burnt", "burning"),
        ("burst", "bursting"),
        ("bursts", "bursting"),
        ("bust", "busting"),
        ("busts", "busting"),
        ("cache", "caching"),
        ("cached", "caching"),
        ("caches", "caching"),
        ("came", "coming"),
        ("catch", "catching"),
        ("catches", "catching"),
        ("caught", "catching"),
        ("change", "changing"),
        ("changed", "changing"),
        ("changes", "changing"),
        ("choose", "choosing"),
        ("chooses", "choosing"),
        ("chose", "choosing"),
        ("chosen", "choosing"),
        ("clap", "clapping"),
        ("clapped", "clapping"),
        ("claps", "clapping"),
        ("cling", "clinging"),
        ("clings", "clinging"),
        ("clung", "clinging"),
        ("come", "coming"),
        ("comes", "coming"),
        ("continue", "continuing"),
        ("continued", "continuing"),
        ("continues", "continuing"),
        ("cost", "costing"),
        ("costs", "costing"),
        ("creche", "creching"),
        ("creched", "creching"),
        ("creches", "creching"),
        ("creep", "creeping"),
        ("creeps", "creeping"),
        ("crept", "creeping"),
        ("dare", "daring"),
        ("dared", "daring"),
        ("dares", "daring"),
        ("deal", "dealing"),
        ("deals", "dealing"),
        ("dealt", "dealing"),
        ("die", "dying"),
        ("died", "dying"),
        ("dies", "dying"),
        ("dig", "digging"),
        ("digs", "digging"),
        ("dive", "diving"),
        ("dived", "diving"),
        ("dives", "diving"),
        ("douche", "douching"),
        ("douched", "douching"),
        ("douches", "douching"),
        ("drag", "dragging"),
        ("dragged", "dragging"),
        ("drags", "dragging"),
        ("drank", "drinking"),
        ("dream", "dreaming"),
        ("dreamed", "dreaming"),
        ("dreams", "dreaming"),
        ("drink", "drinking"),
        ("drinks", "drinking"),
        ("drive", "driving"),
        ("driven", "driving"),
        ("drives", "driving"),
        ("drove", "driving"),
        ("drunk", "drinking"),
        ("dug", "digging"),
        ("dwell", "dwelling"),
        ("dwells", "dwelling"),
        ("dwelt", "dwelling"),
        ("eat", "eating"),
        ("eaten", "eating"),
        ("eats", "eating"),
        ("expect", "expecting"),
        ("expected", "expecting"),
        ("expects", "expecting"),
        ("fall", "falling"),
        ("fallen", "falling"),
        ("falls", "falling"),
        ("feel", "feeling"),
        ("feels", "feeling"),
        ("fell", "falling"),
        ("felt", "feeling"),
        ("fight", "fighting"),
        ("fights", "fighting"),
        ("find", "finding"),
        ("finds", "finding"),
        ("fled", "fleeing"),
        ("flee", "fleeing"),
        ("flees", "fleeing"),
        ("flew", "flying"),
        ("flies", "flying"),
        ("fling", "flinging"),
        ("flings", "flinging"),
        ("flown", "flying"),
        ("flung", "flinging"),
        ("fly", "flying"),
        ("follow", "following"),
        ("followed", "following"),
        ("follows", "following"),
        ("forbade", "forbidding"),
        ("forbid", "forbidding"),
        ("forbidden", "forbidding"),
        ("forbids", "forbidding"),
        ("foresaw", "foreseeing"),
        ("foresee", "foreseeing"),
        ("foreseen", "foreseeing"),
        ("foresees", "foreseeing"),
        ("foretell", "foretelling"),
        ("foretells", "foretelling"),
        ("foretold", "foretelling"),
        ("forgave", "forgiving"),
        ("forget", "forgetting"),
        ("forgets", "forgetting"),
        ("forgive", "forgiving"),
        ("forgiven", "forgiving"),
        ("forgives", "forgiving"),
        ("forgot", "forgetting"),
        ("forgotten", "forgetting"),
        ("forsake", "forsaking"),
        ("forsaken", "forsaking"),
        ("forsakes", "forsaking"),
        ("forsook", "forsaking"),
        ("fought", "fighting"),
        ("found", "finding"),
        ("gave", "giving"),
        ("get", "getting"),
        ("gets", "getting"),
        ("gild", "gilding"),
        ("gilded", "gilding"),
        ("gilds", "gilding"),
        ("give", "giving"),
        ("given", "giving"),
        ("gives", "giving"),
        ("go", "going"),
        ("goes", "going"),
        ("gone", "going"),
        ("got", "getting"),
        ("gotten", "getting"),
        ("grind", "grinding"),
        ("grinds", "grinding"),
        ("ground", "grinding"),
        ("had", "having"),
        ("happen", "happening"),
        ("happened", "happening"),
        ("happens", "happening"),
        ("has", "having"),
        ("have", "having"),
        ("held", "holding"),
        ("help", "helping"),
        ("helped", "helping"),
        ("helps", "helping"),
        ("hew", "hewing"),
        ("hewed", "hewing"),
        ("hewn", "hewing"),
        ("hews", "hewing"),
        ("hit", "hitting"),
        ("hits", "hitting"),
        ("hold", "holding"),
        ("holds", "holding"),
        ("hurt", "hurting"),
        ("hurts", "hurting"),
        ("inlaid", "inlaying"),
        ("inlay", "inlaying"),
        ("inlays", "inlaying"),
        ("insist", "insisting"),
        ("insisted", "insisting"),
        ("insists", "insisting"),
        ("interlaid", "interlaying"),
        ("interlay", "interlaying"),
        ("interlays", "interlaying"),
        ("iris", "irising"),
        ("irised", "irising"),
        ("irises", "irising"),
        ("is", "being"),
        ("keep", "keeping"),
        ("keeps", "keeping"),
        ("kept", "keeping"),
        ("kill", "killing"),
        ("killed", "killing"),
        ("kills", "killing"),
        ("kneel", "kneeling"),
        ("kneels", "kneeling"),
        ("knelt", "kneeling"),
        ("knew", "knowing"),
        ("knit", "knitting"),
        ("knits", "knitting"),
        ("knitted", "knitting"),
        ("know", "knowing"),
        ("known", "knowing"),
        ("knows", "knowing"),
        ("laid", "laying"),
        ("lain", "lying"),
        ("lay", "lying"),
        ("lays", "laying"),
        ("lead", "leading"),
        ("leads", "leading"),
        ("lean", "leaning"),
        ("leaned", "leaning"),
        ("leans", "leaning"),
        ("leap", "leaping"),
        ("leaps", "leaping"),
        ("leapt", "leaping"),
        ("learn", "learning"),
        ("learned", "learning"),
        ("learns", "learning"),
        ("leave", "leaving"),
        ("leaves", "leaving"),
        ("led", "leading"),
        ("left", "leaving"),
        ("lie", "lying"),
        ("lies", "lying"),
        ("like", "liking"),
        ("liked", "liking"),
        ("likes", "liking"),
        ("live", "living"),
        ("lived", "living"),
        ("lives", "living"),
        ("look", "looking"),
        ("looked", "looking"),
        ("looks", "looking"),
        ("lose", "losing"),
        ("loses", "losing"),
        ("lost", "losing"),
        ("love", "loving"),
        ("loved", "loving"),
        ("loves", "loving"),
        ("mean", "meaning"),
        ("means", "meaning"),
        ("meant", "meaning"),
        ("meet", "meeting"),
        ("meets", "meeting"),
        ("menu", "menuing"),
        ("menued", "menuing"),
        ("menus", "menuing"),
        ("met", "meeting"),
        ("mislead", "misleading"),
        ("misleads", "misleading"),
        ("misled", "misleading"),
        ("mistake", "mistaking"),
        ("mistaken", "mistaking"),
        ("mistakes", "mistaking"),
        ("mistook", "mistaking"),
        ("misunderstand", "misunderstanding"),
        ("misunderstands", "misunderstanding"),
        ("misunderstood", "misunderstanding"),
        ("move", "moving"),
        ("moved", "moving"),
        ("moves", "moving"),
        ("need", "needing"),
        ("needed", "needing"),
        ("needs", "needing"),
        ("niche", "nicheing"),
        ("niched", "nicheing"),
        ("niches", "nicheing"),
        ("overdraw", "overdrawing"),
        ("overdrawn", "overdrawing"),
        ("overdraws", "overdrawing"),
        ("overdrew", "overdrawing"),
        ("overhear", "overhearing"),
        ("overheard", "overhearing"),
        ("overhears", "overhearing"),
        ("overtake", "overtaking"),
        ("overtaken", "overtaking"),
        ("overtakes", "overtaking"),
        ("overtook", "overtaking"),
        ("preset", "presetting"),
        ("presets", "presetting"),
        ("prove", "proving"),
        ("proved", "proving"),
        ("proven", "proving"),
        ("proves", "proving"),
        ("provide", "providing"),
        ("provided", "providing"),
        ("provides", "providing"),
        ("psyche", "psyching"),
        ("psyched", "psyching"),
        ("psyches", "psyching"),
        ("put", "putting"),
        ("puts", "putting"),
        ("quit", "quitting"),
        ("quits", "quitting"),
        ("quiz", "quizzing"),
        ("quizzed", "quizzing"),
        ("quizzes", "quizzing"),
        ("ran", "running"),
        ("rang", "ringing"),
        ("reach", "reaching"),
        ("reached", "reaching"),
        ("reaches", "reaching"),
        ("remain", "remaining"),
        ("remained", "remaining"),
        ("remains", "remaining"),
        ("remember", "remembering"),
        ("remembered", "remembering"),
        ("remembers", "remembering"),
        ("rend", "rending"),
        ("rends", "rending"),
        ("rent", "rending"),
        ("rid", "ridding"),
        ("ridden", "riding"),
        ("ride", "riding"),
        ("rides", "riding"),
        ("rids", "ridding"),
        ("ring", "ringing"),
        ("rings", "ringing"),
        ("rise", "rising"),
        ("risen", "rising"),
        ("rises", "rising"),
        ("rive", "riving"),
        ("rived", "riving"),
        ("riven", "riving"),
        ("rives", "riving"),
        ("rode", "riding"),
        ("rose", "rising"),
        ("run", "running"),
        ("rung", "ringing"),
        ("runs", "running"),
        ("sang", "singing"),
        ("sank", "sinking"),
        ("sat", "sitting"),
        ("saw", "sawing"),
        ("sawed", "sawing"),
        ("sawn", "sawing"),
        ("saws", "sawing"),
        ("seek", "seeking"),
        ("seeks", "seeking"),
        ("seem", "seeming"),
        ("seemed", "seeming"),
        ("seems", "seeming"),
        ("shake", "shaking"),
        ("shaken", "shaking"),
        ("shakes", "shaking"),
        ("shat", "shitting"),
        ("shave", "shaving"),
        ("shaved", "shaving"),
        ("shaves", "shaving"),
        ("shed", "shedding"),
        ("sheds", "shedding"),
        ("shit", "shitting"),
        ("shits", "shitting"),
        ("shitted", "shitting"),
        ("shod", "shoeing"),
        ("shoe", "shoeing"),
        ("shoes", "shoeing"),
        ("shook", "shaking"),
        ("show", "showing"),
        ("showed", "showing"),
        ("shown", "showing"),
        ("shows", "showing"),
        ("shrank", "shrinking"),
        ("shrink", "shrinking"),
        ("shrinks", "shrinking"),
        ("shrunk", "shrinking"),
        ("sing", "singing"),
        ("sings", "singing"),
        ("sink", "sinking"),
        ("sinks", "sinking"),
        ("sit", "sitting"),
        ("sits", "sitting"),
        ("ski", "skiing"),
        ("skied", "skiing"),
        ("skis", "skiing"),
        ("slain", "slaying"),
        ("slay", "slaying"),
        ("slays", "slaying"),
        ("slew", "slaying"),
        ("slid", "sliding"),
        ("slide", "sliding"),
        ("slides", "sliding"),
        ("slink", "slinking"),
        ("slinks", "slinking"),
        ("slit", "slitting"),
        ("slits", "slitting"),
        ("slunk", "slinking"),
        ("smell", "smelling"),
        ("smelled", "smelling"),
        ("smells", "smelling"),
        ("smite", "smiting"),
        ("smites", "smiting"),
        ("smitten", "smiting"),
        ("smote", "smiting"),
        ("sneak", "sneaking"),
        ("sneaked", "sneaking"),
        ("sneaks", "sneaking"),
        ("sought", "seeking"),
        ("sow", "sowing"),
        ("sowed", "sowing"),
        ("sown", "sowing"),
        ("sows", "sowing"),
        ("spat", "spitting"),
        ("speak", "speaking"),
        ("speaks", "speaking"),
        ("sped", "speeding"),
        ("speed", "speeding"),
        ("speeds", "speeding"),
        ("spend", "spending"),
        ("spends", "spending"),
        ("spent", "spending"),
        ("spit", "spitting"),
        ("spits", "spitting"),
        ("spoil", "spoiling"),
        ("spoiled", "spoiling"),
        ("spoils", "spoiling"),
        ("spoilt", "spoiling"),
        ("spoke", "speaking"),
        ("spoken", "speaking"),
        ("sprang", "springing"),
        ("spring", "springing"),
        ("springs", "springing"),
        ("sprung", "springing"),
        ("stand", "standing"),
        ("stands", "standing"),
        ("stank", "stinking"),
        ("stave", "staving"),
        ("staved", "staving"),
        ("staves", "staving"),
        ("stay", "staying"),
        ("stayed", "staying"),
        ("stays", "staying"),
        ("steal", "stealing"),
        ("steals", "stealing"),
        ("sting", "stinging"),
        ("stings", "stinging"),
        ("stink", "stinking"),
        ("stinks", "stinking"),
        ("stole", "stealing"),
        ("stolen", "stealing"),
        ("stood", "standing"),
        ("stop", "stopping"),
        ("stopped", "stopping"),
        ("stops", "stopping"),
        ("strew", "strewing"),
        ("strewed", "strewing"),
        ("strewn", "strewing"),
        ("strews", "strewing"),
        ("stride", "striding"),
        ("strides", "striding"),
        ("strip", "stripping"),
        ("stripped", "stripping"),
        ("strips", "stripping"),
        ("strive", "striving"),
        ("strived", "striving"),
        ("strives", "striving"),
        ("strode", "striding"),
        ("strove", "striving"),
        ("stung", "stinging"),
        ("stunk", "stinking"),
        ("sublet", "subletting"),
        ("sublets", "subletting"),
        ("sunburn", "sunburning"),
        ("sunburned", "sunburning"),
        ("sunburns", "sunburning"),
        ("sung", "singing"),
        ("sunk", "sinking"),
        ("swam", "swimming"),
        ("swear", "swearing"),
        ("swears", "swearing"),
        ("sweat", "sweating"),
        ("sweated", "sweating"),
        ("sweats", "sweating"),
        ("sweep", "sweeping"),
        ("sweeps", "sweeping"),
        ("swell", "swelling"),
        ("swelled", "swelling"),
        ("swells", "swelling"),
        ("swept", "sweeping"),
        ("swim", "swimming"),
        ("swims", "swimming"),
        ("swing", "swinging"),
        ("swings", "swinging"),
        ("swollen", "swelling"),
        ("swore", "swearing"),
        ("sworn", "swearing"),
        ("swum", "swimming"),
        ("swung", "swinging"),
        ("talk", "talking"),
        ("talked", "talking"),
        ("talks", "talking"),
        ("tear", "tearing"),
        ("tears", "tearing"),
        ("thrive", "thriving"),
        ("thrived", "thriving"),
        ("thrives", "thriving"),
        ("thrust", "thrusting"),
        ("thrusts", "thrusting"),
        ("tore", "tearing"),
        ("torn", "tearing"),
        ("tread", "treading"),
        ("treads", "treading"),
        ("trod", "treading"),
        ("trodden", "treading"),
        ("undergo", "undergoing"),
        ("undergoes", "undergoing"),
        ("undergone", "undergoing"),
        ("understand", "understanding"),
        ("understands", "understanding"),
        ("understood", "understanding"),
        ("undertake", "undertaking"),
        ("undertaken", "undertaking"),
        ("undertakes", "undertaking"),
        ("undertook", "undertaking"),
        ("underwent", "undergoing"),
        ("upset", "upsetting"),
        ("upsets", "upsetting"),
        ("vex", "vexing"),
        ("vexed", "vexing"),
        ("vexes", "vexing"),
        ("wait", "waiting"),
        ("waited", "waiting"),
        ("waits", "waiting"),
        ("wake", "waking"),
        ("wakes", "waking"),
        ("walk", "walking"),
        ("walked", "walking"),
        ("walks", "walking"),
        ("want", "wanting"),
        ("wanted", "wanting"),
        ("wants", "wanting"),
        ("was", "being"),
        ("watch", "watching"),
        ("watched", "watching"),
        ("watches", "watching"),
        ("wear", "wearing"),
        ("wears", "wearing"),
        ("weep", "weeping"),
        ("weeps", "weeping"),
        ("wend", "wending"),
        ("wended", "wending"),
        ("wends", "wending"),
        ("went", "going"),
        ("wept", "weeping"),
        ("were", "being"),
        ("win", "winning"),
        ("wins", "winning"),
        ("withdraw", "withdrawing"),
        ("withdrawn", "withdrawing"),
        ("withdraws", "withdrawing"),
        ("withdrew", "withdrawing"),
        ("withheld", "withholding"),
        ("withhold", "withholding"),
        ("withholds", "withholding"),
        ("withstand", "withstanding"),
        ("withstands", "withstanding"),
        ("withstood", "withstanding"),
        ("woke", "waking"),
        ("woken", "waking"),
        ("won", "winning"),
        ("wore", "wearing"),
        ("worn", "wearing"),
        ("wring", "wringing"),
        ("wrings", "wringing"),
        ("wrung", "wringing"),
    ]
    .iter()
    .cloned()
    .collect()
});

static PRESENT_PARTICIPLE_RECOGNIZER_REGEXES: Lazy<Vec<Regex>> = Lazy::new(|| {
    vec![
        Regex::new(r#"(?i)\A(.*)bearing$"#).unwrap(),     // 0
        Regex::new(r#"(?i)\A(.*)bidding$"#).unwrap(),     // 1
        Regex::new(r#"(?i)\A(.*)buying$"#).unwrap(),      // 2
        Regex::new(r#"(?i)\A(.*)casting$"#).unwrap(),     // 3
        Regex::new(r#"(?i)\A(.*)cladding$"#).unwrap(),    // 4
        Regex::new(r#"(?i)\A(.*)cutting$"#).unwrap(),     // 5
        Regex::new(r#"(?i)\A(.*)doing$"#).unwrap(),       // 6
        Regex::new(r#"(?i)\A(.*)drawing$"#).unwrap(),     // 7
        Regex::new(r#"(?i)\A(.*)feeding$"#).unwrap(),     // 8
        Regex::new(r#"(?i)\A(.*)freezing$"#).unwrap(),    // 9
        Regex::new(r#"(?i)\A(.*)growing$"#).unwrap(),     // 10
        Regex::new(r#"(?i)\A(.*)hanging$"#).unwrap(),     // 11
        Regex::new(r#"(?i)\A(.*)shearing$"#).unwrap(),    // 12
        Regex::new(r#"(?i)\A(.*)hearing$"#).unwrap(),     // 13
        Regex::new(r#"(?i)\A(.*)hiding$"#).unwrap(),      // 14
        Regex::new(r#"(?i)\A(.*)inputting$"#).unwrap(),   // 15
        Regex::new(r#"(?i)\A(.*)knitting$"#).unwrap(),    // 16
        Regex::new(r#"(?i)\A(.*)lending$"#).unwrap(),     // 17
        Regex::new(r#"(?i)\A(.*)letting$"#).unwrap(),     // 18
        Regex::new(r#"(?i)\A(.*)lighting$"#).unwrap(),    // 19
        Regex::new(r#"(?i)\A(.*)making$"#).unwrap(),      // 20
        Regex::new(r#"(?i)\A(.*)mowing$"#).unwrap(),      // 21
        Regex::new(r#"(?i)\A(.*)paying$"#).unwrap(),      // 22
        Regex::new(r#"(?i)\A(.*)reading$"#).unwrap(),     // 23
        Regex::new(r#"(?i)\A(.*)saying$"#).unwrap(),      // 24
        Regex::new(r#"(?i)\A(.*)seeing$"#).unwrap(),      // 25
        Regex::new(r#"(?i)\A(.*)selling$"#).unwrap(),     // 26
        Regex::new(r#"(?i)\A(.*)sending$"#).unwrap(),     // 27
        Regex::new(r#"(?i)\A(.*)setting$"#).unwrap(),     // 28
        Regex::new(r#"(?i)\A(.*)sewing$"#).unwrap(),      // 29
        Regex::new(r#"(?i)\A(.*)shining$"#).unwrap(),     // 30
        Regex::new(r#"(?i)\A(.*)shooting$"#).unwrap(),    // 31
        Regex::new(r#"(?i)\A(.*)shutting$"#).unwrap(),    // 32
        Regex::new(r#"(?i)\A(.*)sleeping$"#).unwrap(),    // 33
        Regex::new(r#"(?i)\A(.*)slinging$"#).unwrap(),    // 34
        Regex::new(r#"(?i)\A(.*)spinning$"#).unwrap(),    // 35
        Regex::new(r#"(?i)\A(.*)splitting$"#).unwrap(),   // 36
        Regex::new(r#"(?i)\A(.*)spreading$"#).unwrap(),   // 37
        Regex::new(r#"(?i)\A(.*)sticking$"#).unwrap(),    // 38
        Regex::new(r#"(?i)\A(.*)striking$"#).unwrap(),    // 39
        Regex::new(r#"(?i)\A(.*)stringing$"#).unwrap(),   // 40
        Regex::new(r#"(?i)\A(.*)taking$"#).unwrap(),      // 41
        Regex::new(r#"(?i)\A(.*)teaching$"#).unwrap(),    // 42
        Regex::new(r#"(?i)\A(.*)telling$"#).unwrap(),     // 43
        Regex::new(r#"(?i)\A(.*)thinking$"#).unwrap(),    // 44
        Regex::new(r#"(?i)\A(.*)throwing$"#).unwrap(),    // 45
        Regex::new(r#"(?i)\A(.*)trying$"#).unwrap(),      // 46
        Regex::new(r#"(?i)\A(.*)weaving$"#).unwrap(),     // 47
        Regex::new(r#"(?i)\A(.*)wedding$"#).unwrap(),     // 48
        Regex::new(r#"(?i)\A(.*)wetting$"#).unwrap(),     // 49
        Regex::new(r#"(?i)\A(.*)winding$"#).unwrap(),     // 50
        Regex::new(r#"(?i)\A(.*)writing$"#).unwrap(),     // 51
        Regex::new(r#"(?i)\A(.*)adding$"#).unwrap(),      // 52
        Regex::new(r#"(?i)\A(.*)alighting$"#).unwrap(),   // 53
        Regex::new(r#"(?i)\A(.*)allowing$"#).unwrap(),    // 54
        Regex::new(r#"(?i)\A(.*)appearing$"#).unwrap(),   // 55
        Regex::new(r#"(?i)\A(.*)believing$"#).unwrap(),   // 56
        Regex::new(r#"(?i)\A(.*)calling$"#).unwrap(),     // 57
        Regex::new(r#"(?i)\A(.*)clothing$"#).unwrap(),    // 58
        Regex::new(r#"(?i)\A(.*)considering$"#).unwrap(), // 59
        Regex::new(r#"(?i)\A(.*)creating$"#).unwrap(),    // 60
        Regex::new(r#"(?i)\A(.*)fitting$"#).unwrap(),     // 61
        Regex::new(r#"(?i)\A(.*)including$"#).unwrap(),   // 62
        Regex::new(r#"(?i)\A(.*)melting$"#).unwrap(),     // 63
        Regex::new(r#"(?i)\A(.*)offering$"#).unwrap(),    // 64
        Regex::new(r#"(?i)\A(.*)opening$"#).unwrap(),     // 65
        Regex::new(r#"(?i)\A(.*)playing$"#).unwrap(),     // 66
        Regex::new(r#"(?i)\A(.*)serving$"#).unwrap(),     // 67
        Regex::new(r#"(?i)\A(.*)smelling$"#).unwrap(),    // 68
        Regex::new(r#"(?i)\A(.*)spelling$"#).unwrap(),    // 69
        Regex::new(r#"(?i)\A(.*)spilling$"#).unwrap(),    // 70
        Regex::new(r#"(?i)\A(.*)starting$"#).unwrap(),    // 71
        Regex::new(r#"(?i)\A(.*)turning$"#).unwrap(),     // 72
        Regex::new(r#"(?i)\A(.*)using$"#).unwrap(),       // 73
        Regex::new(r#"(?i)\A(.*)working$"#).unwrap(),     // 74
        Regex::new(r#"(?i)\A(.+[aeiou])ying$"#).unwrap(), // 75
        Regex::new(r#"(?i)\A(.+[aiy])nxing$"#).unwrap(),  // 76
        Regex::new(r#"(?i)\A(.+)cepsing$"#).unwrap(),     // 77
        Regex::new(r#"(?i)\A(.+[cs])hing$"#).unwrap(),    // 78
        Regex::new(r#"(?i)\A(.+)oeing$"#).unwrap(),       // 79
        Regex::new(r#"(?i)\A(.+)ieuing$"#).unwrap(),      // 80
        Regex::new(r#"(?i)\A(.+)eauing$"#).unwrap(),      // 81
        Regex::new(r#"(?i)\A(.+)ssing$"#).unwrap(),       // 82
        Regex::new(r#"(?i)\A(.+)trixing$"#).unwrap(),     // 83
        Regex::new(r#"(?i)\A(.+)xing$"#).unwrap(),        // 84
        Regex::new(r#"(?i)\A(.+)zzing$"#).unwrap(),       // 85
        Regex::new(r#"(?i)\A(.+)zing$"#).unwrap(),        // 86
        Regex::new(r#"(?i)\A(.+)ueing$"#).unwrap(),       // 87
        Regex::new(r#"(?i)\A(.+)iing$"#).unwrap(),        // 88
        Regex::new(r#"(?i)\A(.+)eeing$"#).unwrap(),       // 89
        Regex::new(r#"(?i)\A(.+)yeing$"#).unwrap(),       // 90
        Regex::new(r#"(?i)\A(.+[au])ing$"#).unwrap(),     // 91
        Regex::new(r#"(?i)\A(.+[^b])ing$"#).unwrap(),     // 92
        Regex::new(r#"(?i)\A(.+)ying$"#).unwrap(),        // 93
        Regex::new(r#"(?i)\A(.+)ying$"#).unwrap(),        // 94
        Regex::new(r#"(?i)\A(.+[^e])ing$"#).unwrap(),     // 95
        Regex::new(r#"(?i)\A(.+)ering$"#).unwrap(),       // 96
    ]
});

/// Converts a verb to its present participle form, like "eating, "running",
/// or "walking". Whenever possible, this function returns static data or a
/// reference to the string it was given, rather than allocating a new
/// `String`.
///
/// The case of the returned word will not necessarily match the case of the
/// original word, and when given shout case like "EAT" you may get odd casing
/// results like "EATing". You are encouraged to always pass words in their
/// poroper case, either lower case or title case as appropriate.
pub fn convert_to_present_participle(word: &str) -> Cow<'_, str> {
    #[cfg(feature = "debug")]
    println!("convert_to_present_participle({})", word);

    if word.is_empty() {
        #[cfg(feature = "debug")]
        println!("  word is empty");
        return Cow::Borrowed("");
    }

    if let Some(present) = maybe_convert_to_present_participle(word) {
        #[cfg(feature = "debug")]
        println!(
            "  word '{}' converted to present participle as '{}'",
            word, present
        );
        return present;
    }

    let root = convert_to_plural(word);
    #[cfg(feature = "debug")]
    println!(
        "  trying root (plural) of word '{}', which is '{}'",
        word, root,
    );
    if let Some(present) = maybe_convert_to_present_participle(&root) {
        #[cfg(feature = "debug")]
        println!(
            "  plural word '{}' converted to present participle as '{}'",
            root, present
        );
        // Since convert_to_plural may have returned a Cow::Borrowed using
        // &root, we can't just return a Cow::Borrowed which borrows that
        // data, as `root` is about to go out of scope.
        return Cow::Owned(present.into_owned());
    }

    #[cfg(feature = "debug")]
    println!(
        "  appending 'ing' to truncated word '{}'",
        truncate(root.as_ref())
    );
    Cow::Owned(format!("{}ing", truncate(root.as_ref())))
}

fn maybe_convert_to_present_participle(word: &str) -> Option<Cow<'_, str>> {
    if let Some(p) = PRESENT_PARTICIPLE_OF.get(word) {
        #[cfg(feature = "debug")]
        println!("  found word '{}' in PRESENT_PARTICIPLE_OF", word);
        return Some(Cow::Borrowed(p));
    }
    if let Some(p) = PRESENT_PARTICIPLE_OF.get(word.to_lowercase().as_str()) {
        #[cfg(feature = "debug")]
        println!("  found lc word '{}' in PRESENT_PARTICIPLE_OF", word);
        return Some(Cow::Borrowed(p));
    }
    if word.len() > 1 {
        let tc_word = to_titlecase(word);
        if let Some(p) = PRESENT_PARTICIPLE_OF.get(tc_word.as_str()) {
            #[cfg(feature = "debug")]
            println!("  found tc word '{}' in PRESENT_PARTICIPLE_OF", word);
            return Some(Cow::Borrowed(p));
        }
    }

    // (?i)\A(.*)bears$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[0].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}bearing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 0) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[0], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)bear$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[0].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}bearing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 0) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[0], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)bids$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[1].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}bidding"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 1) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[1], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)bid$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[1].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}bidding"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 1) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[1], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)buys$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[2].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}buying"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 2) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[2], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)buy$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[2].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}buying"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 2) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[2], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)casts$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[3].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}casting"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 3) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[3], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)cast$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[3].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}casting"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 3) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[3], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)clads$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[4].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}cladding"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 4) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[4], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)clad$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[4].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}cladding"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 4) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[4], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)cuts$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[5].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}cutting"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 5) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[5], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)cut$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[5].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}cutting"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 5) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[5], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)does$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[6].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}doing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 6) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[6], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)do$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[6].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}doing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 6) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[6], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)draws$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[7].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}drawing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 7) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[7], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)draw$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[7].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}drawing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 7) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[7], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)feeds$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[8].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}feeding"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 8) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[8], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)feed$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[8].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}feeding"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 8) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[8], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)freezes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[9].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}freezing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 9) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[9], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)freeze$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[9].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}freezing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 9) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[9], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)grows$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[10].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}growing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 10) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[10], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)grow$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[10].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}growing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 10) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[10], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)hangs$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[11].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}hanging"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 11) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[11], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)hang$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[11].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}hanging"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 11) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[11], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)shears$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[12].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}shearing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 12) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[12], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)shear$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[12].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}shearing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 12) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[12], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)hears$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[13].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}hearing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 13) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[13], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)hear$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[13].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}hearing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 13) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[13], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)hides$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[14].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}hiding"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 14) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[14], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)hide$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[14].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}hiding"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 14) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[14], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)inputs$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[15].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}inputting"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 15) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[15], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)input$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[15].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}inputting"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 15) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[15], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)knits$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[16].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}knitting"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 16) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[16], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)knit$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[16].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}knitting"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 16) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[16], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)lends$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[17].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}lending"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 17) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[17], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)lend$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[17].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}lending"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 17) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[17], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)lets$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[18].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}letting"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 18) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[18], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)let$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[18].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}letting"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 18) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[18], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)lights$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[19].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}lighting"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 19) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[19], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)light$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[19].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}lighting"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 19) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[19], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)makes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[20].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}making"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 20) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[20], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)make$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[20].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}making"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 20) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[20], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)mows$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[21].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}mowing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 21) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[21], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)mow$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[21].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}mowing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 21) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[21], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)pays$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[22].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}paying"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 22) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[22], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)pay$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[22].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}paying"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 22) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[22], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)reads$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[23].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}reading"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 23) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[23], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)read$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[23].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}reading"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 23) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[23], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)says$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[24].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}saying"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 24) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[24], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)say$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[24].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}saying"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 24) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[24], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)sees$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[25].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}seeing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 25) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[25], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)see$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[25].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}seeing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 25) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[25], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)sells$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[26].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}selling"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 26) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[26], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)sell$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[26].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}selling"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 26) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[26], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)sends$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[27].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}sending"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 27) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[27], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)send$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[27].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}sending"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 27) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[27], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)sets$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[28].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}setting"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 28) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[28], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)set$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[28].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}setting"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 28) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[28], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)sews$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[29].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}sewing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 29) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[29], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)sew$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[29].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}sewing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 29) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[29], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)shines$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[30].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}shining"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 30) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[30], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)shine$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[30].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}shining"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 30) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[30], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)shoots$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[31].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}shooting"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 31) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[31], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)shoot$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[31].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}shooting"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 31) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[31], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)shuts$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[32].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}shutting"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 32) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[32], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)shut$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[32].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}shutting"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 32) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[32], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)sleeps$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[33].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}sleeping"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 33) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[33], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)sleep$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[33].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}sleeping"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 33) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[33], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)slings$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[34].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}slinging"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 34) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[34], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)sling$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[34].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}slinging"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 34) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[34], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)spins$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[35].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}spinning"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 35) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[35], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)spin$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[35].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}spinning"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 35) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[35], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)splits$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[36].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}splitting"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 36) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[36], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)split$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[36].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}splitting"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 36) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[36], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)spreads$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[37].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}spreading"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 37) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[37], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)spread$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[37].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}spreading"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 37) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[37], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)sticks$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[38].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}sticking"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 38) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[38], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)stick$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[38].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}sticking"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 38) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[38], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)strikes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[39].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}striking"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 39) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[39], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)strike$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[39].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}striking"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 39) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[39], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)strings$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[40].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}stringing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 40) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[40], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)string$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[40].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}stringing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 40) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[40], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)takes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[41].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}taking"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 41) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[41], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)take$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[41].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}taking"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 41) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[41], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)teaches$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[42].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}teaching"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 42) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[42], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)teach$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[42].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}teaching"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 42) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[42], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)tells$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[43].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}telling"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 43) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[43], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)tell$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[43].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}telling"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 43) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[43], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)thinks$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[44].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}thinking"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 44) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[44], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)think$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[44].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}thinking"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 44) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[44], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)throws$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[45].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}throwing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 45) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[45], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)throw$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[45].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}throwing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 45) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[45], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)tries$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[46].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}trying"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 46) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[46], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)try$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[46].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}trying"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 46) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[46], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)weaves$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[47].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}weaving"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 47) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[47], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)weave$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[47].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}weaving"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 47) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[47], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)weds$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[48].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}wedding"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 48) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[48], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)wed$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[48].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}wedding"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 48) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[48], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)wets$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[49].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}wetting"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 49) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[49], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)wet$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[49].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}wetting"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 49) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[49], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)winds$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[50].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}winding"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 50) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[50], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)wind$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[50].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}winding"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 50) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[50], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)writes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[51].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}writing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 51) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[51], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)write$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[51].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}writing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 51) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[51], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)adds$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[52].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}adding"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 52) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[52], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)add$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[52].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}adding"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 52) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[52], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)alights$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[53].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}alighting"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 53) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[53], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)alight$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[53].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}alighting"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 53) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[53], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)allows$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[54].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}allowing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 54) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[54], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)allow$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[54].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}allowing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 54) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[54], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)appears$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[55].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}appearing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 55) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[55], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)appear$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[55].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}appearing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 55) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[55], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)believes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[56].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}believing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 56) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[56], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)believe$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[56].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}believing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 56) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[56], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)calls$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[57].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}calling"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 57) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[57], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)call$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[57].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}calling"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 57) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[57], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)clothes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[58].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}clothing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 58) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[58], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)clothe$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[58].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}clothing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 58) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[58], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)considers$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[59].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}considering"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 59) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[59], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)consider$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[59].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}considering"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 59) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[59], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)creates$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[60].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}creating"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 60) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[60], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)create$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[60].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}creating"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 60) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[60], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)fits$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[61].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}fitting"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 61) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[61], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)fit$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[61].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}fitting"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 61) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[61], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)includes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[62].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}including"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 62) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[62], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)include$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[62].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}including"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 62) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[62], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)melts$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[63].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}melting"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 63) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[63], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)melt$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[63].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}melting"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 63) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[63], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)offers$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[64].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}offering"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 64) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[64], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)offer$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[64].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}offering"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 64) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[64], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)opens$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[65].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}opening"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 65) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[65], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)open$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[65].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}opening"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 65) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[65], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)plays$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[66].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}playing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 66) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[66], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)play$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[66].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}playing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 66) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[66], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)serves$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[67].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}serving"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 67) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[67], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)serve$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[67].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}serving"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 67) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[67], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)smells$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[68].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}smelling"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 68) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[68], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)smell$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[68].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}smelling"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 68) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[68], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)spells$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[69].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}spelling"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 69) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[69], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)spell$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[69].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}spelling"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 69) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[69], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)spills$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[70].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}spilling"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 70) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[70], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)spill$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[70].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}spilling"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 70) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[70], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)starts$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[71].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}starting"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 71) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[71], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)start$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[71].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}starting"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 71) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[71], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)turns$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[72].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}turning"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 72) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[72], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)turn$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[72].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}turning"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 72) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[72], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)uses$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[73].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}using"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 73) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[73], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)use$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[73].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}using"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 73) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[73], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)works$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[74].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}working"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 74) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[74], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)work$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[74].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}working"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 74) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[74], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+[aeiou])ys$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[76].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ying"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 76) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[76], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+[aeiou])y$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[76].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ying"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 76) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[76], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+[aiy])nxes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[77].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}nxing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 77) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[77], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+[aiy])nx$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[77].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}nxing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 77) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[77], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)ceps$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[78].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}cepsing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 78) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[78], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)ceps$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[78].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}cepsing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 78) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[78], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+[cs])hes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[79].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}hing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 79) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[79], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+[cs])h$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[79].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}hing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 79) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[79], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)oes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[80].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}oeing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 80) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[80], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)oe$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[80].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}oeing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 80) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[80], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)ieus$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[81].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ieuing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 81) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[81], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)ieu$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[81].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ieuing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 81) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[81], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)eaus$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[82].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}eauing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 82) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[82], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)eau$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[82].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}eauing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 82) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[82], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)sses$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[83].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ssing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 83) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[83], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)ss$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[83].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ssing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 83) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[83], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)trixes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[84].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}trixing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 84) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[84], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)trix$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[84].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}trixing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 84) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[84], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)xes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[85].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}xing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 85) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[85], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)x$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[85].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}xing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 85) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[85], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)zzes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[86].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}zzing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 86) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[86], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)zz$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[86].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}zzing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 86) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[86], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)zes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[87].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}zing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 87) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[87], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)ze$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[87].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}zing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 87) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[87], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)ues$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[88].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ueing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 88) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[88], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)ue$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[88].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ueing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 88) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[88], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)is$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[89].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}iing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 89) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[89], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)i$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[89].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}iing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 89) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[89], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)ees$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[90].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}eeing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 90) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[90], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)ee$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[90].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}eeing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 90) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[90], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)yes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[91].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}yeing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 91) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[91], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)ye$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[91].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}yeing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 91) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[91], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+[au])es$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[92].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 92) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[92], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+[au])e$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[92].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 92) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[92], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+[^b])is$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[93].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 93) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[93], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+[^b])i$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[93].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 93) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[93], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)ies$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[94].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ying"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 94) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[94], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)y$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[94].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ying"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 94) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[94], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)ys$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[95].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ying"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 95) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[95], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)y$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[95].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ying"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 95) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[95], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+[^e])es$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[96].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 96) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[96], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+[^e])e$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[96].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ing"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 96) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[96], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)ers$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[97].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ering"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 97) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[97], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)er$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[97].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ering"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 97) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[97], new_word
        );
        return Some(Cow::Owned(new_word));
    }

    if is_present_participle(word) {
        #[cfg(feature = "debug")]
        println!("  word '{}' is already present participle", word);
        return Some(Cow::Borrowed(word));
    }

    #[cfg(feature = "debug")]
    println!(
        "  word '{}' does not have a custom conversion to present participle",
        word,
    );
    None
}

static PAST_PARTICIPLE_OF: Lazy<HashMap<&'static str, &'static str>> = Lazy::new(|| {
    [
        ("abide", "abided"),
        ("abided", "abided"),
        ("abides", "abided"),
        ("abiding", "abided"),
        ("ache", "ached"),
        ("ached", "ached"),
        ("aches", "ached"),
        ("aching", "ached"),
        ("am", "been"),
        ("are", "been"),
        ("arise", "arisen"),
        ("arises", "arisen"),
        ("arising", "arisen"),
        ("arose", "arisen"),
        ("ask", "asked"),
        ("asked", "asked"),
        ("asking", "asked"),
        ("asks", "asked"),
        ("ate", "eaten"),
        ("avalanche", "avalanched"),
        ("avalanched", "avalanched"),
        ("avalanches", "avalanched"),
        ("avalanching", "avalanched"),
        ("awake", "awoken"),
        ("awakening", "awoken"),
        ("awakes", "awoken"),
        ("awoke", "awoken"),
        ("beat", "beaten"),
        ("beating", "beaten"),
        ("beats", "beaten"),
        ("became", "become"),
        ("become", "become"),
        ("becomes", "become"),
        ("becoming", "become"),
        ("began", "begun"),
        ("beget", "begotten"),
        ("begets", "begotten"),
        ("begetting", "begotten"),
        ("begin", "begun"),
        ("beginning", "begun"),
        ("begins", "begun"),
        ("begot", "begotten"),
        ("beheld", "beheld"),
        ("behold", "beheld"),
        ("beholding", "beheld"),
        ("beholds", "beheld"),
        ("being", "been"),
        ("bellyache", "bellyached"),
        ("bellyached", "bellyached"),
        ("bellyaches", "bellyached"),
        ("bellyaching", "bellyached"),
        ("bend", "bent"),
        ("bending", "bent"),
        ("bends", "bent"),
        ("bent", "bent"),
        ("bet", "bet"),
        ("bets", "bet"),
        ("betting", "bet"),
        ("bind", "bound"),
        ("binding", "bound"),
        ("binds", "bound"),
        ("bit", "bitten"),
        ("bite", "bitten"),
        ("bites", "bitten"),
        ("biting", "bitten"),
        ("bled", "bled"),
        ("bleed", "bled"),
        ("bleeding", "bled"),
        ("bleeds", "bled"),
        ("blew", "blown"),
        ("blitz", "blitzed"),
        ("blitzed", "blitzed"),
        ("blitzes", "blitzed"),
        ("blitzing", "blitzed"),
        ("blow", "blown"),
        ("blowing", "blown"),
        ("blows", "blown"),
        ("bound", "bound"),
        ("break", "broken"),
        ("breaking", "broken"),
        ("breaks", "broken"),
        ("bred", "bred"),
        ("breed", "bred"),
        ("breeding", "bred"),
        ("breeds", "bred"),
        ("bring", "brought"),
        ("bringing", "brought"),
        ("brings", "brought"),
        ("broke", "broken"),
        ("brought", "brought"),
        ("build", "built"),
        ("building", "built"),
        ("builds", "built"),
        ("built", "built"),
        ("burn", "burnt"),
        ("burning", "burnt"),
        ("burns", "burnt"),
        ("burnt", "burnt"),
        ("burst", "burst"),
        ("bursting", "burst"),
        ("bursts", "burst"),
        ("bust", "bust"),
        ("busting", "bust"),
        ("busts", "bust"),
        ("cache", "cached"),
        ("cached", "cached"),
        ("caches", "cached"),
        ("caching", "cached"),
        ("came", "come"),
        ("catch", "caught"),
        ("catches", "caught"),
        ("catching", "caught"),
        ("caught", "caught"),
        ("change", "changed"),
        ("changed", "changed"),
        ("changes", "changed"),
        ("changing", "changed"),
        ("choose", "chosen"),
        ("chooses", "chosen"),
        ("choosing", "chosen"),
        ("chose", "chosen"),
        ("clap", "clapped"),
        ("clapped", "clapped"),
        ("clapping", "clapped"),
        ("claps", "clapped"),
        ("cling", "clung"),
        ("clinging", "clung"),
        ("clings", "clung"),
        ("clung", "clung"),
        ("come", "come"),
        ("comes", "come"),
        ("coming", "come"),
        ("continue", "continued"),
        ("continued", "continued"),
        ("continues", "continued"),
        ("continuing", "continued"),
        ("cost", "cost"),
        ("costing", "cost"),
        ("costs", "cost"),
        ("creche", "creched"),
        ("creched", "creched"),
        ("creches", "creched"),
        ("creching", "creched"),
        ("creep", "crept"),
        ("creeping", "crept"),
        ("creeps", "crept"),
        ("crept", "crept"),
        ("dare", "dared"),
        ("dared", "dared"),
        ("dares", "dared"),
        ("daring", "dared"),
        ("deal", "dealt"),
        ("dealing", "dealt"),
        ("deals", "dealt"),
        ("dealt", "dealt"),
        ("die", "died"),
        ("died", "died"),
        ("dies", "died"),
        ("dig", "dug"),
        ("digging", "dug"),
        ("digs", "dug"),
        ("dive", "dived"),
        ("dived", "dived"),
        ("dives", "dived"),
        ("diving", "dived"),
        ("douche", "douched"),
        ("douched", "douched"),
        ("douches", "douched"),
        ("douching", "douched"),
        ("drag", "dragged"),
        ("dragged", "dragged"),
        ("dragging", "dragged"),
        ("drags", "dragged"),
        ("drank", "drunk"),
        ("dream", "dreamed"),
        ("dreamed", "dreamed"),
        ("dreaming", "dreamed"),
        ("dreams", "dreamed"),
        ("drink", "drunk"),
        ("drinking", "drunk"),
        ("drinks", "drunk"),
        ("drive", "driven"),
        ("drives", "driven"),
        ("driving", "driven"),
        ("drove", "driven"),
        ("dug", "dug"),
        ("dwell", "dwelt"),
        ("dwelling", "dwelt"),
        ("dwells", "dwelt"),
        ("dwelt", "dwelt"),
        ("dying", "died"),
        ("eat", "eaten"),
        ("eating", "eaten"),
        ("eats", "eaten"),
        ("expect", "expected"),
        ("expected", "expected"),
        ("expecting", "expected"),
        ("expects", "expected"),
        ("fall", "fallen"),
        ("falling", "fallen"),
        ("falls", "fallen"),
        ("feel", "felt"),
        ("feeling", "felt"),
        ("feels", "felt"),
        ("fell", "fallen"),
        ("felt", "felt"),
        ("fight", "fought"),
        ("fighting", "fought"),
        ("fights", "fought"),
        ("find", "found"),
        ("finding", "found"),
        ("finds", "found"),
        ("fled", "fled"),
        ("flee", "fled"),
        ("fleeing", "fled"),
        ("flees", "fled"),
        ("flew", "flown"),
        ("flies", "flown"),
        ("fling", "flung"),
        ("flinging", "flung"),
        ("flings", "flung"),
        ("flung", "flung"),
        ("fly", "flown"),
        ("flying", "flown"),
        ("follow", "followed"),
        ("followed", "followed"),
        ("following", "followed"),
        ("follows", "followed"),
        ("forbade", "forbidden"),
        ("forbid", "forbidden"),
        ("forbidding", "forbidden"),
        ("forbids", "forbidden"),
        ("foresaw", "foreseen"),
        ("foresee", "foreseen"),
        ("foreseeing", "foreseen"),
        ("foresees", "foreseen"),
        ("foretell", "foretold"),
        ("foretelling", "foretold"),
        ("foretells", "foretold"),
        ("foretold", "foretold"),
        ("forgave", "forgiven"),
        ("forget", "forgotten"),
        ("forgets", "forgotten"),
        ("forgetting", "forgotten"),
        ("forgive", "forgiven"),
        ("forgives", "forgiven"),
        ("forgiving", "forgiven"),
        ("forgot", "forgotten"),
        ("forsake", "forsaken"),
        ("forsakes", "forsaken"),
        ("forsaking", "forsaken"),
        ("forsook", "forsaken"),
        ("fought", "fought"),
        ("found", "found"),
        ("gave", "given"),
        ("get", "gotten"),
        ("gets", "gotten"),
        ("getting", "gotten"),
        ("gild", "gilded"),
        ("gilded", "gilded"),
        ("gilding", "gilded"),
        ("gilds", "gilded"),
        ("give", "given"),
        ("gives", "given"),
        ("giving", "given"),
        ("go", "gone"),
        ("goes", "gone"),
        ("going", "gone"),
        ("got", "gotten"),
        ("grind", "ground"),
        ("grinding", "ground"),
        ("grinds", "ground"),
        ("ground", "ground"),
        ("had", "had"),
        ("happen", "happened"),
        ("happened", "happened"),
        ("happening", "happened"),
        ("happens", "happened"),
        ("has", "had"),
        ("have", "had"),
        ("having", "had"),
        ("held", "held"),
        ("help", "helped"),
        ("helped", "helped"),
        ("helping", "helped"),
        ("helps", "helped"),
        ("hew", "hewn"),
        ("hewed", "hewn"),
        ("hewing", "hewn"),
        ("hews", "hewn"),
        ("hit", "hit"),
        ("hits", "hit"),
        ("hitting", "hit"),
        ("hold", "held"),
        ("holding", "held"),
        ("holds", "held"),
        ("hurt", "hurt"),
        ("hurting", "hurt"),
        ("hurts", "hurt"),
        ("inlaid", "inlaid"),
        ("inlay", "inlaid"),
        ("inlaying", "inlaid"),
        ("inlays", "inlaid"),
        ("insist", "insisted"),
        ("insisted", "insisted"),
        ("insisting", "insisted"),
        ("insists", "insisted"),
        ("interlaid", "interlaid"),
        ("interlay", "interlaid"),
        ("interlaying", "interlaid"),
        ("interlays", "interlaid"),
        ("iris", "irised"),
        ("irised", "irised"),
        ("irises", "irised"),
        ("irising", "irised"),
        ("is", "been"),
        ("keep", "kept"),
        ("keeping", "kept"),
        ("keeps", "kept"),
        ("kept", "kept"),
        ("kill", "killed"),
        ("killed", "killed"),
        ("killing", "killed"),
        ("kills", "killed"),
        ("kneel", "knelt"),
        ("kneeling", "knelt"),
        ("kneels", "knelt"),
        ("knelt", "knelt"),
        ("knew", "known"),
        ("knit", "knitted"),
        ("knits", "knitted"),
        ("knitted", "knitted"),
        ("knitting", "knitted"),
        ("know", "known"),
        ("knowing", "known"),
        ("knows", "known"),
        ("laid", "laid"),
        ("lay", "lain"),
        ("laying", "laid"),
        ("lays", "laid"),
        ("lead", "led"),
        ("leading", "led"),
        ("leads", "led"),
        ("lean", "leaned"),
        ("leaned", "leaned"),
        ("leaning", "leaned"),
        ("leans", "leaned"),
        ("leap", "leapt"),
        ("leaping", "leapt"),
        ("leaps", "leapt"),
        ("leapt", "leapt"),
        ("learn", "learned"),
        ("learned", "learned"),
        ("learning", "learned"),
        ("learns", "learned"),
        ("leave", "left"),
        ("leaves", "left"),
        ("leaving", "left"),
        ("led", "led"),
        ("left", "left"),
        ("lie", "lain"),
        ("lies", "lain"),
        ("like", "liked"),
        ("liked", "liked"),
        ("likes", "liked"),
        ("liking", "liked"),
        ("live", "lived"),
        ("lived", "lived"),
        ("lives", "lived"),
        ("living", "lived"),
        ("look", "looked"),
        ("looked", "looked"),
        ("looking", "looked"),
        ("looks", "looked"),
        ("lose", "lost"),
        ("loses", "lost"),
        ("losing", "lost"),
        ("lost", "lost"),
        ("love", "loved"),
        ("loved", "loved"),
        ("loves", "loved"),
        ("loving", "loved"),
        ("lying", "lain"),
        ("mean", "meant"),
        ("meaning", "meant"),
        ("means", "meant"),
        ("meant", "meant"),
        ("meet", "met"),
        ("meeting", "met"),
        ("meets", "met"),
        ("menu", "menued"),
        ("menued", "menued"),
        ("menuing", "menued"),
        ("menus", "menued"),
        ("met", "met"),
        ("mislead", "misled"),
        ("misleading", "misled"),
        ("misleads", "misled"),
        ("misled", "misled"),
        ("mistake", "mistaken"),
        ("mistakes", "mistaken"),
        ("mistaking", "mistaken"),
        ("mistook", "mistaken"),
        ("misunderstand", "misunderstood"),
        ("misunderstanding", "misunderstood"),
        ("misunderstands", "misunderstood"),
        ("misunderstood", "misunderstood"),
        ("move", "moved"),
        ("moved", "moved"),
        ("moves", "moved"),
        ("moving", "moved"),
        ("need", "needed"),
        ("needed", "needed"),
        ("needing", "needed"),
        ("needs", "needed"),
        ("niche", "niched"),
        ("niched", "niched"),
        ("nicheing", "niched"),
        ("niches", "niched"),
        ("overdraw", "overdrawn"),
        ("overdrawing", "overdrawn"),
        ("overdraws", "overdrawn"),
        ("overdrew", "overdrawn"),
        ("overhear", "overheard"),
        ("overheard", "overheard"),
        ("overhearing", "overheard"),
        ("overhears", "overheard"),
        ("overtake", "overtaken"),
        ("overtakes", "overtaken"),
        ("overtaking", "overtaken"),
        ("overtook", "overtaken"),
        ("preset", "preset"),
        ("presets", "preset"),
        ("presetting", "preset"),
        ("prove", "proved"),
        ("proved", "proved"),
        ("proves", "proved"),
        ("provide", "provided"),
        ("provided", "provided"),
        ("provides", "provided"),
        ("providing", "provided"),
        ("proving", "proved"),
        ("psyche", "psyched"),
        ("psyched", "psyched"),
        ("psyches", "psyched"),
        ("psyching", "psyched"),
        ("put", "put"),
        ("puts", "put"),
        ("putting", "put"),
        ("quit", "quit"),
        ("quits", "quit"),
        ("quitting", "quit"),
        ("quiz", "quizzed"),
        ("quizzed", "quizzed"),
        ("quizzes", "quizzed"),
        ("quizzing", "quizzed"),
        ("ran", "run"),
        ("rang", "rung"),
        ("reach", "reached"),
        ("reached", "reached"),
        ("reaches", "reached"),
        ("reaching", "reached"),
        ("remain", "remained"),
        ("remained", "remained"),
        ("remaining", "remained"),
        ("remains", "remained"),
        ("remember", "remembered"),
        ("remembered", "remembered"),
        ("remembering", "remembered"),
        ("remembers", "remembered"),
        ("rend", "rent"),
        ("rending", "rent"),
        ("rends", "rent"),
        ("rent", "rent"),
        ("rid", "rid"),
        ("ridding", "rid"),
        ("ride", "ridden"),
        ("rides", "ridden"),
        ("riding", "ridden"),
        ("rids", "rid"),
        ("ring", "rung"),
        ("ringing", "rung"),
        ("rings", "rung"),
        ("rise", "risen"),
        ("rises", "risen"),
        ("rising", "risen"),
        ("rive", "riven"),
        ("rived", "riven"),
        ("rives", "riven"),
        ("riving", "riven"),
        ("rode", "ridden"),
        ("rose", "risen"),
        ("run", "run"),
        ("running", "run"),
        ("runs", "run"),
        ("sang", "sung"),
        ("sank", "sunk"),
        ("sat", "sat"),
        ("saw", "sawn"),
        ("sawed", "sawn"),
        ("sawing", "sawn"),
        ("saws", "sawn"),
        ("seek", "sought"),
        ("seeking", "sought"),
        ("seeks", "sought"),
        ("seem", "seemed"),
        ("seemed", "seemed"),
        ("seeming", "seemed"),
        ("seems", "seemed"),
        ("shake", "shaken"),
        ("shakes", "shaken"),
        ("shaking", "shaken"),
        ("shat", "shitted"),
        ("shave", "shaved"),
        ("shaved", "shaved"),
        ("shaves", "shaved"),
        ("shaving", "shaved"),
        ("shed", "shed"),
        ("shedding", "shed"),
        ("sheds", "shed"),
        ("shit", "shitted"),
        ("shits", "shitted"),
        ("shitting", "shitted"),
        ("shod", "shod"),
        ("shoe", "shod"),
        ("shoeing", "shod"),
        ("shoes", "shod"),
        ("shook", "shaken"),
        ("show", "shown"),
        ("showed", "shown"),
        ("showing", "shown"),
        ("shows", "shown"),
        ("shrank", "shrunk"),
        ("shrink", "shrunk"),
        ("shrinking", "shrunk"),
        ("shrinks", "shrunk"),
        ("sing", "sung"),
        ("singing", "sung"),
        ("sings", "sung"),
        ("sink", "sunk"),
        ("sinking", "sunk"),
        ("sinks", "sunk"),
        ("sit", "sat"),
        ("sits", "sat"),
        ("sitting", "sat"),
        ("ski", "skied"),
        ("skied", "skied"),
        ("skiing", "skied"),
        ("skis", "skied"),
        ("slay", "slain"),
        ("slaying", "slain"),
        ("slays", "slain"),
        ("slew", "slain"),
        ("slid", "slid"),
        ("slide", "slid"),
        ("slides", "slid"),
        ("sliding", "slid"),
        ("slink", "slunk"),
        ("slinking", "slunk"),
        ("slinks", "slunk"),
        ("slit", "slit"),
        ("slits", "slit"),
        ("slitting", "slit"),
        ("slunk", "slunk"),
        ("smell", "smelled"),
        ("smelled", "smelled"),
        ("smelling", "smelled"),
        ("smells", "smelled"),
        ("smite", "smitten"),
        ("smites", "smitten"),
        ("smiting", "smitten"),
        ("smote", "smitten"),
        ("sneak", "sneaked"),
        ("sneaked", "sneaked"),
        ("sneaking", "sneaked"),
        ("sneaks", "sneaked"),
        ("sought", "sought"),
        ("sow", "sown"),
        ("sowed", "sown"),
        ("sowing", "sown"),
        ("sows", "sown"),
        ("spat", "spat"),
        ("speak", "spoken"),
        ("speaking", "spoken"),
        ("speaks", "spoken"),
        ("sped", "sped"),
        ("speed", "sped"),
        ("speeding", "sped"),
        ("speeds", "sped"),
        ("spend", "spent"),
        ("spending", "spent"),
        ("spends", "spent"),
        ("spent", "spent"),
        ("spit", "spat"),
        ("spits", "spat"),
        ("spitting", "spat"),
        ("spoil", "spoiled"),
        ("spoiling", "spoiled"),
        ("spoils", "spoiled"),
        ("spoilt", "spoiled"),
        ("spoke", "spoken"),
        ("sprang", "sprung"),
        ("spring", "sprung"),
        ("springing", "sprung"),
        ("springs", "sprung"),
        ("stand", "stood"),
        ("standing", "stood"),
        ("stands", "stood"),
        ("stank", "stunk"),
        ("stave", "staved"),
        ("staved", "staved"),
        ("staves", "staved"),
        ("staving", "staved"),
        ("stay", "stayed"),
        ("stayed", "stayed"),
        ("staying", "stayed"),
        ("stays", "stayed"),
        ("steal", "stolen"),
        ("stealing", "stolen"),
        ("steals", "stolen"),
        ("sting", "stung"),
        ("stinging", "stung"),
        ("stings", "stung"),
        ("stink", "stunk"),
        ("stinking", "stunk"),
        ("stinks", "stunk"),
        ("stole", "stolen"),
        ("stood", "stood"),
        ("stop", "stopped"),
        ("stopped", "stopped"),
        ("stopping", "stopped"),
        ("stops", "stopped"),
        ("strew", "strewn"),
        ("strewed", "strewn"),
        ("strewing", "strewn"),
        ("strews", "strewn"),
        ("stride", "strode"),
        ("strides", "strode"),
        ("striding", "strode"),
        ("strip", "stripped"),
        ("stripped", "stripped"),
        ("stripping", "stripped"),
        ("strips", "stripped"),
        ("strive", "strived"),
        ("strives", "strived"),
        ("striving", "strived"),
        ("strode", "strode"),
        ("strove", "strived"),
        ("stung", "stung"),
        ("sublet", "sublet"),
        ("sublets", "sublet"),
        ("subletting", "sublet"),
        ("sunburn", "sunburned"),
        ("sunburned", "sunburned"),
        ("sunburning", "sunburned"),
        ("sunburns", "sunburned"),
        ("swam", "swum"),
        ("swear", "sworn"),
        ("swearing", "sworn"),
        ("swears", "sworn"),
        ("sweat", "sweated"),
        ("sweating", "sweated"),
        ("sweats", "sweated"),
        ("sweep", "swept"),
        ("sweeping", "swept"),
        ("sweeps", "swept"),
        ("swell", "swollen"),
        ("swelled", "swollen"),
        ("swelling", "swollen"),
        ("swells", "swollen"),
        ("swept", "swept"),
        ("swim", "swum"),
        ("swimming", "swum"),
        ("swims", "swum"),
        ("swing", "swung"),
        ("swinging", "swung"),
        ("swings", "swung"),
        ("swore", "sworn"),
        ("swung", "swung"),
        ("talk", "talked"),
        ("talked", "talked"),
        ("talking", "talked"),
        ("talks", "talked"),
        ("tear", "torn"),
        ("tearing", "torn"),
        ("tears", "torn"),
        ("thrive", "thrived"),
        ("thrived", "thrived"),
        ("thrives", "thrived"),
        ("thriving", "thrived"),
        ("thrust", "thrust"),
        ("thrusting", "thrust"),
        ("thrusts", "thrust"),
        ("tore", "torn"),
        ("tread", "trodden"),
        ("treading", "trodden"),
        ("treads", "trodden"),
        ("trod", "trodden"),
        ("undergo", "undergone"),
        ("undergoes", "undergone"),
        ("undergoing", "undergone"),
        ("understand", "understood"),
        ("understanding", "understood"),
        ("understands", "understood"),
        ("understood", "understood"),
        ("undertake", "undertaken"),
        ("undertakes", "undertaken"),
        ("undertaking", "undertaken"),
        ("undertook", "undertaken"),
        ("underwent", "undergone"),
        ("upset", "upset"),
        ("upsets", "upset"),
        ("upsetting", "upset"),
        ("vex", "vexed"),
        ("vexed", "vexed"),
        ("vexes", "vexed"),
        ("vexing", "vexed"),
        ("wait", "waited"),
        ("waited", "waited"),
        ("waiting", "waited"),
        ("waits", "waited"),
        ("wake", "woken"),
        ("wakes", "woken"),
        ("waking", "woken"),
        ("walk", "walked"),
        ("walked", "walked"),
        ("walking", "walked"),
        ("walks", "walked"),
        ("want", "wanted"),
        ("wanted", "wanted"),
        ("wanting", "wanted"),
        ("wants", "wanted"),
        ("was", "been"),
        ("watch", "watched"),
        ("watched", "watched"),
        ("watches", "watched"),
        ("watching", "watched"),
        ("wear", "worn"),
        ("wearing", "worn"),
        ("wears", "worn"),
        ("weep", "wept"),
        ("weeping", "wept"),
        ("weeps", "wept"),
        ("wend", "wended"),
        ("wended", "wended"),
        ("wending", "wended"),
        ("wends", "wended"),
        ("went", "gone"),
        ("wept", "wept"),
        ("were", "been"),
        ("win", "won"),
        ("winning", "won"),
        ("wins", "won"),
        ("withdraw", "withdrawn"),
        ("withdrawing", "withdrawn"),
        ("withdraws", "withdrawn"),
        ("withdrew", "withdrawn"),
        ("withheld", "withheld"),
        ("withhold", "withheld"),
        ("withholding", "withheld"),
        ("withholds", "withheld"),
        ("withstand", "withstood"),
        ("withstanding", "withstood"),
        ("withstands", "withstood"),
        ("withstood", "withstood"),
        ("woke", "woken"),
        ("won", "won"),
        ("wore", "worn"),
        ("wring", "wrung"),
        ("wringing", "wrung"),
        ("wrings", "wrung"),
        ("wrung", "wrung"),
    ]
    .iter()
    .cloned()
    .collect()
});

static PAST_PARTICIPLE_RECOGNIZER_REGEXES: Lazy<Vec<Regex>> = Lazy::new(|| {
    vec![
        Regex::new(r#"(?i)\A(.*)borne$"#).unwrap(),      // 0
        Regex::new(r#"(?i)\A(.*)bidden$"#).unwrap(),     // 1
        Regex::new(r#"(?i)\A(.*)bought$"#).unwrap(),     // 2
        Regex::new(r#"(?i)\A(.*)cast$"#).unwrap(),       // 3
        Regex::new(r#"(?i)\A(.*)clad$"#).unwrap(),       // 4
        Regex::new(r#"(?i)\A(.*)cut$"#).unwrap(),        // 5
        Regex::new(r#"(?i)\A(.*)done$"#).unwrap(),       // 6
        Regex::new(r#"(?i)\A(.*)drawn$"#).unwrap(),      // 7
        Regex::new(r#"(?i)\A(.*)fed$"#).unwrap(),        // 8
        Regex::new(r#"(?i)\A(.*)frozen$"#).unwrap(),     // 9
        Regex::new(r#"(?i)\A(.*)grown$"#).unwrap(),      // 10
        Regex::new(r#"(?i)\A(.*)hung$"#).unwrap(),       // 11
        Regex::new(r#"(?i)\A(.*)shorn$"#).unwrap(),      // 12
        Regex::new(r#"(?i)\A(.*)heard$"#).unwrap(),      // 13
        Regex::new(r#"(?i)\A(.*)hidden$"#).unwrap(),     // 14
        Regex::new(r#"(?i)\A(.*)input$"#).unwrap(),      // 15
        Regex::new(r#"(?i)\A(.*)knitted$"#).unwrap(),    // 16
        Regex::new(r#"(?i)\A(.*)lent$"#).unwrap(),       // 17
        Regex::new(r#"(?i)\A(.*)let$"#).unwrap(),        // 18
        Regex::new(r#"(?i)\A(.*)lit$"#).unwrap(),        // 19
        Regex::new(r#"(?i)\A(.*)made$"#).unwrap(),       // 20
        Regex::new(r#"(?i)\A(.*)mown$"#).unwrap(),       // 21
        Regex::new(r#"(?i)\A(.*)paid$"#).unwrap(),       // 22
        Regex::new(r#"(?i)\A(.*)read$"#).unwrap(),       // 23
        Regex::new(r#"(?i)\A(.*)said$"#).unwrap(),       // 24
        Regex::new(r#"(?i)\A(.*)seen$"#).unwrap(),       // 25
        Regex::new(r#"(?i)\A(.*)sold$"#).unwrap(),       // 26
        Regex::new(r#"(?i)\A(.*)sent$"#).unwrap(),       // 27
        Regex::new(r#"(?i)\A(.*)set$"#).unwrap(),        // 28
        Regex::new(r#"(?i)\A(.*)sewn$"#).unwrap(),       // 29
        Regex::new(r#"(?i)\A(.*)shone$"#).unwrap(),      // 30
        Regex::new(r#"(?i)\A(.*)shot$"#).unwrap(),       // 31
        Regex::new(r#"(?i)\A(.*)shut$"#).unwrap(),       // 32
        Regex::new(r#"(?i)\A(.*)slept$"#).unwrap(),      // 33
        Regex::new(r#"(?i)\A(.*)slung$"#).unwrap(),      // 34
        Regex::new(r#"(?i)\A(.*)spun$"#).unwrap(),       // 35
        Regex::new(r#"(?i)\A(.*)split$"#).unwrap(),      // 36
        Regex::new(r#"(?i)\A(.*)spread$"#).unwrap(),     // 37
        Regex::new(r#"(?i)\A(.*)stuck$"#).unwrap(),      // 38
        Regex::new(r#"(?i)\A(.*)struck$"#).unwrap(),     // 39
        Regex::new(r#"(?i)\A(.*)strung$"#).unwrap(),     // 40
        Regex::new(r#"(?i)\A(.*)taken$"#).unwrap(),      // 41
        Regex::new(r#"(?i)\A(.*)taught$"#).unwrap(),     // 42
        Regex::new(r#"(?i)\A(.*)told$"#).unwrap(),       // 43
        Regex::new(r#"(?i)\A(.*)thought$"#).unwrap(),    // 44
        Regex::new(r#"(?i)\A(.*)thrown$"#).unwrap(),     // 45
        Regex::new(r#"(?i)\A(.*)tried$"#).unwrap(),      // 46
        Regex::new(r#"(?i)\A(.*)woven$"#).unwrap(),      // 47
        Regex::new(r#"(?i)\A(.*)wed$"#).unwrap(),        // 48
        Regex::new(r#"(?i)\A(.*)wetted$"#).unwrap(),     // 49
        Regex::new(r#"(?i)\A(.*)wound$"#).unwrap(),      // 50
        Regex::new(r#"(?i)\A(.*)written$"#).unwrap(),    // 51
        Regex::new(r#"(?i)\A(.*)added$"#).unwrap(),      // 52
        Regex::new(r#"(?i)\A(.*)alighted$"#).unwrap(),   // 53
        Regex::new(r#"(?i)\A(.*)allowed$"#).unwrap(),    // 54
        Regex::new(r#"(?i)\A(.*)appeared$"#).unwrap(),   // 55
        Regex::new(r#"(?i)\A(.*)believed$"#).unwrap(),   // 56
        Regex::new(r#"(?i)\A(.*)called$"#).unwrap(),     // 57
        Regex::new(r#"(?i)\A(.*)clothed$"#).unwrap(),    // 58
        Regex::new(r#"(?i)\A(.*)considered$"#).unwrap(), // 59
        Regex::new(r#"(?i)\A(.*)created$"#).unwrap(),    // 60
        Regex::new(r#"(?i)\A(.*)fitted$"#).unwrap(),     // 61
        Regex::new(r#"(?i)\A(.*)included$"#).unwrap(),   // 62
        Regex::new(r#"(?i)\A(.*)melted$"#).unwrap(),     // 63
        Regex::new(r#"(?i)\A(.*)offered$"#).unwrap(),    // 64
        Regex::new(r#"(?i)\A(.*)opened$"#).unwrap(),     // 65
        Regex::new(r#"(?i)\A(.*)played$"#).unwrap(),     // 66
        Regex::new(r#"(?i)\A(.*)served$"#).unwrap(),     // 67
        Regex::new(r#"(?i)\A(.*)smelled$"#).unwrap(),    // 68
        Regex::new(r#"(?i)\A(.*)spelled$"#).unwrap(),    // 69
        Regex::new(r#"(?i)\A(.*)spilled$"#).unwrap(),    // 70
        Regex::new(r#"(?i)\A(.*)started$"#).unwrap(),    // 71
        Regex::new(r#"(?i)\A(.*)turned$"#).unwrap(),     // 72
        Regex::new(r#"(?i)\A(.*)used$"#).unwrap(),       // 73
        Regex::new(r#"(?i)\A(.*)worked$"#).unwrap(),     // 74
        Regex::new(r#"(?i)\A(.+[aeiou])yed$"#).unwrap(), // 75
        Regex::new(r#"(?i)\A(.+[aiy])nxed$"#).unwrap(),  // 76
        Regex::new(r#"(?i)\A(.+)cepsed$"#).unwrap(),     // 77
        Regex::new(r#"(?i)\A(.+[cs])hed$"#).unwrap(),    // 78
        Regex::new(r#"(?i)\A(.+)oed$"#).unwrap(),        // 79
        Regex::new(r#"(?i)\A(.+)ieued$"#).unwrap(),      // 80
        Regex::new(r#"(?i)\A(.+)eaued$"#).unwrap(),      // 81
        Regex::new(r#"(?i)\A(.+)ssed$"#).unwrap(),       // 82
        Regex::new(r#"(?i)\A(.+)trixed$"#).unwrap(),     // 83
        Regex::new(r#"(?i)\A(.+)xed$"#).unwrap(),        // 84
        Regex::new(r#"(?i)\A(.+)zzed$"#).unwrap(),       // 85
        Regex::new(r#"(?i)\A(.+)zed$"#).unwrap(),        // 86
        Regex::new(r#"(?i)\A(.+)ued$"#).unwrap(),        // 87
        Regex::new(r#"(?i)\A(.+)ied$"#).unwrap(),        // 88
        Regex::new(r#"(?i)\A(.+)eed$"#).unwrap(),        // 89
        Regex::new(r#"(?i)\A(.+)yed$"#).unwrap(),        // 90
        Regex::new(r#"(?i)\A(.+[au])ed$"#).unwrap(),     // 91
        Regex::new(r#"(?i)\A(.+[^b])ied$"#).unwrap(),    // 92
        Regex::new(r#"(?i)\A(.+)ied$"#).unwrap(),        // 93
        Regex::new(r#"(?i)\A(.+)yed$"#).unwrap(),        // 94
        Regex::new(r#"(?i)\A(.+[^e])ed$"#).unwrap(),     // 95
        Regex::new(r#"(?i)\A(.+)ered$"#).unwrap(),       // 96
    ]
});

/// Converts a verb to its past participle form, like "(I have) eaten, "(I
/// have) run", or "(I have) walked". Whenever possible, this function returns
/// static data or a reference to the string it was given, rather than
/// allocating a new `String`.
///
/// The case of the returned word will not necessarily match the case of the
/// original word, and when given shout case like "WALK" you may get odd
/// casing results like "WALKed". You are encouraged to always pass words in
/// their poroper case, either lower case or title case as appropriate.
pub fn convert_to_past_participle(word: &str) -> Cow<'_, str> {
    #[cfg(feature = "debug")]
    println!("convert_to_past_participle({})", word);

    if word.is_empty() {
        #[cfg(feature = "debug")]
        println!("  word is empty");
        return Cow::Borrowed("");
    }

    if let Some(past) = maybe_convert_to_past_participle(word) {
        #[cfg(feature = "debug")]
        println!(
            "  word '{}' converted to past participle as '{}'",
            word, past
        );
        return past;
    }

    let root = convert_to_plural(word);
    #[cfg(feature = "debug")]
    println!(
        "  trying root (plural) of word '{}', which is '{}'",
        word, root
    );
    if let Some(past) = maybe_convert_to_past_participle(&root) {
        #[cfg(feature = "debug")]
        println!(
            "  plural word '{}' converted to past participle as '{}'",
            root, past
        );
        // Since convert_to_plural may have returned a Cow::Borrowed using
        // &root, we can't just return a Cow::Borrowed which borrows that
        // data, as `root` is about to go out of scope.
        return Cow::Owned(past.into_owned());
    }

    #[cfg(feature = "debug")]
    println!(
        "  appending 'ed' to truncated word '{}'",
        truncate(root.as_ref())
    );
    Cow::Owned(format!("{}ed", truncate(root.as_ref())))
}

fn maybe_convert_to_past_participle(word: &str) -> Option<Cow<'_, str>> {
    if let Some(p) = PAST_PARTICIPLE_OF.get(word) {
        #[cfg(feature = "debug")]
        println!("  found word '{}' in PAST_PARTICIPLE_OF", word);
        return Some(Cow::Borrowed(p));
    }
    if let Some(p) = PAST_PARTICIPLE_OF.get(word.to_lowercase().as_str()) {
        #[cfg(feature = "debug")]
        println!("  found lc word '{}' in PAST_PARTICIPLE_OF", word);
        return Some(Cow::Borrowed(p));
    }
    if word.len() > 1 {
        let tc_word = to_titlecase(word);
        if let Some(p) = PAST_PARTICIPLE_OF.get(tc_word.as_str()) {
            #[cfg(feature = "debug")]
            println!("  found tc word '{}' in PAST_PARTICIPLE_OF", word);
            return Some(Cow::Borrowed(p));
        }
    }

    // (?i)\A(.*)bears$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[0].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}borne"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 0) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[0], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)bear$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[0].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}borne"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 0) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[0], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)bids$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[1].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}bidden"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 1) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[1], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)bid$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[1].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}bidden"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 1) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[1], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)buys$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[2].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}bought"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 2) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[2], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)buy$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[2].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}bought"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 2) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[2], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)casts$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[3].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}cast"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 3) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[3], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)cast$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[3].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}cast"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 3) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[3], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)clads$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[4].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}clad"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 4) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[4], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)clad$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[4].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}clad"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 4) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[4], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)cuts$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[5].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}cut"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 5) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[5], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)cut$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[5].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}cut"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 5) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[5], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)does$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[6].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}done"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 6) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[6], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)do$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[6].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}done"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 6) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[6], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)draws$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[7].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}drawn"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 7) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[7], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)draw$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[7].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}drawn"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 7) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[7], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)feeds$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[8].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}fed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 8) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[8], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)feed$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[8].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}fed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 8) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[8], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)freezes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[9].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}frozen"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 9) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[9], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)freeze$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[9].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}frozen"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 9) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[9], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)grows$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[10].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}grown"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 10) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[10], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)grow$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[10].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}grown"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 10) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[10], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)hangs$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[11].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}hung"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 11) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[11], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)hang$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[11].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}hung"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 11) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[11], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)shears$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[12].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}shorn"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 12) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[12], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)shear$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[12].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}shorn"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 12) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[12], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)hears$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[13].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}heard"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 13) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[13], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)hear$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[13].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}heard"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 13) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[13], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)hides$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[14].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}hidden"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 14) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[14], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)hide$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[14].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}hidden"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 14) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[14], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)inputs$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[15].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}input"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 15) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[15], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)input$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[15].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}input"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 15) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[15], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)knits$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[16].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}knitted"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 16) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[16], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)knit$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[16].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}knitted"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 16) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[16], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)lends$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[17].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}lent"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 17) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[17], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)lend$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[17].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}lent"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 17) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[17], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)lets$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[18].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}let"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 18) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[18], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)let$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[18].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}let"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 18) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[18], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)lights$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[19].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}lit"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 19) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[19], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)light$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[19].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}lit"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 19) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[19], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)makes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[20].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}made"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 20) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[20], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)make$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[20].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}made"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 20) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[20], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)mows$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[21].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}mown"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 21) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[21], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)mow$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[21].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}mown"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 21) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[21], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)pays$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[22].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}paid"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 22) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[22], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)pay$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[22].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}paid"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 22) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[22], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)reads$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[23].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}read"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 23) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[23], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)read$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[23].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}read"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 23) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[23], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)says$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[24].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}said"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 24) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[24], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)say$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[24].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}said"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 24) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[24], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)sees$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[25].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}seen"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 25) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[25], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)see$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[25].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}seen"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 25) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[25], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)sells$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[26].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}sold"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 26) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[26], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)sell$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[26].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}sold"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 26) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[26], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)sends$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[27].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}sent"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 27) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[27], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)send$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[27].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}sent"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 27) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[27], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)sets$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[28].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}set"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 28) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[28], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)set$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[28].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}set"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 28) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[28], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)sews$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[29].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}sewn"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 29) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[29], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)sew$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[29].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}sewn"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 29) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[29], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)shines$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[30].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}shone"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 30) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[30], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)shine$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[30].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}shone"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 30) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[30], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)shoots$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[31].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}shot"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 31) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[31], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)shoot$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[31].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}shot"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 31) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[31], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)shuts$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[32].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}shut"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 32) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[32], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)shut$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[32].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}shut"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 32) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[32], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)sleeps$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[33].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}slept"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 33) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[33], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)sleep$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[33].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}slept"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 33) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[33], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)slings$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[34].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}slung"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 34) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[34], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)sling$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[34].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}slung"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 34) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[34], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)spins$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[35].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}spun"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 35) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[35], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)spin$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[35].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}spun"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 35) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[35], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)splits$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[36].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}split"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 36) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[36], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)split$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[36].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}split"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 36) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[36], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)spreads$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[37].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}spread"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 37) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[37], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)spread$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[37].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}spread"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 37) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[37], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)sticks$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[38].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}stuck"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 38) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[38], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)stick$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[38].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}stuck"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 38) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[38], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)strikes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[39].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}struck"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 39) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[39], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)strike$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[39].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}struck"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 39) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[39], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)strings$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[40].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}strung"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 40) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[40], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)string$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[40].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}strung"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 40) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[40], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)takes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[41].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}taken"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 41) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[41], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)take$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[41].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}taken"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 41) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[41], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)teaches$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[42].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}taught"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 42) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[42], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)teach$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[42].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}taught"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 42) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[42], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)tells$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[43].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}told"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 43) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[43], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)tell$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[43].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}told"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 43) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[43], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)thinks$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[44].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}thought"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 44) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[44], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)think$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[44].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}thought"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 44) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[44], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)throws$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[45].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}thrown"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 45) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[45], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)throw$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[45].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}thrown"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 45) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[45], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)tries$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[46].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}tried"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 46) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[46], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)try$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[46].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}tried"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 46) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[46], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)weaves$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[47].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}woven"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 47) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[47], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)weave$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[47].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}woven"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 47) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[47], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)weds$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[48].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}wed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 48) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[48], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)wed$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[48].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}wed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 48) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[48], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)wets$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[49].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}wetted"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 49) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[49], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)wet$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[49].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}wetted"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 49) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[49], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)winds$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[50].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}wound"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 50) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[50], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)wind$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[50].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}wound"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 50) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[50], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)writes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[51].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}written"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 51) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[51], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)write$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[51].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}written"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 51) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[51], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)adds$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[52].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}added"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 52) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[52], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)add$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[52].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}added"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 52) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[52], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)alights$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[53].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}alighted"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 53) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[53], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)alight$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[53].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}alighted"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 53) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[53], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)allows$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[54].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}allowed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 54) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[54], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)allow$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[54].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}allowed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 54) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[54], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)appears$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[55].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}appeared"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 55) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[55], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)appear$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[55].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}appeared"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 55) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[55], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)believes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[56].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}believed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 56) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[56], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)believe$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[56].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}believed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 56) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[56], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)calls$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[57].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}called"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 57) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[57], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)call$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[57].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}called"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 57) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[57], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)clothes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[58].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}clothed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 58) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[58], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)clothe$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[58].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}clothed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 58) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[58], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)considers$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[59].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}considered"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 59) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[59], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)consider$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[59].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}considered"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 59) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[59], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)creates$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[60].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}created"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 60) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[60], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)create$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[60].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}created"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 60) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[60], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)fits$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[61].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}fitted"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 61) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[61], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)fit$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[61].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}fitted"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 61) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[61], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)includes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[62].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}included"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 62) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[62], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)include$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[62].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}included"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 62) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[62], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)melts$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[63].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}melted"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 63) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[63], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)melt$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[63].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}melted"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 63) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[63], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)offers$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[64].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}offered"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 64) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[64], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)offer$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[64].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}offered"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 64) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[64], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)opens$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[65].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}opened"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 65) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[65], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)open$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[65].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}opened"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 65) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[65], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)plays$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[66].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}played"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 66) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[66], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)play$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[66].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}played"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 66) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[66], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)serves$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[67].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}served"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 67) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[67], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)serve$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[67].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}served"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 67) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[67], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)smells$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[68].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}smelled"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 68) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[68], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)smell$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[68].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}smelled"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 68) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[68], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)spells$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[69].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}spelled"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 69) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[69], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)spell$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[69].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}spelled"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 69) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[69], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)spills$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[70].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}spilled"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 70) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[70], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)spill$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[70].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}spilled"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 70) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[70], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)starts$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[71].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}started"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 71) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[71], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)start$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[71].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}started"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 71) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[71], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)turns$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[72].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}turned"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 72) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[72], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)turn$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[72].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}turned"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 72) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[72], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)uses$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[73].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}used"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 73) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[73], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)use$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[73].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}used"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 73) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[73], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)works$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[74].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}worked"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 74) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[74], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.*)work$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[74].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}worked"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 74) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[74], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+[aeiou])ys$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[76].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}yed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 76) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[76], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+[aeiou])y$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[76].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}yed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 76) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[76], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+[aiy])nxes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[77].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}nxed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 77) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[77], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+[aiy])nx$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[77].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}nxed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 77) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[77], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)ceps$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[78].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}cepsed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 78) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[78], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)ceps$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[78].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}cepsed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 78) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[78], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+[cs])hes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[79].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}hed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 79) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[79], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+[cs])h$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[79].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}hed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 79) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[79], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)oes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[80].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}oed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 80) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[80], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)oe$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[80].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}oed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 80) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[80], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)ieus$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[81].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ieued"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 81) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[81], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)ieu$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[81].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ieued"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 81) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[81], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)eaus$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[82].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}eaued"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 82) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[82], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)eau$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[82].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}eaued"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 82) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[82], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)sses$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[83].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ssed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 83) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[83], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)ss$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[83].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ssed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 83) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[83], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)trixes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[84].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}trixed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 84) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[84], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)trix$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[84].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}trixed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 84) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[84], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)xes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[85].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}xed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 85) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[85], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)x$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[85].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}xed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 85) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[85], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)zzes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[86].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}zzed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 86) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[86], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)zz$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[86].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}zzed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 86) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[86], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)zes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[87].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}zed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 87) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[87], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)ze$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[87].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}zed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 87) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[87], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)ues$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[88].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ued"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 88) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[88], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)ue$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[88].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ued"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 88) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[88], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)is$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[89].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ied"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 89) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[89], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)i$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[89].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ied"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 89) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[89], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)ees$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[90].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}eed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 90) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[90], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)ee$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[90].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}eed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 90) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[90], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)yes$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[91].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}yed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 91) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[91], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)ye$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[91].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}yed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 91) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[91], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+[au])es$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[92].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 92) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[92], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+[au])e$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[92].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 92) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[92], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+[^b])is$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[93].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ied"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 93) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[93], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+[^b])i$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[93].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ied"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 93) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[93], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)ies$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[94].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ied"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 94) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[94], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)y$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[94].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ied"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 94) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[94], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)ys$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[95].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}yed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 95) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[95], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)y$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[95].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}yed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 95) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[95], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+[^e])es$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[96].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 96) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[96], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+[^e])e$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[96].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ed"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 96) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[96], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)ers$
    if let Some(caps) = SINGULAR_RECOGNIZER_REGEXES[97].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ered"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 97) and became {}"#,
            word, SINGULAR_RECOGNIZER_REGEXES[97], new_word
        );
        return Some(Cow::Owned(new_word));
    }
    // (?i)\A(.+)er$
    if let Some(caps) = PLURAL_RECOGNIZER_REGEXES[97].captures(word) {
        let mut new_word = String::new();
        caps.expand(r#"${1}ered"#, &mut new_word);
        #[cfg(feature = "debug")]
        println!(
            r#"  word '{}' matched regex {:?} (idx 97) and became {}"#,
            word, PLURAL_RECOGNIZER_REGEXES[97], new_word
        );
        return Some(Cow::Owned(new_word));
    }

    if is_past_participle(word) {
        #[cfg(feature = "debug")]
        println!("  word '{}' is already past participle", word);
        return Some(Cow::Borrowed(word));
    }

    #[cfg(feature = "debug")]
    println!(
        "  word '{}' does not have a custom conversion to past participle",
        word
    );
    None
}

static TRUNCATIONS: Lazy<Vec<(Regex, Option<&str>)>> = Lazy::new(|| {
    vec![
        (Regex::new(r"(?i)(.+)ie$").unwrap(), Some("$1y")),
        (Regex::new(r"(?i)(.+)ue$").unwrap(), Some("$1u")),
        (Regex::new(r"(?i)(.+[auy])e$").unwrap(), Some("$1")),
        (Regex::new(r"(?i)ski$").unwrap(), None),
        (Regex::new(r"(?i)(.+)[^b]i$").unwrap(), Some("$1")),
        (Regex::new(r"(?i)([^e])e$").unwrap(), Some("$1")),
        (Regex::new(r"(?i)er$").unwrap(), None),
        (
            Regex::new(r"(?i)(.*[bdghklmnprstz][o]([n]))$").unwrap(),
            Some("$1"),
        ),
        (
            Regex::new(r"(?i)(.*[^aeiou][aeiouy]([bcdlgmnprstv]))$").unwrap(),
            Some("$1$2"),
        ),
        (Regex::new(r"(?i)(.+)e$").unwrap(), Some("$1")),
    ]
});

fn truncate(word: &str) -> Cow<'_, str> {
    for pair in TRUNCATIONS.iter() {
        if let Some(caps) = pair.0.captures(word) {
            return match pair.1 {
                Some(replacement) => {
                    let mut new_word = String::new();
                    caps.expand(replacement, &mut new_word);
                    Cow::Owned(new_word)
                }
                None => Cow::Borrowed(word),
            };
        }
    }

    Cow::Borrowed(word)
}

static IS_PLURAL: Lazy<HashSet<&'static str>> = Lazy::new(|| {
    [
        "abide",
        "ache",
        "are",
        "arise",
        "ask",
        "avalanche",
        "awake",
        "beat",
        "become",
        "beget",
        "begin",
        "behold",
        "bellyache",
        "bend",
        "bet",
        "bind",
        "bite",
        "bleed",
        "blitz",
        "blow",
        "break",
        "breed",
        "bring",
        "build",
        "burn",
        "burst",
        "bust",
        "cache",
        "can",
        "catch",
        "change",
        "choose",
        "clap",
        "cling",
        "come",
        "continue",
        "cost",
        "could",
        "creche",
        "creep",
        "dare",
        "deal",
        "die",
        "dig",
        "dive",
        "dive",
        "douche",
        "drag",
        "dream",
        "drink",
        "drive",
        "dwell",
        "eat",
        "expect",
        "fall",
        "feel",
        "fight",
        "find",
        "flee",
        "fling",
        "fly",
        "follow",
        "forbid",
        "foresee",
        "foretell",
        "forget",
        "forgive",
        "forsake",
        "get",
        "gild",
        "give",
        "go",
        "grind",
        "happen",
        "have",
        "help",
        "hew",
        "hit",
        "hold",
        "hurt",
        "inlay",
        "insist",
        "interlay",
        "iris",
        "keep",
        "kill",
        "kneel",
        "knit",
        "know",
        "lay",
        "lead",
        "lean",
        "lean",
        "leap",
        "learn",
        "leave",
        "lie",
        "like",
        "live",
        "look",
        "lose",
        "love",
        "may",
        "mean",
        "meet",
        "menu",
        "might",
        "mislead",
        "mistake",
        "misunderstand",
        "move",
        "must",
        "need",
        "niche",
        "ought",
        "overdraw",
        "overhear",
        "overtake",
        "preset",
        "prove",
        "prove",
        "provide",
        "psyche",
        "put",
        "quit",
        "quiz",
        "reach",
        "remain",
        "remember",
        "rend",
        "rid",
        "ride",
        "ring",
        "rise",
        "rive",
        "run",
        "saw",
        "seek",
        "seem",
        "shake",
        "shall",
        "shave",
        "shed",
        "shit",
        "shoe",
        "should",
        "show",
        "shrink",
        "sing",
        "sink",
        "sit",
        "ski",
        "slay",
        "slide",
        "slink",
        "slit",
        "smell",
        "smite",
        "sneak",
        "sow",
        "speak",
        "speed",
        "spend",
        "spit",
        "spoil",
        "spring",
        "stand",
        "stave",
        "stay",
        "steal",
        "sting",
        "stink",
        "stop",
        "strew",
        "stride",
        "strip",
        "strive",
        "sublet",
        "sunburn",
        "swear",
        "sweat",
        "sweep",
        "swell",
        "swim",
        "swing",
        "talk",
        "tear",
        "thrive",
        "thrust",
        "tread",
        "undergo",
        "understand",
        "undertake",
        "upset",
        "vex",
        "wait",
        "wake",
        "walk",
        "want",
        "watch",
        "wear",
        "weep",
        "wend",
        "were",
        "will",
        "win",
        "withdraw",
        "withhold",
        "withstand",
        "would",
        "wring",
    ]
    .iter()
    .cloned()
    .collect()
});

/// Returns true or false indicating whether a verb is plural.
pub fn is_plural<A: AsRef<str>>(word: A) -> bool {
    let word = word.as_ref();
    #[cfg(feature = "debug")]
    println!("is_plural({})", word);

    if IS_PLURAL.contains(word) {
        #[cfg(feature = "debug")]
        println!("  found '{}' in IS_PLURAL", word);
        return true;
    }
    let lc_word = word.to_lowercase();
    if IS_PLURAL.contains(&*lc_word) {
        #[cfg(feature = "debug")]
        println!("  found lc '{}' in IS_PLURAL", word);
        return true;
    }
    let tc_word = if word.len() > 1 {
        Some(to_titlecase(word))
    } else {
        None
    };
    if let Some(tc_word) = &tc_word {
        if IS_PLURAL.contains(tc_word.as_str()) {
            #[cfg(feature = "debug")]
            println!("  found tc '{}' in IS_PLURAL", word);
            return true;
        }
    }

    if IS_SINGULAR.contains(word) {
        #[cfg(feature = "debug")]
        println!("  found '{}' in IS_SINGULAR", word);
        return false;
    }
    if IS_SINGULAR.contains(&*lc_word) {
        #[cfg(feature = "debug")]
        println!("  found lc '{}' in IS_SINGULAR", word);
        return false;
    }
    if let Some(tc_word) = &tc_word {
        if IS_SINGULAR.contains(tc_word.as_str()) {
            #[cfg(feature = "debug")]
            println!("  found tc '{}' in IS_SINGULAR", word);
            return false;
        }
    }

    for re in PLURAL_RECOGNIZER_REGEXES.iter() {
        if re.is_match(word) {
            #[cfg(feature = "debug")]
            println!("  word '{}' matched plural recognizer regex {:?}", word, re);
            return true;
        }
    }

    false
}

static IS_SINGULAR: Lazy<HashSet<&'static str>> = Lazy::new(|| {
    [
        "abides",
        "aches",
        "am",
        "are",
        "arises",
        "asks",
        "avalanches",
        "awakes",
        "beats",
        "becomes",
        "begets",
        "begins",
        "beholds",
        "bellyaches",
        "bends",
        "bets",
        "binds",
        "bites",
        "bleeds",
        "blitzes",
        "blows",
        "breaks",
        "breeds",
        "brings",
        "builds",
        "burns",
        "bursts",
        "busts",
        "caches",
        "can",
        "catches",
        "changes",
        "chooses",
        "claps",
        "clings",
        "comes",
        "continues",
        "costs",
        "could",
        "creches",
        "creeps",
        "dares",
        "deals",
        "dies",
        "digs",
        "dives",
        "dives",
        "douches",
        "drags",
        "dreams",
        "drinks",
        "drives",
        "dwells",
        "eats",
        "expects",
        "falls",
        "feels",
        "fights",
        "finds",
        "flees",
        "flies",
        "flings",
        "follows",
        "forbids",
        "foresees",
        "foretells",
        "forgets",
        "forgives",
        "forsakes",
        "gets",
        "gilds",
        "gives",
        "goes",
        "grinds",
        "happens",
        "has",
        "helps",
        "hews",
        "hits",
        "holds",
        "hurts",
        "inlays",
        "insists",
        "interlays",
        "irises",
        "is",
        "keeps",
        "kills",
        "kneels",
        "knits",
        "knows",
        "lays",
        "leads",
        "leans",
        "leans",
        "leaps",
        "learns",
        "leaves",
        "lies",
        "likes",
        "lives",
        "looks",
        "loses",
        "loves",
        "may",
        "means",
        "meets",
        "menus",
        "might",
        "misleads",
        "mistakes",
        "misunderstands",
        "moves",
        "must",
        "needs",
        "niches",
        "ought",
        "overdraws",
        "overhears",
        "overtakes",
        "presets",
        "proves",
        "proves",
        "provides",
        "psyches",
        "puts",
        "quits",
        "quizzes",
        "reaches",
        "remains",
        "remembers",
        "rends",
        "rides",
        "rids",
        "rings",
        "rises",
        "rives",
        "runs",
        "saws",
        "seeks",
        "seems",
        "shakes",
        "shall",
        "shaves",
        "sheds",
        "shits",
        "shoes",
        "should",
        "shows",
        "shrinks",
        "sings",
        "sinks",
        "sits",
        "skis",
        "slays",
        "slides",
        "slinks",
        "slits",
        "smells",
        "smites",
        "sneaks",
        "sows",
        "speaks",
        "speeds",
        "spends",
        "spits",
        "spoils",
        "springs",
        "stands",
        "staves",
        "stays",
        "steals",
        "stings",
        "stinks",
        "stops",
        "strews",
        "strides",
        "strips",
        "strives",
        "sublets",
        "sunburns",
        "swears",
        "sweats",
        "sweeps",
        "swells",
        "swims",
        "swings",
        "talks",
        "tears",
        "thrives",
        "thrusts",
        "treads",
        "undergoes",
        "understands",
        "undertakes",
        "upsets",
        "vexes",
        "waits",
        "wakes",
        "walks",
        "wants",
        "was",
        "watches",
        "wears",
        "weeps",
        "wends",
        "will",
        "wins",
        "withdraws",
        "withholds",
        "withstands",
        "would",
        "wrings",
    ]
    .iter()
    .cloned()
    .collect()
});

/// Returns true or false indicating whether a verb is singular.
pub fn is_singular<A: AsRef<str>>(word: A) -> bool {
    let word = word.as_ref();
    #[cfg(feature = "debug")]
    println!("is_singular");

    if IS_SINGULAR.contains(word) {
        #[cfg(feature = "debug")]
        println!("  found '{}' in IS_SINGULAR", word);
        return true;
    }
    let lc_word = word.to_lowercase();
    if IS_SINGULAR.contains(&*lc_word) {
        #[cfg(feature = "debug")]
        println!("  found lc '{}' in IS_SINGULAR", word);
        return true;
    }
    let tc_word = if word.len() > 1 {
        Some(to_titlecase(word))
    } else {
        None
    };
    if let Some(tc_word) = &tc_word {
        if IS_SINGULAR.contains(tc_word.as_str()) {
            #[cfg(feature = "debug")]
            println!("  found tc '{}' in IS_SINGULAR", word);
            return true;
        }
    }

    if IS_PLURAL.contains(word) {
        #[cfg(feature = "debug")]
        println!("  found '{}' in IS_PLURAL", word);
        return false;
    }
    if IS_PLURAL.contains(&*lc_word) {
        #[cfg(feature = "debug")]
        println!("  found lc '{}' in IS_PLURAL", word);
        return false;
    }
    if let Some(tc_word) = &tc_word {
        if IS_PLURAL.contains(tc_word.as_str()) {
            #[cfg(feature = "debug")]
            println!("  found tc '{}' in IS_PLURAL", word);
            return false;
        }
    }

    for re in SINGULAR_RECOGNIZER_REGEXES.iter() {
        if re.is_match(word) {
            #[cfg(feature = "debug")]
            println!(
                "  word '{}' matched singular recognizer regex {:?}",
                word, re,
            );
            return true;
        }
    }

    #[cfg(feature = "debug")]
    println!("  returning !is_plural({})", word);
    !is_plural(word)
}

static IS_PAST: Lazy<HashSet<&'static str>> = Lazy::new(|| {
    [
        "abided",
        "ached",
        "arose",
        "asked",
        "ate",
        "avalanched",
        "awoke",
        "beat",
        "became",
        "began",
        "begot",
        "beheld",
        "bellyached",
        "bent",
        "bet",
        "bit",
        "bled",
        "blew",
        "blitzed",
        "bound",
        "bred",
        "broke",
        "brought",
        "built",
        "burnt",
        "burst",
        "bust",
        "cached",
        "came",
        "caught",
        "changed",
        "chose",
        "clapped",
        "clung",
        "continued",
        "cost",
        "could",
        "creched",
        "crept",
        "dared",
        "dealt",
        "died",
        "dived",
        "dived",
        "douched",
        "dragged",
        "drank",
        "dreamed",
        "drove",
        "dug",
        "dwelt",
        "expected",
        "fell",
        "felt",
        "fled",
        "flew",
        "flung",
        "followed",
        "forbade",
        "foresaw",
        "foretold",
        "forgave",
        "forgot",
        "forsook",
        "fought",
        "found",
        "gave",
        "gilded",
        "got",
        "ground",
        "had",
        "happened",
        "held",
        "helped",
        "hewed",
        "hit",
        "hurt",
        "inlaid",
        "insisted",
        "interlaid",
        "irised",
        "kept",
        "killed",
        "knelt",
        "knew",
        "knitted",
        "laid",
        "lay",
        "leaned",
        "leaned",
        "leapt",
        "learned",
        "led",
        "left",
        "liked",
        "lived",
        "looked",
        "lost",
        "loved",
        "meant",
        "menued",
        "met",
        "might",
        "misled",
        "mistook",
        "misunderstood",
        "moved",
        "needed",
        "niched",
        "overdrew",
        "overheard",
        "overtook",
        "preset",
        "proved",
        "proved",
        "provided",
        "psyched",
        "put",
        "quit",
        "quizzed",
        "ran",
        "rang",
        "reached",
        "remained",
        "remembered",
        "rent",
        "rid",
        "rived",
        "rode",
        "rose",
        "sang",
        "sank",
        "sat",
        "sawed",
        "seemed",
        "shat",
        "shaved",
        "shed",
        "shod",
        "shook",
        "should",
        "showed",
        "shrank",
        "skied",
        "slew",
        "slid",
        "slit",
        "slunk",
        "smelled",
        "smote",
        "sneaked",
        "sought",
        "sowed",
        "spat",
        "sped",
        "spent",
        "spoilt",
        "spoke",
        "sprang",
        "stank",
        "staved",
        "stayed",
        "stole",
        "stood",
        "stopped",
        "strewed",
        "stripped",
        "strode",
        "strove",
        "stung",
        "sublet",
        "sunburned",
        "swam",
        "sweat",
        "swelled",
        "swept",
        "swore",
        "swung",
        "talked",
        "thrived",
        "thrust",
        "tore",
        "trod",
        "understood",
        "undertook",
        "underwent",
        "upset",
        "vexed",
        "waited",
        "walked",
        "wanted",
        "was",
        "was",
        "was",
        "watched",
        "wended",
        "went",
        "wept",
        "were",
        "were",
        "were",
        "withdrew",
        "withheld",
        "withstood",
        "woke",
        "won",
        "wore",
        "would",
        "wrung",
    ]
    .iter()
    .cloned()
    .collect()
});

/// Returns true or false indicating whether a verb is in past tense.
pub fn is_past<A: AsRef<str>>(word: A) -> bool {
    let word = word.as_ref();
    #[cfg(feature = "debug")]
    println!("is_past({})", word);

    if IS_PAST.contains(word) {
        #[cfg(feature = "debug")]
        println!("  found '{}' in IS_SINGULAR", word);
        return true;
    }
    let lc_word = word.to_lowercase();
    if IS_PAST.contains(&*lc_word) {
        #[cfg(feature = "debug")]
        println!("  found lc '{}' in IS_SINGULAR", word);
        return true;
    }
    let tc_word = if word.len() > 1 {
        Some(to_titlecase(word))
    } else {
        None
    };
    if let Some(tc_word) = &tc_word {
        if IS_PAST.contains(tc_word.as_str()) {
            #[cfg(feature = "debug")]
            println!("  found tc '{}' in IS_SINGULAR", word);
            return true;
        }
    }

    for re in PAST_RECOGNIZER_REGEXES.iter() {
        if re.is_match(word) {
            #[cfg(feature = "debug")]
            println!("  word '{}' matched past recognizer regex {:?}", word, re,);
            return true;
        }
    }

    #[cfg(feature = "debug")]
    println!("  returning false");
    false
}

static IS_PRESENT_PARTICIPLE: Lazy<HashSet<&'static str>> = Lazy::new(|| {
    [
        "abiding",
        "aching",
        "arising",
        "asking",
        "avalanching",
        "awakening",
        "beating",
        "becoming",
        "begetting",
        "beginning",
        "beholding",
        "being",
        "bellyaching",
        "bending",
        "betting",
        "binding",
        "biting",
        "bleeding",
        "blitzing",
        "blowing",
        "breaking",
        "breeding",
        "bringing",
        "building",
        "burning",
        "bursting",
        "busting",
        "caching",
        "catching",
        "changing",
        "choosing",
        "clapping",
        "clinging",
        "coming",
        "continuing",
        "costing",
        "creching",
        "creeping",
        "daring",
        "dealing",
        "digging",
        "diving",
        "diving",
        "douching",
        "dragging",
        "dreaming",
        "drinking",
        "driving",
        "dwelling",
        "dying",
        "eating",
        "expecting",
        "falling",
        "feeling",
        "fighting",
        "finding",
        "fleeing",
        "flinging",
        "flying",
        "following",
        "forbidding",
        "foreseeing",
        "foretelling",
        "forgetting",
        "forgiving",
        "forsaking",
        "getting",
        "gilding",
        "giving",
        "going",
        "grinding",
        "happening",
        "having",
        "helping",
        "hewing",
        "hitting",
        "holding",
        "hurting",
        "inlaying",
        "insisting",
        "interlaying",
        "irising",
        "keeping",
        "killing",
        "kneeling",
        "knitting",
        "knowing",
        "laying",
        "leading",
        "leaning",
        "leaning",
        "leaping",
        "learning",
        "leaving",
        "liking",
        "living",
        "looking",
        "losing",
        "loving",
        "lying",
        "meaning",
        "meeting",
        "menuing",
        "misleading",
        "mistaking",
        "misunderstanding",
        "moving",
        "needing",
        "nicheing",
        "overdrawing",
        "overhearing",
        "overtaking",
        "presetting",
        "providing",
        "proving",
        "proving",
        "psyching",
        "putting",
        "quitting",
        "quizzing",
        "reaching",
        "remaining",
        "remembering",
        "rending",
        "ridding",
        "riding",
        "ringing",
        "rising",
        "riving",
        "running",
        "sawing",
        "seeking",
        "seeming",
        "shaking",
        "shaving",
        "shedding",
        "shitting",
        "shoeing",
        "showing",
        "shrinking",
        "singing",
        "sinking",
        "sitting",
        "skiing",
        "slaying",
        "sliding",
        "slinking",
        "slitting",
        "smelling",
        "smiting",
        "sneaking",
        "sowing",
        "speaking",
        "speeding",
        "spending",
        "spitting",
        "spoiling",
        "springing",
        "standing",
        "staving",
        "staying",
        "stealing",
        "stinging",
        "stinking",
        "stopping",
        "strewing",
        "striding",
        "stripping",
        "striving",
        "subletting",
        "sunburning",
        "swearing",
        "sweating",
        "sweeping",
        "swelling",
        "swimming",
        "swinging",
        "talking",
        "tearing",
        "thriving",
        "thrusting",
        "treading",
        "undergoing",
        "understanding",
        "undertaking",
        "upsetting",
        "vexing",
        "waiting",
        "waking",
        "walking",
        "wanting",
        "watching",
        "wearing",
        "weeping",
        "wending",
        "winning",
        "withdrawing",
        "withholding",
        "withstanding",
        "wringing",
    ]
    .iter()
    .cloned()
    .collect()
});

/// Returns true or false indicating whether a verb is in present participle
/// tense.
pub fn is_present_participle<A: AsRef<str>>(word: A) -> bool {
    let word = word.as_ref();
    #[cfg(feature = "debug")]
    println!("is_present_participle({})", word);

    if IS_PRESENT_PARTICIPLE.contains(word) {
        #[cfg(feature = "debug")]
        println!("  found '{}' in IS_SINGULAR", word);
        return true;
    }
    let lc_word = word.to_lowercase();
    if IS_PRESENT_PARTICIPLE.contains(&*lc_word) {
        #[cfg(feature = "debug")]
        println!("  found lc '{}' in IS_SINGULAR", word);
        return true;
    }
    let tc_word = if word.len() > 1 {
        Some(to_titlecase(word))
    } else {
        None
    };
    if let Some(tc_word) = &tc_word {
        if IS_PRESENT_PARTICIPLE.contains(tc_word.as_str()) {
            #[cfg(feature = "debug")]
            println!("  found tc '{}' in IS_SINGULAR", word);
            return true;
        }
    }

    for re in PRESENT_PARTICIPLE_RECOGNIZER_REGEXES.iter() {
        if re.is_match(word) {
            #[cfg(feature = "debug")]
            println!(
                "  word '{}' matched present participle recognizer regex {:?}",
                word, re,
            );
            return true;
        }
    }

    #[cfg(feature = "debug")]
    println!("  returning false");
    false
}

static IS_PAST_PARTICIPLE: Lazy<HashSet<&'static str>> = Lazy::new(|| {
    [
        "abided",
        "ached",
        "arisen",
        "asked",
        "avalanched",
        "awoken",
        "beaten",
        "become",
        "been",
        "begotten",
        "begun",
        "beheld",
        "bellyached",
        "bent",
        "bet",
        "bitten",
        "bled",
        "blitzed",
        "blown",
        "bound",
        "bred",
        "broken",
        "brought",
        "built",
        "burnt",
        "burst",
        "bust",
        "cached",
        "caught",
        "changed",
        "chosen",
        "clapped",
        "clung",
        "come",
        "continued",
        "cost",
        "creched",
        "crept",
        "dared",
        "dealt",
        "died",
        "dived",
        "dived",
        "douched",
        "dragged",
        "dreamed",
        "driven",
        "drunk",
        "dug",
        "dwelt",
        "eaten",
        "expected",
        "fallen",
        "felt",
        "fled",
        "flown",
        "flung",
        "followed",
        "forbidden",
        "foreseen",
        "foretold",
        "forgiven",
        "forgotten",
        "forsaken",
        "fought",
        "found",
        "gilded",
        "given",
        "gone",
        "gotten",
        "ground",
        "had",
        "happened",
        "held",
        "helped",
        "hewn",
        "hit",
        "hurt",
        "inlaid",
        "insisted",
        "interlaid",
        "irised",
        "kept",
        "killed",
        "knelt",
        "knitted",
        "known",
        "laid",
        "lain",
        "leaned",
        "leaned",
        "leapt",
        "learned",
        "led",
        "left",
        "liked",
        "lived",
        "looked",
        "lost",
        "loved",
        "meant",
        "menued",
        "met",
        "misled",
        "mistaken",
        "misunderstood",
        "moved",
        "needed",
        "niched",
        "overdrawn",
        "overheard",
        "overtaken",
        "preset",
        "proved",
        "proven",
        "provided",
        "psyched",
        "put",
        "quit",
        "quizzed",
        "reached",
        "remained",
        "remembered",
        "rent",
        "rid",
        "ridden",
        "risen",
        "riven",
        "run",
        "rung",
        "sat",
        "sawn",
        "seemed",
        "shaken",
        "shaved",
        "shed",
        "shitted",
        "shod",
        "shown",
        "shrunk",
        "skied",
        "slain",
        "slid",
        "slit",
        "slunk",
        "smelled",
        "smitten",
        "sneaked",
        "sought",
        "sown",
        "spat",
        "sped",
        "spent",
        "spoiled",
        "spoken",
        "sprung",
        "staved",
        "stayed",
        "stolen",
        "stood",
        "stopped",
        "strewn",
        "stripped",
        "strived",
        "strode",
        "stung",
        "stunk",
        "sublet",
        "sunburned",
        "sung",
        "sunk",
        "sweated",
        "swept",
        "swollen",
        "sworn",
        "swum",
        "swung",
        "talked",
        "thrived",
        "thrust",
        "torn",
        "trodden",
        "undergone",
        "understood",
        "undertaken",
        "upset",
        "vexed",
        "waited",
        "walked",
        "wanted",
        "watched",
        "wended",
        "wept",
        "withdrawn",
        "withheld",
        "withstood",
        "woken",
        "won",
        "worn",
        "wrung",
    ]
    .iter()
    .cloned()
    .collect()
});

/// Returns true or false indicating whether a verb is in past participle
/// tense.
pub fn is_past_participle<A: AsRef<str>>(word: A) -> bool {
    let word = word.as_ref();
    #[cfg(feature = "debug")]
    println!("is_past_participle({})", word);

    if IS_PAST_PARTICIPLE.contains(word) {
        #[cfg(feature = "debug")]
        println!("  found '{}' in IS_SINGULAR", word);
        return true;
    }
    let lc_word = word.to_lowercase();
    if IS_PAST_PARTICIPLE.contains(&*lc_word) {
        #[cfg(feature = "debug")]
        println!("  found lc '{}' in IS_SINGULAR", word);
        return true;
    }
    let tc_word = if word.len() > 1 {
        Some(to_titlecase(word))
    } else {
        None
    };
    if let Some(tc_word) = &tc_word {
        if IS_PAST_PARTICIPLE.contains(tc_word.as_str()) {
            #[cfg(feature = "debug")]
            println!("  found tc '{}' in IS_SINGULAR", word);
            return true;
        }
    }

    for re in PAST_PARTICIPLE_RECOGNIZER_REGEXES.iter() {
        if re.is_match(word) {
            #[cfg(feature = "debug")]
            println!(
                "  word '{}' matched past participle recognizer regex {:?}",
                word, re,
            );
            return true;
        }
    }

    #[cfg(feature = "debug")]
    println!("  returning false");
    false
}

#[cfg(test)]
mod tests {
    use std::borrow::Cow;

    #[test]
    fn convert_to_plural() {
        let mut pairs = super::PLURAL_OF
            .clone()
            .into_iter()
            .collect::<Vec<(&str, &str)>>();
        // I want the tests to run in the same order every time.
        pairs.sort_by_key(|p| p.0.to_lowercase());

        for (word, plural) in pairs {
            test_one_conversion(
                "word in PLURAL_OF",
                "plural",
                word,
                plural,
                super::convert_to_plural,
            );
        }
    }

    #[test]
    fn convert_to_singular() {
        let mut pairs = super::SINGULAR_OF
            .clone()
            .into_iter()
            .collect::<Vec<(&str, &str)>>();
        // I want the tests to run in the same order every time.
        pairs.sort_by_key(|p| p.0.to_lowercase());

        for (word, singular) in pairs {
            test_one_conversion(
                "word in SINGULAR_OF",
                "singular",
                word,
                singular,
                super::convert_to_singular,
            );
        }
    }

    #[test]
    fn convert_to_past() {
        let mut pairs = super::PAST_OF
            .clone()
            .into_iter()
            .collect::<Vec<(&str, &str)>>();
        // I want the tests to run in the same order every time.
        pairs.sort_by_key(|p| p.0.to_lowercase());

        for (word, past) in pairs {
            test_one_conversion(
                "word in PAST_OF",
                "past",
                word,
                past,
                super::convert_to_past,
            );
        }
    }

    #[test]
    fn convert_to_present_participle() {
        let mut pairs = super::PRESENT_PARTICIPLE_OF
            .clone()
            .into_iter()
            .collect::<Vec<(&str, &str)>>();
        // I want the tests to run in the same order every time.
        pairs.sort_by_key(|p| p.0.to_lowercase());

        for (word, present_participle) in pairs {
            test_one_conversion(
                "word in PRESENT_PARTICIPLE_OF",
                "present_participle",
                word,
                present_participle,
                super::convert_to_present_participle,
            );
        }
    }

    #[test]
    fn convert_to_past_participle() {
        let mut pairs = super::PAST_PARTICIPLE_OF
            .clone()
            .into_iter()
            .collect::<Vec<(&str, &str)>>();
        // I want the tests to run in the same order every time.
        pairs.sort_by_key(|p| p.0.to_lowercase());

        for (word, past_participle) in pairs {
            test_one_conversion(
                "word in PAST_PARTICIPLE_OF",
                "past_participle",
                word,
                past_participle,
                super::convert_to_past_participle,
            );
        }
    }

    static CONVERSIONS_TEST_DATA: &str = r#"
# Singular        Plural         Past            Present Participle    Past Participle
# ____________    ___________    ____________    _____________    ____________
  adds            add            added           adding           added       
  adieus          adieu          adieued         adieuing         adieued     
  alibis          alibi          alibied         alibiing         alibied     
  alights         alight         alit            alighting        alit        
  allows          allow          allowed         allowing         allowed     
  appears         appear         appeared        appearing        appeared    
  arrays          array          arrayed         arraying         arrayed     
  banks           bank           banked          banking          banked      
  beaches         beach          beached         beaching         beached     
  bears           bear           bore            bearing          borne       
  befits          befit          befitted        befitting        befitted    
  believes        believe        believed        believing        believed    
  bestows         bestow         bestowed        bestowing        bestowed    
  bids            bid            bade            bidding          bidden      
  bingos          bingo          bingoed         bingoing         bingoed     
  blitzes         blitz          blitzed         blitzing         blitzed     
  boos            boo            booed           booing           booed       
  bothers         bother         bothered        bothering        bothered    
  boxes           box            boxed           boxing           boxed       
  buoys           buoy           buoyed          buoying          buoyed      
  buys            buy            bought          buying           bought      
  buzzes          buzz           buzzed          buzzing          buzzed      
  caches          cache          cached          caching          cached      
  calls           call           called          calling          called      
  cashes          cash           cashed          cashing          cashed      
  casts           cast           cast            casting          cast        
  chateaus        chateau        chateaued       chateauing       chateaued   
  clads           clad           clad            cladding         clad        
  clothes         clothe         clothed         clothing         clothed     
  considers       consider       considered      considering      considered  
  creates         create         created         creating         created     
  cries           cry            cried           crying           cried       
  crosscuts       crosscut       crosscut        crosscutting     crosscut    
  cures           cure           cured           curing           cured       
  cuts            cut            cut             cutting          cut         
  decrees         decree         decreed         decreeing        decreed     
  disbelieves     disbelieve     disbelieved     disbelieving     disbelieved 
  does            do             did             doing            done        
  draws           draw           drew            drawing          drawn       
  ebbs            ebb            ebbed           ebbing           ebbed       
  eggs            egg            egged           egging           egged       
  errs            err            erred           erring           erred       
  eyes            eye            eyed            eyeing           eyed        
  feeds           feed           fed             feeding          fed         
  fibs            fib            fibbed          fibbing          fibbed      
  fills           fill           filled          filling          filled      
  fits            fit            fitted          fitting          fitted      
  flashfreezes    flashfreeze    flashfroze      flashfreezing    flashfrozen 
  flees           flee           fled            fleeing          fled        
  fluffs          fluff          fluffed         fluffing         fluffed     
  fondues         fondue         fondued         fondueing        fondued     
  forbears        forbear        forbore         forbearing       forborne    
  forbids         forbid         forbade         forbidding       forbidden   
  forceps         forceps        forcepsed       forcepsing       forcepsed   
  frees           free           freed           freeing          freed       
  freezes         freeze         froze           freezing         frozen      
  fulfils         fulfil         fulfilled       fulfilling       fulfilled   
  glues           glue           glued           glueing          glued       
  graffitis       graffiti       graffitied      graffitiing      graffitied  
  graphs          graph          graphed         graphing         graphed     
  grows           grow           grew            growing          grown       
  hangs           hang           hung            hanging          hung        
  has             have           had             having           had         
  hears           hear           heard           hearing          heard       
  hides           hide           hid             hiding           hidden      
  includes        include        included        including        included    
  inputs          input          input           inputting        input       
  ironclads       ironclad       ironclad        ironcladding     ironclad    
  jams            jam            jammed          jamming          jammed      
  japes           jape           japed           japing           japed       
  kings           king           kinged          kinging          kinged      
  kisses          kiss           kissed          kissing          kissed      
  kneads          knead          kneaded         kneading         kneaded     
  knits           knit           knitted         knitting         knitted     
  lends           lend           lent            lending          lent        
  lets            let            let             letting          let         
  lights          light          lit             lighting         lit         
  makes           make           made            making           made        
  matrixes        matrix         matrixed        matrixing        matrixed    
  melts           melt           melted          melting          melted      
  misses          miss           missed          missing          missed      
  mows            mow            mowed           mowing           mown        
  needs           need           needed          needing          needed      
  oboes           oboe           oboed           oboeing          oboed       
  offers          offer          offered         offering         offered     
  opens           open           opened          opening          opened      
  outbuys         outbuy         outbought       outbuying        outbought   
  outdoes         outdo          outdid          outdoing         outdone     
  outdraws        outdraw        outdrew         outdrawing       outdrawn    
  overfeeds       overfeed       overfed         overfeeding      overfed     
  overgrows       overgrow       overgrew        overgrowing      overgrown   
  overhangs       overhang       overhung        overhanging      overhung    
  overhears       overhear       overheard       overhearing      overheard   
  oversleeps      oversleep      overslept       oversleeping     overslept   
  pays            pay            paid            paying           paid        
  plays           play           played          playing          played      
  pours           pour           poured          pouring          poured      
  prays           pray           prayed          praying          prayed      
  preys           prey           preyed          preying          preyed      
  proofs          proof          proofed         proofing         proofed     
  putts           putt           putted          putting          putted      
  razes           raze           razed           razing           razed       
  readds          readd          readded         readding         readded     
  reads           read           read            reading          read        
  realights       realight       realit          realighting      realit      
  reallows        reallow        reallowed       reallowing       reallowed   
  reappears       reappear       reappeared      reappearing      reappeared  
  reaps           reap           reaped          reaping          reaped      
  rearrays        rearray        rearrayed       rearraying       rearrayed   
  recalls         recall         recalled        recalling        recalled    
  reclothes       reclothe       reclothed       reclothing       reclothed   
  reconsiders     reconsider     reconsidered    reconsidering    reconsidered
  recreates       recreate       recreated       recreating       recreated   
  refits          refit          refitted        refitting        refitted    
  rehides         rehide         rehid           rehiding         rehidden    
  reincludes      reinclude      reincluded      reincluding      reincluded  
  reinputs        reinput        reinput         reinputting      reinput     
  reknits         reknit         reknitted       reknitting       reknitted   
  relends         relend         relent          relending        relent      
  relets          relet          relet           reletting        relet       
  relights        relight        relit           relighting       relit       
  remakes         remake         remade          remaking         remade      
  remelts         remelt         remelted        remelting        remelted    
  remows          remow          remowed         remowing         remown      
  reoffers        reoffer        reoffered       reoffering       reoffered   
  reopens         reopen         reopened        reopening        reopened    
  repays          repay          repaid          repaying         repaid      
  replays         replay         replayed        replaying        replayed    
  rereads         reread         reread          rereading        reread      
  resays          resay          resaid          resaying         resaid      
  resees          resee          resaw           reseeing         reseen      
  resells         resell         resold          reselling        resold      
  resends         resend         resent          resending        resent      
  reserves        reserve        reserved        reserving        reserved    
  resets          reset          reset           resetting        reset       
  resews          resew          resewed         resewing         resewn      
  reshears        reshear        resheared       reshearing       reshorn     
  reshines        reshine        reshone         reshining        reshone     
  reshoots        reshoot        reshot          reshooting       reshot      
  reshuts         reshut         reshut          reshutting       reshut      
  reslings        resling        reslung         reslinging       reslung     
  resmells        resmell        resmelled       resmelling       resmelled   
  respells        respell        respelled       respelling       respelled   
  respills        respill        respilled       respilling       respilled   
  respins         respin         respun          respinning       respun      
  resplits        resplit        resplit         resplitting      resplit     
  respreads       respread       respread        respreading      respread    
  restarts        restart        restarted       restarting       restarted   
  resticks        restick        restuck         resticking       restuck     
  restrikes       restrike       restruck        restriking       restruck    
  restrings       restring       restrung        restringing      restrung    
  retakes         retake         retook          retaking         retaken     
  reteaches       reteach        retaught        reteaching       retaught    
  retells         retell         retold          retelling        retold      
  rethinks        rethink        rethought       rethinking       rethought   
  rethrows        rethrow        rethrew         rethrowing       rethrown    
  retries         retry          retried         retrying         retried     
  returns         return         returned        returning        returned    
  reuses          reuse          reused          reusing          reused      
  revs            rev            revved          revving          revved      
  reweaves        reweave        rewove          reweaving        rewoven     
  reweds          rewed          rewed           rewedding        rewed       
  rewets          rewet          rewet           rewetting        rewetted    
  rewinds         rewind         rewound         rewinding        rewound     
  reworks         rework         reworked        reworking        reworked    
  rewrites        rewrite        rewrote         rewriting        rewritten   
  says            say            said            saying           said        
  scries          scry           scried          scrying          scried      
  sees            see            saw             seeing           seen        
  sells           sell           sold            selling          sold        
  sends           send           sent            sending          sent        
  serves          serve          served          serving          served      
  sets            set            set             setting          set         
  sews            sew            sewed           sewing           sewn        
  shears          shear          sheared         shearing         shorn       
  shines          shine          shone           shining          shone       
  shoots          shoot          shot            shooting         shot        
  shuts           shut           shut            shutting         shut        
  sins            sin            sinned          sinning          sinned      
  skis            ski            skied           skiing           skied       
  sleeps          sleep          slept           sleeping         slept       
  slings          sling          slung           slinging         slung       
  smells          smell          smelled         smelling         smelled     
  spellcasts      spellcast      spellcast       spellcasting     spellcast   
  spells          spell          spelled         spelling         spelled     
  sphinxes        sphinx         sphinxed        sphinxing        sphinxed    
  spills          spill          spilled         spilling         spilled     
  spins           spin           spun            spinning         spun        
  splits          split          split           splitting        split       
  spreads         spread         spread          spreading        spread      
  starts          start          started         starting         started     
  sticks          stick          stuck           sticking         stuck       
  strikes         strike         struck          striking         struck      
  strings         string         strung          stringing        strung      
  takes           take           took            taking           taken       
  teaches         teach          taught          teaching         taught      
  tells           tell           told            telling          told        
  thinks          think          thought         thinking         thought     
  throws          throw          threw           throwing         thrown      
  tics            tic            ticced          ticcing          ticced      
  tills           till           tilled          tilling          tilled      
  toys            toy            toyed           toying           toyed       
  tries           try            tried           trying           tried       
  turns           turn           turned          turning          turned      
  uses            use            used            using            used        
  watches         watch          watched         watching         watched     
  weaves          weave          wove            weaving          woven       
  weds            wed            wed             wedding          wed         
  wets            wet            wet             wetting          wetted      
  winds           wind           wound           winding          wound       
  works           work           worked          working          worked      
  writes          write          wrote           writing          written     
  yapps           yapp           yapped          yapping          yapped      
"#;

    #[test]
    fn conversions() {
        for line in CONVERSIONS_TEST_DATA
            .lines()
            .filter(|l| !(l.is_empty() || l.contains('#')))
        {
            let inflections = line.split_whitespace().collect::<Vec<&str>>();
            let singular = inflections[0];
            let plural = inflections[1];
            let past = inflections[2];
            let present_participle = inflections[3];
            let past_participle = inflections[4];

            test_one_conversion(
                "singular",
                "singular",
                singular,
                singular,
                super::convert_to_singular,
            );
            test_one_conversion(
                "plural",
                "singular",
                plural,
                singular,
                super::convert_to_singular,
            );

            test_one_conversion(
                "singular",
                "plural",
                singular,
                plural,
                super::convert_to_plural,
            );
            test_one_conversion("plural", "plural", plural, plural, super::convert_to_plural);

            test_one_conversion("singular", "past", singular, past, super::convert_to_past);
            test_one_conversion("plural", "past", plural, past, super::convert_to_past);

            if present_participle != "-" {
                test_one_conversion(
                    "singular",
                    "present_participle",
                    singular,
                    present_participle,
                    super::convert_to_present_participle,
                );
                test_one_conversion(
                    "plural",
                    "present_participle",
                    plural,
                    present_participle,
                    super::convert_to_present_participle,
                );
            }

            if past_participle != "-" {
                test_one_conversion(
                    "singular",
                    "past_participle",
                    singular,
                    past_participle,
                    super::convert_to_past_participle,
                );
                test_one_conversion(
                    "plural",
                    "past_participle",
                    plural,
                    past_participle,
                    super::convert_to_past_participle,
                );
            }
        }
    }

    fn test_one_conversion<A, F>(from: &str, to: &str, word: A, expect: &str, conv: F)
    where
        A: AsRef<str>,
        F: Fn(&str) -> Cow<'_, str>,
    {
        let word = word.as_ref();
        assert_eq!(
            conv(word),
            expect,
            "from {from} convert_to_{to}({word}) = {expect}",
            from = from,
            to = to,
            word = word,
            expect = expect,
        );

        let word = word.to_uppercase();
        assert_eq!(
            conv(word.as_str()).to_lowercase(),
            expect.to_lowercase(),
            "from {from} convert_to_{to}({word}) = {expect}",
            from = from,
            to = to,
            word = word.as_str(),
            expect = expect,
        );

        let word = super::to_titlecase(&word);
        assert_eq!(
            conv(word.as_str()).to_lowercase(),
            expect.to_lowercase(),
            "from {from} convert_to_{to}({word}) = {expect}",
            from = from,
            to = to,
            word = word.as_str(),
            expect = expect,
        );
    }

    #[test]
    fn is_plural() {
        for word in super::IS_PLURAL.iter() {
            assert!(super::is_plural(word), "is_plural({}) is true", word);
            let word = word.to_uppercase();
            assert!(super::is_plural(&word), "is_plural({}) is true", word);
            let word = super::to_titlecase(&word);
            assert!(super::is_plural(&word), "is_plural({}) is true", word);
        }
    }

    #[test]
    fn is_singular() {
        for word in super::IS_SINGULAR.iter() {
            assert!(super::is_singular(word), "is_singular({}) is true", word);
            let word = word.to_uppercase();
            assert!(super::is_singular(&word), "is_singular({}) is true", word);
            let word = super::to_titlecase(&word);
            assert!(super::is_singular(&word), "is_singular({}) is true", word);
        }
    }

    #[test]
    fn is_past() {
        for word in super::IS_PAST.iter() {
            assert!(super::is_past(word), "is_past({}) is true", word);
            let word = word.to_uppercase();
            assert!(super::is_past(&word), "is_past({}) is true", word);
            let word = super::to_titlecase(&word);
            assert!(super::is_past(&word), "is_past({}) is true", word);
        }
    }

    #[test]
    fn is_present_participle() {
        for word in super::IS_PRESENT_PARTICIPLE.iter() {
            assert!(
                super::is_present_participle(word),
                "is_present_participle({}) is true",
                word
            );
            let word = word.to_uppercase();
            assert!(
                super::is_present_participle(&word),
                "is_present_participle({}) is true",
                word
            );
            let word = super::to_titlecase(&word);
            assert!(
                super::is_present_participle(&word),
                "is_present_participle({}) is true",
                word
            );
        }
    }

    #[test]
    fn is_past_participle() {
        for word in super::IS_PAST_PARTICIPLE.iter() {
            assert!(
                super::is_past_participle(word),
                "is_past_participle({}) is true",
                word
            );
            let word = word.to_uppercase();
            assert!(
                super::is_past_participle(&word),
                "is_past_participle({}) is true",
                word
            );
            let word = super::to_titlecase(&word);
            assert!(
                super::is_past_participle(&word),
                "is_past_participle({}) is true",
                word
            );
        }
    }
}
